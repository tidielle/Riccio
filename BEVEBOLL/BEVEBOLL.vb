Imports System.Data
Imports NTSInformatica.CLN__STD
Imports System.Globalization


Imports System
Public Class CLEVEBOLL
  Inherits CLEMGDOCU

#Region "VARIABILI"

  Public oCldBoll As CLDVEBOLL 'oggetto dal
  Public strLastTiporkRegistroDoc As String = "."
  Public dtTimeStampDocU As DateTime
  Public bVecchioPick As Boolean = False
  Public nOrdrig As Integer = 0 'ordinamento righe corpo

  Public nRegiva As Integer = 0       'Numero di registro attribuito automaticamente
  Public lNumprot As Integer = 0      'Numero di protocollo attribuito automaticamente
  Public strAlfpro As String = ""     'Serie protocollo attribuito automaticamente

  Public bsVEBOLLmodifCastScad As Integer = 1

  Public bKitDaOrdini As Boolean = False
  Public bCreaFilePick As Boolean = False
  Public lLettoRegistro As Boolean = False
  Public bCollaudiSuDocEmessi As Boolean = False
  Public bProponiEvasioneOrdini As Boolean = False     'se true all'inserimento di una nuova riga che non evade un ordine e sono presenti righe d'ordine, apre lo zoom ordini
  Public bConsentiEvasSuperioreTC As Boolean = False
  Public bApplicaFiltroDestInSelOrd As Boolean = False 'se TRUE - apre la selezione degli ordini (da "Zoom righe d'ordine") mostra solo quelli dove il cod. destinazione 1 di testata equivale al codice destinazione del documento corrente
  Public dttTabucamTesta As New DataTable     'contiene tabcaum della causale di testata (per limitare in po' di query)

  Public bNuovoDocDaPrec As Boolean = True
  Public bRipristinaDocumento As Boolean = False
  Public bCallFromFdin As Boolean = False
  Public bUsaPrezziScontiCtoVisione As Boolean = False  'se TRUE in evasione/chiusura documento di c/to visione devono venir applicati prezzi e sconti del documento che ha aperto il c/to visione

  Public bConsModifNoteAnteChiusuraMag As Boolean = False
  Public bRiportaCodeseInEvasione As Boolean = False
  Public bCarProdInAvlavp As Boolean = False             'se TRUE il carico da prod è stato creato da DBAVMG/DBAVEX
  Public bSalvaRicalcolaDisimpegno As Boolean = False
  Public bNpienpSaltaControlli As Boolean = False        'se TRUE, in fase di creazione carichi da prod da BENPIENP non vengono eseguiti alcuni controlli in salvataggio documento: ad esempio quello di coerenza qta tra fasi
  Public bCancellaRegCG As Boolean = False  'se true, prima di cancellare una fattura la cancella in CG (in modifica non serve, visto che verrà rilanciato bnvepnfa)

  Public bSoloSerieInTRKTPBF As Boolean = False 'se true, fa un controllo che il tipo bolla/fattura esista per tipodoc/serie
  Public bInRiapriDopoSalva As Boolean = False

  Public oClePnfa As CLEVEPNFA = Nothing

  Public bMantieniDatiDiTestata As Boolean = False

  Public bCodicePagamentoRicalcolato As Boolean = False
  Public bInEvasioneDaFattFigurativa As Boolean = False

  Public bControllaRifPartireDocRicevuti As Boolean = False
  Public bGLOBControllaRifPartireDocRicevuti As Boolean = False
#End Region

#Region "Gestione accesso"
  Private Moduli_P As Integer = CLN__STD.bsModMG Or CLN__STD.bsModVE
  Private ModuliExt_P As Integer = CLN__STD.bsModExtMGE
  Private ModuliSup_P As Integer = 0
  Private ModuliSupExt_P As Integer = 0
  Private ModuliPtn_P As Integer = 0
  Private ModuliPtnExt_P As Integer = 0

  Public ReadOnly Property Moduli() As Integer
    Get
      Return Moduli_P
    End Get
  End Property
  Public ReadOnly Property ModuliExt() As Integer
    Get
      Return ModuliExt_P
    End Get
  End Property
  Public ReadOnly Property ModuliSup() As Integer
    Get
      Return ModuliSup_P
    End Get
  End Property
  Public ReadOnly Property ModuliSupExt() As Integer
    Get
      Return ModuliSupExt_P
    End Get
  End Property
  Public ReadOnly Property ModuliPtn() As Integer
    Get
      Return ModuliPtn_P
    End Get
  End Property
  Public ReadOnly Property ModuliPtnExt() As Integer
    Get
      Return ModuliPtnExt_P
    End Get
  End Property
#End Region

  Public Overrides Function Init(ByRef App As CLE__APP, _
                              ByRef oScriptEngine As INT__SCRIPT, ByRef oCleLbmenu As Object, ByVal strTabella As String, _
                              ByVal bRemoting As Boolean, ByVal strRemoteServer As String, _
                              ByVal strRemotePort As String) As Boolean
    MyBase.strProgName = "BNVEBOLL"
    If MyBase.strNomeDal = "BD__BASE" Then MyBase.strNomeDal = "BDVEBOLL"
    MyBase.Init(App, oScriptEngine, oCleLbmenu, strTabella, bRemoting, strRemoteServer, strRemotePort)
    oCldBoll = CType(MyBase.ocldBase, CLDVEBOLL)
    oCldBoll.Init(oApp)
    BORDINI = False       'bemgdocu gestire un documento di magazzino

    VerificaUsoSettaCondCommerciali()

    Return True
  End Function

  '------------------------

  Public Overridable Sub LeggiRegistro()
    Dim strTemp() As String
    Dim strTmp As String
    Try
      '---------------------------------
      'leggo le opzioni di registro globali
      bApplicaFiltroDestInSelOrd = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ApplicaFiltroDestInSelOrd", "0", " ", "0")))
      strCalcPesi = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Calc_pesi_in_doc", "N", " ", "N")
      strTestScomin = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Test_scorta_min", "N", " ", "N")
      strTestEsist = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "Test_esistenza", "N", " ", "N")
      strTestEsistArtTc = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "TestEsistArticoliTC", "C", " ", "C") ' C = Colore, T = Taglia
      strContrFidoInsolinInsDoc = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "Contr_fido_insol_doc", "N", " ", "N")
      strVisMemList1 = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Vis_mem_list1_doc", "N", " ", "N")
      strAutoNumProt = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Prot_su_doc_ric", "N", " ", "N")
      strRipartiSpeaccSuValstat = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Rip_spesa_acc", "N", " ", "N")
      strVisNoteConto = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Vis_note_conto_in_doc", "N", " ", "N")
      strVisNoteContoApertura = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Vis_note_conto_in_apertura", "N", " ", "N")
      strTipValSemPf = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Tipo_valorizz_sem_pf", " ", " ", " ")
      strTipoListinoMat = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Tipo_list_costi_mat_carichi", " ", " ", " ") 'blank,1,2,3
      bUsaKeyMag = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "UsaKeymag", "0", " ", "0")))
      bReprintDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ConfermaRistampa", "0", " ", "0")))
      bMantieniMagRigheOrdine = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "MantieniMagazRigheOrdine", "0", " ", "0")))
      bSegnalaDiffMagaz = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "SegnalaDiffMagaz", "0", " ", "0"))) 'Personalizzazione STAFF-ICE per segnalazione magazzino di riga diverso da quello di testata, in evasione di un ordine/impegno
      bEliminaMessaggioCambioDatiTest = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "EliminaMessaggioCambioDatiTest", "0", " ", "0")))
      nIncremContatoreRiga = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "IncremContatoreRiga", "1", " ", "1")))
      strTestSottoCosto = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCosto", "N", " ", "N")) 'N,A,B,N,P
      strTestSottoCostoModifica = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "TestSottoCostoModifica", "N", " ", "N")) 'N,A,B,N,P
      bTestSottoCostoBolMovInt = CBool(Val(oCldBoll.GetSettingBus("Bsveboll", "Opzioni", ".", "TestSottoCostoBolMovInt", "0", " ", "0"))) 'se abilitata a -1 i test di sotto costo, abilitati con le opzioni TestSottoCosto e/o TestSottoCostoModifica, operano anche sui documenti di tipo Bolla di movimentazione interna (tipork=Z)
      bTestSottoCostoModificaRigheEsist = CBool(Val(oCldBoll.GetSettingBus("Bsveboll", "Opzioni", ".", "TestSottoCostoModificaRigheEsist", "0", " ", "0")))  'Test sottocosto anche su righe esistenti di documenti aperti
      strTestSottoCostoQuando = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCostoQuando", "A", " ", "A")) 'A=per riga,B=finale,C=riga+finale
      strTestSottoCostoTipo = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCostoTipo", "U", " ", "U")) 'U,M,S (oppure num. listino)
      strTestSottoCostoZero = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCostoZero", "S", " ", "S")) 'S,N,M
      dTestSottoCostoRicaricoMinimo = NTSCDec(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCostoRicaricoMinimo", "0", " ", "0")) 'percentuale (indicare "12,50" per avere un controllo su un ricarico del 12.5%) per il test sottiocosto
      bTestSottoCostoOscuraCosto = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestSottoCostoOscuraCosto", "0", " ", "0"))) 'se impostati i messaggi sui test sottocosto abilitando questa opzione non appare all'operatore la cifra del costo oggetto di confronto. Compaiono aterischi.
      bApriAnagraficaPrivata = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ApriAnagraficaPrivata", "0", " ", "0")))
      bAggScarichiMateriali = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "AggScarichiMateriali", "-1", " ", "-1")))
      bSalvaCondizioniFinali = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "SalvaCondizioniFinali", "0", " ", "0")))
      nSalvaCondizioniFinaliClientiDove = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "SalvaCondFinaliCliDove", "2", " ", "2")))
      nSalvaCondizioniFinaliFornitoriDove = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "SalvaCondFinaliForDove", "2", " ", "2")))
      bCalcolaScadUsaSempreDatdoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CalcolaScadUsaSempreDatdoc", "0", " ", "0")))
      '-----------------------------------------------------------------------------------------
      bTestCostoCaricoRiga = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoRiga", "0", " ", "0")))
      bTestCostoCaricoFinale = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoFinale", "0", " ", "0")))
      strTmp = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoList", "1", " ", "1")
      strTemp = strTmp.Split(";"c)
      If strTemp.Length > 1 Then
        nTestCostoCaricoListino1 = NTSCInt(strTemp(0))
        nTestCostoCaricoListino2 = NTSCInt(strTemp(1))
      Else
        nTestCostoCaricoListino1 = NTSCInt(strTemp(0))
        nTestCostoCaricoListino2 = 0
      End If
      dTestCostoCaricoPercDiff = NTSCDec(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoPercDiff", "0", " ", "0"))
      bTestCostoCaricoAncheSL = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoAncheSL", "0", " ", "0")))
      bTestCostoCaricoInferiore = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestCostoCaricoInferiore", "0", " ", "0")))
      '--- Opzione di registro per arrotondamento totale fattura
      nArrotonda5Cent = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Arrotonda5Cent", "0", " ", "0"))
      '-----------------------------------------------------------------------------------------
      'Impementazione calcolo spese trasp (4.0b) S=sempre N=mai (def), 'E' solo doc. emessi
      strCalcolaSpeseTrasp = oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "CalcolaSpeseTrasp", "N", " ", "N")
      bCalcolaSpeseTraspSoloNuovi = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "CalcolaSpeseTraspSoloNuovi", "0", " ", "0"))
      bUsaVettore1perCalcoloSpeseTrasp = CBool(IIf(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "UsaVettore1perCalcoloSpeseTrasp", "N", " ", "N") = "S", True, False))
      '---
      strTestEsistQuando = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Test_esistenza_quando", " ", " ", " "))
      strNoteNuoviDocumenti = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoteNuoviDocumenti", "", " ", "")
      bRiportaNote1CF = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaNote1CF", "0", " ", "0")))
      bRiportaNote2CF = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaNote2CF", "0", " ", "0")))
      gstrTipoArtConf = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bscpcopr", "Opzioni", ".", "TipoArtConf", "0", " ", "0"))
      bIgnoraMagTestata1Ordine = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "IgnoraMagTestata1Ordine", "0", " ", "0"))) '-1=True , 0=false (default)
      nSpeseDaRipartire = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "SpeseDaRipartire", "0", " ", "0"))) '0=Nessuna (default)
      '1=trasp+imballi
      '2=trasp+imballi+inca+bolli
      bDisabilitaObblContoLavoro = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaObblContoLavoro", "0", " ", "0"))) '-1 o 0
      bIgnoraMagDistintaBase = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "IgnoraMagDistintaBase", "0", " ", "0"))) '-1 o 0
      nMagAccettazione = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "MagAccettazione", "0", " ", "0")) '0=non accett, <> 0 magazzino accettazione
      bRiproponiDataDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiproponiDataDoc", "0", " ", "0"))) '-1=proponi la data del prec. documento creato, 0=proponi sempre la data del sistema
      bRiportaCostiLavOPT = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaCostiLavOPT", "0", " ", "0"))) '-1=proponi il prezzo della lavorazione indicata sul ordine di prod. terzista, 0=leggi il costo della lavorazione dai listini (default)
      bTmp501 = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "Tmp501", "0", " ", "0"))) '-1=abilita la gestione del campo note di movcla  ' NON DOCUMENTARE
      nRicalcPrezziOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaPrezziOrdini", "0", " ", "0")))  '-1=ignora il prezzo dell'ordine e legge il listino;
      '1=legge comunque i listini se trova zero lascia quello dell'ordine
      nRicalcPrezziNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaPrezziNote", "0", " ", "0")))  '-1=ignora il prezzo della nota di prel. e legge il listino
      nRicalcScontiOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaScontiOrdini", "0", " ", "0")))  '-1=ignora gli sconti dell'ordine e li rilegge
      nRicalcScontiNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaScontiNote", "0", " ", "0")))  '-1=ignora gli sconti della nota e li rilegge
      nRicalcProvvOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaProvvigioniOrdini", "0", " ", "0")))  '-1=ignora le provvigione ordine e le rilegge
      nRicalcProvvNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RicalcolaProvvigioniNote", "0", " ", "0"))) '-1=ignora le provvigione note e le rilegge
      bChiediContoOrdini = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ChiediContoOrdini", "0", " ", "0"))) '-1=prima di selezionare ordini/righe ord/note chiede il conto
      bCalcolaColliPesiSuDocAperti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "CalcolaColliPesiSuDocAperti", "0", " ", "0"))) '-1=i colli/pesi vengono ricalcolati sui nuovi documenti
      bDisabilitaCheckLotti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaCheckLotti", "0", " ", "0"))) '-1=disabilita il controllo di riga e finale sulla obblig. del lotto
      bDisabilitaCheckUbicaz = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaCheckUbicaz", "0", " ", "0"))) '-1=disabilita il controllo di riga e finale sulla obblig. dell'ubicazione
      bDisabilitaCheckCommesse = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaCheckCommesse", "0", " ", "0"))) '-1=disabilita il controllo finale sulla obblig. del numero commessa
      bDisabilitaCheckFasi = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaCheckFasi", "0", " ", "0"))) '-1=disabilita il controllo finale sulla obblig. della fase
      bDisabilitaCheckMatricole = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaCheckMatricole", "0", " ", "0"))) '-1=disabilita il controllo finale sulla obblig. della matricola
      nVisMemNumList = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "VisMemNumList", "1", " ", "1"))) 'indica il numero di listino da memorizzare (default listino 1)
      bLeggiOpzioniDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "LeggiOpzioniDoc", "0", " ", "0"))) '-1=abilita la lettura delle opzioni in \OpzioniDoc nel RegBus
      If bCallPnfa Then
        bProteggiDocContab = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProteggiDocContab", "-1", " ", "-1"))) '-1=chiede la password x i documenti contabilizzati
      Else
        bProteggiDocContab = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProteggiDocContab", "0", " ", "0"))) '-1=chiede la password x i documenti contabilizzati
      End If
      If bCallPnfa Then
        bProteggiDocFatt = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProteggiDocFatt", "-1", " ", "-1"))) '-1=chiede la password x i documenti già fatturati
      Else
        bProteggiDocFatt = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProteggiDocFatt", "0", " ", "0"))) '-1=chiede la password x i documenti già fatturati
      End If
      bForzaLetturaScontiQta = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ForzaLetturaScontiQta", "0", " ", "0"))) '-1=rilegge sempre gli sconti alla variazione della qta
      bForzaLetturaPrezziQta = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ForzaLetturaPrezziQta", "0", " ", "0"))) '-1=rilegge sempre  prezzi alla variazione della qta
      bDisabilitaMsgPrezzoZero = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaMsgPrezzoZero", "0", " ", "0"))) '-1=disabilita il messaggio di conferma prezzo zero
      bDisabilitaMsgQuantZero = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaMsgQuantZero", "0", " ", "0"))) '-1=disabilita il messaggio di conferma quantità zero
      gbUsaFiltroCommessa = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "UsaFiltroCommessa", "-1", " ", "-1")) 'Legge la distinta base ignora il filtro commessa (default -1=applica filtro)
      gbUsaFiltroPadre = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "UsaFiltroPadre", "-1", " ", "-1")) 'Legge la distinta base ignora il filtro art. padre (default -1=applica filtro)
      nCO2_ArrQuant = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "CO2_ArrQuant", "3", " ", "3"))) 'numero decimali accettati nella q.tà  ' NON DOCUMENTARE
      bTMclav = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ChiediNumITPerClav", "0", " ", "0"))) 'chiede il numero di impegno di trasferimento per privilegiare i ddt da legare con conto lavoro passivo
      bDisableCheckRegCassa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisableCheckRegCassa", "0", " ", "0"))) 'se impostata a -1 consente di lanciare il profilo IE su tutti i tipi documenti
      bNoDatValDistinta = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoDatValDistinta", "0", " ", "0"))) 'se impostata a -1 non chiede conferma della data validità distinta, usa sempre data documento
      bRiportaCambio1Ord = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaCambio1Ord", "0", " ", "0"))) 'se impostata a -1 riporta il cambio del 1° ordine aggiunto sul documento (compat. 5.0)
      bRiportaCambio1Nota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaCambio1Nota", "0", " ", "0"))) 'se impostata a -1 riporta il cambio della 1° nota di prel. aggiunta sul documento (compat. 5.0)
      bNoMsgCommessaDiversa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoMsgCommessaDiversa", "0", " ", "0"))) 'se impostata a -1 non segnala diversità del n. commessa/subc evadendo odini
      bChiamaCollSilent = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ChiamaCollSilent", "0", " ", "0"))) 'se impostata a -1 riga per riga chiama i collaundi in modo silent
      bPrelistIvato = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "PrelistIvato", "0", " ", "0"))) 'se impostata a -1 mm_prelist contiene il prezzo ivato, normalmente c'è il netto
      bDisabilitaDecodificaBarcode = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DisabilitaDecodificaBarcode", "0", " ", "0"))) 'se attiva (-1) non effettua la decodifica della colonna barcode
      ImpostaFormatQtaEsistCorpo(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "FormatQtaEsistCorpo", oApp.FormatQta, " ", oApp.FormatQta))  'formattazione VB sulle qta esist/impeg/ordin. sul corpo
      bCheckLottiInScarico = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CheckLottiInScarico", "0", " ", "0"))) 'Controlla l'esistenza fisica del lotto in fase di scarico
      strCheckLottiInScaricoCome = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CheckLottiInScaricoCome", "E", " ", "E") 'E = Esistenza, D = Disponibilità Netta
      nCheckUbicazInScarico = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CheckUbicazInScarico", "0", " ", "0"))) 'Controlla l'esistenza fisica dell'ubicazione in fase di scarico: 0(default)=disabilitata, -1=tutti i maggazini, 1=solo magazzini interni
      strCheckUbicazInScaricoCome = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CheckUbicazInScaricoCome", "E", " ", "E") 'E = Esistenza, D = Disponibilità Netta
      bAddScontiPerPeso = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "AddScontiPerPeso", "0", " ", "0"))) 'al salvataggio Aggiunge gli sconti di testata confrontando somma di quntità con fasce quantità sconti cliente/cl articolo 999 e/o cl sconti cli / cl art 999 ' NON DOCUMENTARE
      gbRiportaFasiFantasmi = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RiportaFasiFantasmi", "0", " ", "0"))) 'se impostata a -1 espodendo la distinta riporta le fasi anche dei fantasmi
      bContoNuoviDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ContoNuoviDoc", "0", " ", "0"))) 'se impostata a  -1 quando crea un nuovo documento lo intesta già ad un conto (vedi dopo x sapere quale)
      nContoNuoviDocQuale = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ContoNuoviDocQuale", "0", " ", "0")))  '0=(dfefault) quello precedentemente usato x creare nuovi documentidello stesso tipo nella sessione corrente; 1=il conto cliente privato da pers. vendite else nContoNuoviDocQuale=0
      bModifTempiLavSuQtaScart = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ModifTempiLavSuQtaScart", "0", " ", "0"))) 'se impostata a  -1 nella finestra lavorazioni collegate anche quando si cambia la q.ta scartata vengono rettioficati i tempi di esecuzione
      bChiediDestInTestata = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ChiediDestInTestata", "0", " ", "0"))) 'se impostata a  -1 se il cliente NON ha destinazioni div. indicate, chiede se aprire lo zoom destinazioni in testata (dopo aver digitato il conto)
      nConaiListinoContributo = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ConaiListinoContributo", "1", " ", "1"))) 'numero listino contributi CONAI (default 1)
      bConaiDisableCheckCodart = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ConaiDisableCheckCodart", "0", " ", "0"))) 'se impostata a  -1 disabilita il controllo finale sugli articoli il cui codice inizia con CONAI che derivi dai dettagli conai
      bNoMsgCongruenzaConto = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoMsgCongruenzaConto", "0", " ", "0"))) 'se impostata a -1 evita il messaggio di congruenza del tipo di conto (fornitore/cleinte) rispetto al tipo documento
      bEvadendoRiportaSempreDatiTrasp = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "EvadendoRiportaSempreDatiTrasp", "0", " ", "0"))) 'se impostata a -1 evadendo  riporta sempre i suoi dati di trasporto (anche se sono presenti nel corpo del documento)
      bRilevaDisponibPerCommessa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RilevaDisponibPerCommessa", "0", " ", "0"))) 'se attiva (-1) mostra nel corpo le disponbilità per commessa (sugni articoli gestiti a ordini/impegni/commessa
      lRilevaDisponibCodCommessa = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RilevaDisponibCodCommessa", "9999", " ", "9999"))) 'indicare il n. di comemssa (default=9999) su cui visualizzare con un messaggio la disponibilità per articolo/magazzino/commessa
      strTestEsistCome = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestEsistCome", "E", " ", "E")  'E(defaut)=su esistenza, D=disponibilità netta
      bTestEsistPerComm = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "TestEsistPerComm", "0", " ", "0"))) 'se attiva (-1) determina esistenze/disponibilità x articoo/magazzino/commessa sugli articoli gestiti a commessa
      nProponiArtSostitutivo = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProponiArtSostitutivo", "0", " ", "0"))) 'se attiva (-1) alla digitazione del codice articolo, se possiede un articolo sostitutivo lo segnala dando la possibilità di usarlo.
      strDispMultiMag = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "DispMultiMag", "N", " ", "N")
      bLetturaBCinArtRilevaDati = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "LetturaBCinArtRilevaDati", "0", " ", "0")))
      strTemp = strDispMultiMag.Split(";"c)
      strElencoMagazzini = ""
      For i As Integer = 0 To strTemp.Length - 1
        If IsNumeric(strTemp(i)) Then
          strElencoMagazzini = strElencoMagazzini & strTemp(i) & ", "
        End If
      Next
      If strElencoMagazzini <> "" Then strElencoMagazzini = Mid(strElencoMagazzini, 1, Len(strElencoMagazzini) - 2)

      'leggo da opzioni generali se l'azienda gestisce i PVR
      bGestPVR = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"OPZIONI", ".", ".", "GestPVR", "0", " ", "0"))
      'bCollega_MG_DI = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "OPZIONI", ".", ".", "Collega_MG_DI", "0", " ", "0"))
      'Cambiamento da NET 2015, si legge da ANADITAC (dati aggiuntivi contabilità):
      bCollega_MG_DI = oCldBoll.CollegaMGDI(strDittaCorrente)
      bAbilOrdiniBarcode = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "AbilOrdiniBarcode", "-1", " ", "-1"))) 'se attiva (-1) abilita l'acquisizione di ordini con barcode (NON DOCUMENTARE x il momento)
      bNoMsgCongruenzaMagimp = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoMsgCongruenzaMagimp", "0", " ", "0"))) 'se attiva (-1) non segnala i messaggi di non congruenza tra il conto associato nel magazzino impegni e il conto di testata (nei carichi di produzione)
      nGestioneMatricSuNoteDiPrel = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "GestioneMatricSuNoteDiPrel", "0", " ", "0"))) '0=impedisci inserimenti (default), 1=consenti inserimenti (compatibile 8.0Sr1 e prec), 2=obbliga inserimento
      lNoModifQuantSuColli = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "NoModifQuantSuColli", "0", " ", "0"))
      bNoModifQuantSuColli = CBool(lNoModifQuantSuColli) 'se attiva (-1) quando si modificano manualmente i colli (o UM) non modifica la quantità SE GIA' DIVERSA DA ZERO (1 = non si attiva anche se la quantità = 0)
  
      bBarcodeConQta = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "BarcodeConQta", "0", " ", "0"))) 'se attiva (-1) rileva la quantità indicata nei barcode
      bBarcodeDerogaQta = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "BarcodeDerogaQta", "0", " ", "0"))) 'se attiva (-1) rileva la quantità indicata nei barcode pero' in deroga a BarcodeConQta (sono alternative)
      bConsMultiEvasRigheOrdNote = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ConsMultiEvasRigheOrdNote", "0", " ", "0"))) 'se attiva (-1) è possibile evadere + volte la stessa riga d'ordine (ovviamente non fa controlla la presenza di evasioni precedenti nello stesso documento, sulla stessa riga)
      bBloccaAgente1 = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "BloccaAgente1", "0", " ", "0"))) 'se attiva (-1) non è + possibile modificare l'agente 1 di testata sui doc. presi in modifica  ' NON DOCUMENTARE
      bUsaMagStockArticolo = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "UsaMagStockArticolo", "0", " ", "0"))) 'digitando righe sul corpo, se l'opzione è abilitata a -1, effettua il movimento sul magazzino di stock invece del magazzino di testata.
      bIncassoTotalePagContanti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "IncassoTotalePagContanti", "0", " ", "0"))) 'se abilitata a -1 su tutti doc. con pagamento di tipo 'contante', sui nuovi documenti emessi, imposta incassato = totdoc-omag-abbuo
      bFiltroMagazRigheOrdini = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "FiltroMagazRigheOrdini", "0", " ", "0")))
      nFiltroMagazRigheOrdiniEscludiTipobf = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "FiltroMagazRigheOrdiniEscludiTipobf", "0", " ", "0")))
      bStornaProvvAcconti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "StornaProvvAcconti", "0", " ", "0"))) 'se abilitata evadendo gli acconti sulla riga negativa storna le provvigioni dell'acconto
      bNoEvasioneOrdSospesi = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoEvasioneOrdSospesi", "0", " ", "0"))) ' se abilitata NON consente evasione/selezione degli ordini sospesi
      bDescrAggKitSuNote = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DescrAggKitSuNote", "0", " ", "0"))) 'se abilitata a -1 quando vengono letti i componenti dei kit viene riportata la 'Descrizione aggiuntiva' indicata sul componente KIT nel campo 'Note' della riga del corpo (attenzione: se abilitata l'opzione il campi note eventuamente ereditato dal'articolo viene sovrascitto)
      bConfermaRigaBarcode = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ConfermaRigaBarcode", "0", " ", "0"))) 'se abilitata a -1 simula la pressione di freccia in giù premendo INVIO dopo aver letto e scritto il barcode nella colonna relativa
      bCodartDaBarcode = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "CodartDaBarcode", "0", " ", "0"))) 'NON DOCUMENTARE
      bRiapriDocSuSalva = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "RiapriDocSuSalva", "0", " ", "0"))) 'se abilitata a -1 al salvataggio del documento lo riapre (lo stesso) posizionandosi in testata, se impsotata ad 1 utilizza l'impostazione della voce di menu 'Riapri doc dopo salva'
      bDopoStpChiamaStpRegCassa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DopoStpChiamaStpRegCassa", "0", " ", "0"))) 'se abilitata a -1 dopo aver eseguito la stampa viene eseguita anche la stampa su reg. di cassa (ovvero lanciato l'import/export)
      bNonRiportareLottiDaCLav = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NonRiportareLottiDaCLav", "0", " ", "0"))) 'se abilitata a -1 nella selezione dei rif. al conto lavoro NON riporta i LOTTI presenti su tali documenti, questo per compatibilità all'indietro visto che da questo momento sono riportati.
      bMovimQtaLotti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "MovimQtaLotti", "0", " ", "0"))) 'se abilitata a -1 obbliga che l'articolo venga movimentato a multipli di lotto ( se l'articolo ha una politica di riordino "su fabbisogno con lotto"
      bMantieniCausaliRigheNota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "MantieniCausaliRigheNota", "0", " ", "0"))) 'se abilitata a -1 in evasione di una nota di prelievo sul documento eredita dalla nota le causali di magazzino indicate sulle righe al posto delle causali di testata  ' NON DOCUMENTARE
      bMantieniCausaliTestata1Nota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "MantieniCausaliTestata1Nota", "0", " ", "0"))) 'se abilitata a -1 in evasione della prima nota di prelievo (se non sono presenti righe nel documento) sulla testata del documento eredita dalla testata della nota di prel. le causali di magazzino 1 e 2  ' NON DOCUMENTARE
      bCarichiProdDaAvmg = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "CarichiProdDaAvmg", "0", " ", "0"))) 'se abilitata a -1 in cancellazione di un carico da produzione cancella anche i riferimenti in avlavp
      bRifClavManuale = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "RifClavManuale", "0", " ", "0"))) 'se abilitata non avviene l'attribuzione automatica dei rif. al conto/lavoro (sia doc ricevuto dai clienti che dalla produzione), l'operatore dovrà attribuirli manualmente
      bNonCalcolaColli = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NonCalcolaColli", "0", " ", "0"))) 'se abilitata non effettua i calcoli automatici sul campo totale colli (sia sui documenti aperti che quelli nuovi) il campo colli è sempre un dato da imputare manualmente
      If bModTCO = True Then
        bAttivaRecentTCO = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "AttivaRecentTCO", "0", " ", "0"))) 'se abilitato, attiva il RECENT per i campi relativi a Taglie e colori
      End If
      bModifColliSuQuant = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "ModifColliSuQuant", "0", " ", "0"))) 'se abilitata a -1 (anche in \opzionidoc) alla modifica del campo QUANTITA vengono modificati all'indietro i COLLI (col fattore di conversione tra UM)
      bNoTempiSuTerzisti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoTempiSuTerzisti", "0", " ", "0"))) 'opzione di registro che se abilitata quando scrive la lavorazione terzista non inserisce il tempo di esecuzione (giorni x 8 ore) ma inserisce zero.
      bNoColliSuFigliKit = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NoColliSuFigliKit", "0", " ", "0"))) 'se abilitata a -1 sui figli dei kit inserire zero nel campo colli (al posto dei colli per conversione della UMP indicata nei colli)
      bRideterminaProvvsuRigheOrd = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "RideterminaProvvsuRigheOrd", "0", " ", "0")))
      bAggMovClaFasiPerCommessa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "AggMovClaFasiPerCommessa", "0", " ", "0"))) 'nella determinazione dei rif. ai doc. di c/lav attivo sugli art. a fasi nei resi lavorati al cliente privilegia gli articoli dei componenti che hanno il num. di commessa = alla commessa del reso (non sono disponibili però articoli con comm<>dal reso)  ' NON DOCUMENTARE
      bAggMovClaFasiFiltroCliente = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "AggMovClaFasiFiltroCliente", "0", " ", "0"))) 'nella determinazione dei rif. ai doc. di c/lav attivo sugli art. a fasi nei resi lavorati al cliente considera solo i documenti ricevuti dal cod. cliente indicato nel documento di reso corrente
      bRendiBloccantiAlertCLavoro = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "RendiBloccantiAlertCLavoro", "0", " ", "0"))) 'se abilitata a -1 tutti i messaggi di incongruenze sul conto lavoro diventano bloccanti
      strQuandoAgContropManca = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Opzioni", ".", ".", "QuandoAgcontropManca", "0", " ", "0")
      'PROMOZIONI
      bAbilitaPromozioni = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"OPZIONI", ".", ".", "Abilita_Promozioni", "0", " ", "0")))
      'ALERT
      bGestAlert = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "Abilita_Alert", "0", " ", "0")))
      '-----------------------------------------------------------------------------------------
      bSpeseIncSoloSuPrimaFatt = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "SpeseIncSoloSuPrimaFatt", "0", " ", "0"))) 'Se abilitata, non applica spese di incasso, sulle fatture immediatedalla seconda in poi dello stesso mese per lo stesso conto  ' NON DOCUMENTARE
      bNoAddebitoSpeincSuNoteCredito = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "NoAddebitoSpeincSuNoteCredito", "0", " ", "0"))) 'Se abilitata, non addebita le spese incasso sulle note di accredito (non imposta il flag al richiamo del cliene)
      bDisabilitaObblContoCASuScarichiSL = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "DisabilitaObblContoCASuScarichiSL", "0", " ", "0"))) 'Se abilitata, disabilia il controllo di obbligatorietà presenza del conto CA sui SEMILAVORATI negli scarichi di prod. anche se la causale di magazzino (test CI) lo richiede
      '-----------------------------------------------------------------------------------------
      bDisabilitaCheckDateAnteriori = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "DisabilitaCheckDateAnteriori", "0", " ", "0"))) 'Se abilitata, disabilia il controllo che fa apparire il messaggio della mancata consecutività delle date di documento
      bNonProporreEvasioneIPSuNotePrel = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "NonProporreEvasioneIPSuNotePrel", "0", " ", "0"))) 'Se abilitata, nella selezione ordini (su note prel.) non propone gli Impegni di prod.
      bNonMostrareImpegniPrenotASaldo = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "NonMostrareImpegniPrenotASaldo", "0", " ", "0"))) ' se abilitata a -1 in fase di selezione testate d'ordine su Note di prelievo non mostra gli impegni che risultano prenotati a saldo (con tutte le righe prenot. a saldo). Questa opzione di registro comporta un peggioramento delle performances in apertura dello zoom testate d'ordine in questo contesto
      nUsaCondPagContoFatt = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "Opzioni", ".", "UsaCondPagContoFatt", "-1", " ", "-1")) ' se abilitata a -1 in fase di selezione ordini/impegni aperti non riporta i dati di testata dell'ord. aperto originaria (opera come in Business8)
      If nUsaCondPagContoFatt = -1 Then
        bUsaCondPagContoFatt = True
      Else
        bUsaCondPagContoFatt = False
      End If
      '-----------------------------------------------------------------------------------------
      'bNewCallSP = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"OPZIONI", ".", ".", "NewCallSP", "-1", " ", "-1"))) 'se attiva (-1) chiama le varie Stored Procedures passando direttamente i parametri con una stringa precostruita
      '-----------------------------------------------------------------------------------------
      bNonEreditareDateCompDaOrd = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "NonEreditareDateCompDaOrd", "0", " ", "0"))) 'Se attiva, non eredita le date di competenza economica da MOVORD ma le setta come la data del documento
      '-----------------------------------------------------------------------------------------
      bDeterminaBolliSuOperazEsenti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Opzioni", ".", ".", "DeterminaBolliSuOperazEsenti", "0", " ", "0"))) 'Se attiva il bollo non viene determinato solo se in testata vi è il codice di esenzione, ma se la somma delle operazioni esenti del documenti (righe e spese di piede) supera la soglia minima in TABBOTR  ' NON DOCUMENTARE
      '-----------------------------------------------------------------------------------------
      '--- Su righe nuove:
      '--- se attiva, se codice Esenzione di testata è diversa da zero, se tipo Iva articolo
      '--- è = 2 (Op. Esenti/Non imp.), propone ARTICO.ar_codiva
      '-----------------------------------------------------------------------------------------
      bPrioritaCodeseArticolo = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "PrioritaCodeseArticolo", "0", " ", "0")))
      '-----------------------------------------------------------------------------------------
      '--- Personalizzazione INNOVAZIONI E PROGETTI:
      '--- se attiva, sui documenti di tipo 'Z' Bolla di movimentazione interna', richiamando
      '--- lo zoom su ANAGRA, propone il tipo 'F' e non fa apparire il messaggio di richiesta
      '--- 'Confermi documento emesso a fornitore'
      '-----------------------------------------------------------------------------------------
      bProponiFornSuZ = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "ProponiFornSuZ", "0", " ", "0")))  ' NON DOCUMENTARE
      '-----------------------------------------------------------------------------------------
      '--- Personalizzazione INNOVAZIONI E PROGETTI:
      '--- se attiva, richimando lo 'Zoom righe ordini', se presente il numero di commessa
      '--- in testata, lo passa come filtro a tale zoom
      '-----------------------------------------------------------------------------------------
      bPassaCommessaTestataHLMO = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "PassaCommessaTestataHLMO", "0", " ", "0")))  ' NON DOCUMENTARE
      '-----------------------------------------------------------------------------------------
      nIgnoraTipobfTestata1Ordine = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "IgnoraTipobfTestata1Ordine", "0", " ", "0"))
      '-----------------------------------------------------------------------------------------
      bConsentiCreazDocumCliFornBloccoFisso = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "ConsentiCreazDocumCliFornBloccoFisso", "0", " ", "0"))) ' se abilitata consente di intestare un documento anche a cli/forn con blocco fisso.
      bConfermacompilazioneSchedaTrasp = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "ConfermacompilazioneSchedaTrasp", "0", " ", "0"))) ' se abilitata quando salva/stampa chiede di compilare la scheda di trasporto
      bSegnalaCreazDocumCliFornBloccati = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "SegnalaCreazDocumCliFornBloccati", "0", " ", "0"))) ' se abilitata avvisa (senza bloccare) se il cli/forn è in uno stato di blocco per insoluti/fuori fido/rd scadute. Non ha effetto se l'opzione di registro \bsveboll\opzioni(doc)\Contr_fido_insol_doc
      If strContrFidoInsolinInsDoc = "S" Then bSegnalaCreazDocumCliFornBloccati = False
      bSegnalaEvasioneOrdBloccati = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "SegnalaEvasioneOrdBloccati", "0", " ", "0"))) ' se abilitata avvisa (senza bloccare) se l'ordine che si sta evadendo risulta bloccato in testata
      bNoAttribRifCLav = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "NoAttribRifCLav", "0", " ", "0")))
      bAttribRifCLavAttSuScarProdArtFasi = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "AttribRifCLavAttSuScarProdArtFasi", "0", " ", "0"))) 'Se abilitata, effettua l'attribuzione dei riferim. ai doc. di carico in conto lavoro attivo (negli scarichi di produzione, per i figli degli articoli a fase) per compatibilità con il passato, in seguito a cambio di comportamento a partire da Business NET 2010 SR1. Questi riferimenti non venivano e non vengono comunque utilizzati per la determinazione degli scarichi nei resi lavorato al cliente.
      bDisabilitaControlliSubcomm = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSORGSOR", "OPZIONI", ".", "DisabilitaControlliSubcomm", "0", " ", "0"))) ''--- Se abilitata, NON controlla la validità della sottocommessa di riga
      bCreaFilePick = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "NotaPrelCreaPicking", "0", " ", "0"))
      strDescrLinguaRifAcc = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "DescrLinguaRifAcc", "", " ", "")
      'Flag di registro che indicano se riportare o meno incassato (td_pagato) e/o abbuono (td_abbuono)
      'quando si importano gli ordini e/o le note
      '-----------------------------------------------------------------------------------------
      bRiportaIncassato1Ord = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "RiportaIncassato1Ord", "0", " ", "0"))) ' se abilitata importa l'incassato (td_pagato) quando si importano gli ordini
      bRiportaAbbuono1Ord = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "RiportaAbbuono1Ord", "0", " ", "0"))) ' se abilitata importa l'abbuono (td_abbuono) quando si importano gli ordini
      bRiportaIncassato1Nota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "RiportaIncassato1Nota", "0", " ", "0"))) ' se abilitata importa l'incassato (td_pagato) quando si importano le note
      bRiportaAbbuono1Nota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONI", ".", "RiportaAbbuono1Nota", "0", " ", "0"))) ' se abilitata importa l'abbuono (td_abbuono) quando si importano le note
      '-----------------------------------------------------------------------------------------
      bNonRiportareAbiCabBancaInEvasione = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "NonRiportareAbiCabBancaInEvasione", "0", " ", "0")))  'Se attiva, in caso di evasione di un Ordine/Note Di Prelievo, non eredita la banca, l'abi, il cab e relative descrizioni
      bRiportaPesoColliNota = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "RiportaPesoColliNotaPrelievo", "0", " ", "0")))  'Se attiva, in evasione di una nota di prelievo aggiunge nel piede del documento il peso e il totale colli della nota di prelievo (se sono + note li somma)
      '-----------------------------------------------------------------------------------------
      bIgnoraDisponibilita = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSORGNNP", "OPZIONI", ".", "IgnoraDisponibilita", "0", " ", "0"))

      If bForzaLetturaPrezziQta Then nPrperqta = CLN__STD.bsPrSetsiqta
      If bForzaLetturaScontiQta Then nScperqta = CLN__STD.bsPrSetsiqta

      bEsplodiD = Not (CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "Opzioni", ".", "No_Esplosione_Articolo_D", "0", " ", "0")))
      bSalvaAncheSeNonModificato = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "SalvaAncheSeNonModificato", "0", " ", "0"))
      bCollaudiSuDocEmessi = CBool(Val(oCldBoll.GetSettingBus("OPZIONI", ".", ".", "CollaudiSuDocEmessi", "0", " ", "0")))  ' NON DOCUMENTARE

      bProponiEvasioneOrdini = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ProponiEvasioneOrdini", "0", " ", "0")))
      bApriAnalottiDopoNew = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "ApriAnalottiDopoNew", "0", " ", "0"))
      bConsentiEvasSuperioreTC = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "ConsentiEvasSuperioreTC", "0", " ", "0"))) 'NON DOCUMENTARE: se abilitata consente di evadere un articolo T&C con quantità per taglia superiore a quelle previste in ordine/nota
      bDatIvaComeDatdoc = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "DatIvaComeDatdoc", "0", " ", "0")))
      bUsaPrezziScontiCtoVisione = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "UsaPrezziScontiCtoVisione", "0", " ", "0")))
      nInibisciTipiArticoliDiversi = NTSCInt(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "InibisciTipiArticoliDiversi", "0", " ", "0"))
      nInibisciTipiArticoliDiversiTrannePagContanti = NTSCInt(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "InibisciTipiArticoliDiversiTrannePagContanti", "0", " ", "0"))
      strNomeCampoArtico = NTSCStr(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "NomeCampoArtico", "ar_tipo", " ", "ar_tipo"))
      strDataInibisciArticoliDiversi = NTSCStr(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "DataInibisciArticoliDiversi", "", " ", ""))
      bArticoliDiversiChiediConferma = CBool(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "ArticoliDiversiChiediConferma", "0", " ", "0"))

      bRilevaCodPagaCambioContoDocModif = CBool(oCldDocu.GetSettingBus("OPZIONI", ".", ".", "RilevaCodPagaCambioContoDocModif", "0", " ", "0"))

      strControlloPIvaCodFis = oCldDocu.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "ControlloPIvaCodFis", NTSCStr(IIf(bModRSM, "0", "1")), " ", NTSCStr(IIf(bModRSM, "0", "1")))

      bConsModifNoteAnteChiusuraMag = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "ConsModifNoteAnteChiusuraMag", "0", " ", "0"))) 'Se attiva, permette le operazioni di Inseriment/Modifica/Cancellazione di Note di Prelievo con data anteriore alla data di Chiusura di Magazzino

      bMsgPrezzoZeroFinale = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "MsgPrezzoZeroFinale", "0", " ", "0"))) '(-1/0 <-- default) Se attiva, in presenza dellopzione DisabilitaMsgPrezzoZero settata a 0, avvisa anche a fine documento con un unico messaggio la presenza di eventuali righe con prezzo a 0.

      bFlagRielabFattDiffSuVariazioneDDT = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "FlagRielabFattDiffSuVariazioneDDT", "-1", " ", "-1")) 'Se disattivata (a zero ) quando si salva un DDT fatturato non marca più la fattura differita come 'Da rielaborare' quindi opera come le vecchie versioni di Business.
      lRiportaMisura1DaArtico = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "RiportaMisura1DaArticolo", "0", ".", "0")) 'Compila la Misura 1 con il valore indicato nell'anagrafica articoli
      lRiportaMisura2DaArtico = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "RiportaMisura2DaArticolo", "0", ".", "0")) 'Compila la Misura 2 con il valore indicato nell'anagrafica articoli
      lRiportaMisura3DaArtico = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "RiportaMisura3DaArticolo", "0", ".", "0")) 'Compila la Misura 3 con il valore indicato nell'anagrafica articoli
      '--------------------------------------------------------------------------------------------------------------
      '--- 1.quando acquisisce il primo Impegno o Nota di Prelievo (quando non sono presenti righe nel corpo)
      '--- NON dà il messaggio se il codice esenzione di testata è <> da quello dell'impegno
      '--- e acquisisce dalla testata dell'impegno/nota di prel. il cod. esenzione nella testata del doc. corrente; 
      '--- 2. quando acquisisce dalla seconda testata d'ordine/nota in poi lascia comunque, il controllo
      '--- sulla difformità tra edCodese e td_codese; 
      '--- 3. con opzione attiva sulle righe conservare il cod. iva/esenzione presente sulle righe di ordine/note
      '--- (mo_codiva) 
      bRiportaCodeseInEvasione = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "RiportaCodeseInEvasione", "0", " ", "0"))
      '-----------------------------------------------------------------------------------------

      bGestioneAbbinamentiTaglie = CBool(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "Gestione_Abbinamenti_Taglie", "0", " ", "0"))
      bCancellaRegCG = CBool(oCldBoll.GetSettingBus("BSVEBOLL", "Opzioni", ".", "CancellaRegCG", "0", " ", "0"))
      bSelDichAutomaticamente = CBool(oCldBoll.GetSettingBus("OPZIONI", ".", ".", "Sel_Dichiarazione_Autom", "0", " ", "0"))
      dPercControlloImportoDich = NTSCDec(oCldBoll.GetSettingBus("OPZIONI", ".", ".", "Perc_Controllo_Importo_Dichiarazione", "0", " ", "0"))    '0 = avverto sempre; 80 = avverto dopo l'80% di utilizzo; 100 = avverto solo per sforamento; 999999999 = non avverto mai 

      bSoloSerieInTRKTPBF = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "SoloSerieInTRKTPBF", "0", ".", "0"))

      bConsentiScontiSuOmaggi = CBool(oCldBoll.GetSettingBus("OPZIONI", ".", ".", "ConsentiScontiSuOmaggi", "0", " ", "0"))

      bGnnpCheckFidoInsolu_NoBlocco = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSORGNNP", "OPZIONI", ".", "CheckFidoInsoluti_NoBlocco", "0", ".", "0"))
      bGnbfCheckFidoInsolu_NoBlocco = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEGNBF", "OPZIONI", ".", "CheckFidoInsoluti_NoBlocco", "0", ".", "0"))

      bSpezzaDocArt62Deterior = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "SpezzaDocArt62Deterior", "0", ".", "0"))

      bNoPesiSuRigheKitFittizie = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "Opzioni", ".", "NoPesiSuRigheKitFittizie", "0", " ", "0"))
      'Per promozioni, legge le stesse di BEREGSRE
      strStampaRigaOmaggi = oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSREGSRE", "OPZIONI", ".", "StampaRigaOmaggi", "M", " ", "M")
      lCodivaOmaggi = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSREGSRE", "OPZIONI", ".", "CodiceIvaOmaggi", "0", " ", "0"))
      strPromoNoStornoResi = oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSREGSRE", "OPZIONI", ".", "TipiPromozioniSuiResi", "", ".", "")
      strOmaggiDesel = oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSREGSRE", "OPZIONI", ".", "OmaggiProponiDeselezionati", "A", ".", "A") 'A = Automatico, N = Nessuno, T = Tutti 
      lCausaleScontiPiede = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSREGSRE", "OPZIONI", ".", "CausaleScontiPiede", "0", " ", "0"))
      strTipiRkNoPromozioni = oCldBoll.GetSettingBusDitt(strDittaCorrente, "OPZIONI", ".", ".", "TipiRkNoPromozioni", "TUZHXY", ".", "TUZHXY")

      bSalvaNuovoDocApplicaPromo = CBool(Val(oCldBoll.GetSettingBus("BSVEBOLL", "Opzioni", ".", "SalvaNuovoDocApplicaPromo", "0", " ", "0")))
      '--------------------------------------------------------------------------------------------------------------
      nListinoCalcoloRicaricoMargine = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "ListinoCalcoloRicaricoMargine", "0", ".", "0"))
      If (nListinoCalcoloRicaricoMargine < -2) Or (nListinoCalcoloRicaricoMargine > 9999) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130804005158503185, "Attenzione!" & vbCrLf & _
          "L'opzione di registro:" & vbCrLf & _
          " . 'BSVEBOLL/OPZIONI/ListinoCalcoloRicaricoMargine'" & vbCrLf & _
          "è stata impostata con un valore NON valido (|" & nListinoCalcoloRicaricoMargine.ToString & "|)." & vbCrLf & _
          "Valore consentito compreso fra '-2' e '9999'." & vbCrLf & _
          "L'opzione sarà considerata a '0'.")))
        nListinoCalcoloRicaricoMargine = 0
      End If
      bMargineValoreUnitario = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "MargineValoreUnitario", "0", ".", "0"))

      nRiportaDescrNoteDaCaricoCLAV = NTSCInt(oCldBoll.GetSettingBus("BSVEBOLL", "OPZIONI", ".", "RiportaDescrNoteDaCaricoCLAV", "0", " ", "0"))
      nGiorniMargineScadenzaLotto = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "GiorniMargineControlloScadenzaLotto", "9999", " ", "9999")))
      bNoModificaUbicCambioMaga = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "NoModificaUbicCambioMaga", "0", ".", "0"))
      bValoreStatisticoNoScontoPagamento = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "ValoreStatisticoNoScontoPagamento", "0", ".", "0"))
      '--------------------------------------------------------------------------------------------------------------
      'Imposta tutte le variabili originarie (per opzioni documento)
      strGLOBCalcPesi = strCalcPesi
      strGLOBTestScomin = strTestScomin
      strGLOBTestEsist = strTestEsist
      strGLOBTestEsistArtTc = strTestEsistArtTc
      strGLOBContrFidoInsolinInsDoc = strContrFidoInsolinInsDoc
      strGLOBVisMemList1 = strVisMemList1
      strGLOBVisNoteConto = strVisNoteConto
      strGLOBVisNoteContoApertura = strVisNoteContoApertura
      bGLOBUsaKeyMag = bUsaKeyMag
      bGLOBMantieniMagRigheOrdine = bMantieniMagRigheOrdine
      bGLOBEliminaMessaggioCambioDatiTest = bEliminaMessaggioCambioDatiTest
      strGLOBTestSottoCosto = strTestSottoCosto
      strGLOBTestSottoCostoModifica = strTestSottoCostoModifica
      strGLOBTestSottoCostoQuando = strTestSottoCostoQuando
      strGLOBTestSottoCostoTipo = strTestSottoCostoTipo
      strGLOBTestSottoCostoZero = strTestSottoCostoZero
      dGLOBTestSottoCostoRicaricoMinimo = dTestSottoCostoRicaricoMinimo
      strGLOBCalcolaSpeseTrasp = strCalcolaSpeseTrasp
      bGLOBCalcolaSpeseTraspSoloNuovi = bCalcolaSpeseTraspSoloNuovi
      bGLOBUsaVettore1perCalcoloSpeseTrasp = bUsaVettore1perCalcoloSpeseTrasp
      strGLOBTestEsistQuando = strTestEsistQuando
      strGLOBNoteNuoviDocumenti = strNoteNuoviDocumenti
      bGLOBRiportaNote1CF = bRiportaNote1CF
      bGLOBRiportaNote2CF = bRiportaNote2CF
      bGLOBIgnoraMagTestata1Ordine = bIgnoraMagTestata1Ordine
      bGLOBRiproponiDataDoc = bRiproponiDataDoc
      nGLOBRicalcPrezziOrd = nRicalcPrezziOrd
      nGLOBRicalcPrezziNota = nRicalcPrezziNota
      nGLOBRicalcScontiOrd = nRicalcScontiOrd
      nGLOBRicalcScontiNota = nRicalcScontiNota
      nGLOBRicalcProvvOrd = nRicalcProvvOrd
      nGLOBRicalcProvvNota = nRicalcProvvNota
      bGLOBChiediContoOrdini = bChiediContoOrdini
      nGLOBVisMemNumList = nVisMemNumList
      bGLOBDisabilitaMsgPrezzoZero = bDisabilitaMsgPrezzoZero
      bGLOBDisabilitaMsgQuantZero = bDisabilitaMsgQuantZero
      bGLOBContoNuoviDoc = bContoNuoviDoc
      nGLOBContoNuoviDocQuale = nContoNuoviDocQuale
      bGLOBChiediDestInTestata = bChiediDestInTestata
      bGLOBRilevaDisponibPerCommessa = bRilevaDisponibPerCommessa
      strGLOBTestEsistCome = strTestEsistCome
      bGLOBTestEsistPerComm = bTestEsistPerComm
      bGLOBUsaMagStockArticolo = bUsaMagStockArticolo
      bGLOBIncassoTotalePagContanti = bIncassoTotalePagContanti
      bGLOBFiltroMagazRigheOrdini = bFiltroMagazRigheOrdini
      nGLOBFiltroMagazRigheOrdiniEscludiTipobf = nFiltroMagazRigheOrdiniEscludiTipobf
      bGLOBRiapriDocSuSalva = bRiapriDocSuSalva
      bGLOBDopoStpChiamaStpRegCassa = bDopoStpChiamaStpRegCassa
      bGLOBMovimQtaLotti = bMovimQtaLotti
      bGLOBSalvaCondizioniFinali = bSalvaCondizioniFinali
      nGLOBSalvaCondizioniFinaliClientiDove = nSalvaCondizioniFinaliClientiDove
      nGLOBSalvaCondizioniFinaliFornitoriDove = nSalvaCondizioniFinaliFornitoriDove
      bGLOBModifColliSuQuant = bModifColliSuQuant
      bGLOBEvadendoRiportaSempreDatiTrasp = bEvadendoRiportaSempreDatiTrasp
      bGLOBDisabilitaCheckDateAnteriori = bDisabilitaCheckDateAnteriori
      bGLOBConsentiCreazDocumCliFornBloccoFisso = bConsentiCreazDocumCliFornBloccoFisso
      bGLOBConfermacompilazioneSchedaTrasp = bConfermacompilazioneSchedaTrasp
      bGLOBApriAnalottiDopoNew = bApriAnalottiDopoNew
      nGLOBInibisciTipiArticoliDiversi = nInibisciTipiArticoliDiversi
      strGLOBDataInibisciArticoliDiversi = strDataInibisciArticoliDiversi
      bGLOBArticoliDiversiChiediConferma = bArticoliDiversiChiediConferma
      bGLOBMsgPrezzoZeroFinale = bMsgPrezzoZeroFinale
      bGLOBSpezzaDocArt62Deterior = bSpezzaDocArt62Deterior

      If bDisabilitaCheckLotti And bLottoNew Then
        bDisabilitaCheckLotti = False
        ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 130304635262801630, "ATTENZIONE: in anagrafica ditta è stato impostato di gestire i lotti Alfanumerici. Con questa modalità l'opzione di registro BSVEBOLL/OPZIONI/DisabilitaCheckLotti verrà ignorata")))
      End If

      nDatiniCompMese = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "DatiniCompMese", "0", " ", "0"))) 'se -1, nel campo 'data inizio competenza eeconomica' viene proposto il primo del mese, altrimenti datdoc: serve per chi gestisce i conti a data comp. economica ma vuole fare sempre analisi mensili, senza che pnfa generi molte righe di prinot/priana2

      bControllaRifPartireDocRicevuti = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "ControllaRifPartireDocRicevuti", "0", " ", "0"))
      bGLOBControllaRifPartireDocRicevuti = bControllaRifPartireDocRicevuti
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Function LeggiRegistroDoc(ByVal strTipodoc As String) As Boolean
    Dim nDefaultTipoBf As Integer
    Try
      If Not lLettoRegistro Then
        '---------------------------------
        'leggo le opzioni di registro globali
        LeggiRegistro()
        lLettoRegistro = True
      End If

      CType(oCleComm, CLELBMENU).AccconfGetBlocchi(strDittaCorrente, strTipodoc, dttAccconf)

      '-------------------------
      'solo se attiva l'opzione di registro e se posso evito di rileggere il registro
      If Not bLeggiOpzioniDoc Then Return True
      If strTipodoc = strLastTiporkRegistroDoc Then Return True
      strLastTiporkRegistroDoc = strTipodoc

      '-------------------------
      strCalcPesi = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Calc_pesi_in_doc", "N", strTipodoc, strGLOBCalcPesi)
      strTestScomin = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Test_scorta_min", "N", strTipodoc, strGLOBTestScomin)
      strTestEsist = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "Test_esistenza", "N", strTipodoc, strGLOBTestEsist)
      strTestEsistArtTc = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "TestEsistArticoliTC", "C", strTipodoc, strGLOBTestEsistArtTc) ' C = Colore, T = Taglia
      strContrFidoInsolinInsDoc = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "Contr_fido_insol_doc", "N", strTipodoc, strGLOBContrFidoInsolinInsDoc)
      If strContrFidoInsolinInsDoc = "S" Then bSegnalaCreazDocumCliFornBloccati = False
      strVisMemList1 = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Vis_mem_list1_doc", "N", strTipodoc, strGLOBVisMemList1)
      strVisNoteConto = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Vis_note_conto_in_doc", "N", strTipodoc, strGLOBVisNoteConto)
      strVisNoteContoApertura = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Vis_note_conto_in_apertura", "N", strTipodoc, strGLOBVisNoteContoApertura)
      bUsaKeyMag = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "UsaKeymag", "0", strTipodoc, IIf(bGLOBUsaKeyMag, "-1", "0").ToString)))
      bMantieniMagRigheOrdine = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "MantieniMagazRigheOrdine", "0", strTipodoc, IIf(bGLOBMantieniMagRigheOrdine, "-1", "0").ToString)))
      bEliminaMessaggioCambioDatiTest = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "EliminaMessaggioCambioDatiTest", "0", strTipodoc, IIf(bGLOBEliminaMessaggioCambioDatiTest, "-1", "0").ToString)))  ' NON DOCUMENTARE
      strTestSottoCosto = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCosto", "N", strTipodoc, strGLOBTestSottoCosto))
      strTestSottoCostoModifica = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCostoModifica", "N", strTipodoc, strGLOBTestSottoCostoModifica))
      strTestSottoCostoQuando = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCostoQuando", "A", strTipodoc, strGLOBTestSottoCostoQuando))
      strTestSottoCostoTipo = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCostoTipo", "U", strTipodoc, strGLOBTestSottoCostoTipo))
      strTestSottoCostoZero = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCostoZero", "S", strTipodoc, strGLOBTestSottoCostoZero))
      dTestSottoCostoRicaricoMinimo = NTSCDec(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestSottoCostoRicaricoMinimo", "0", strTipodoc, dGLOBTestSottoCostoRicaricoMinimo.ToString))
      strCalcolaSpeseTrasp = oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "CalcolaSpeseTrasp", "N", strTipodoc, strGLOBCalcolaSpeseTrasp)
      bCalcolaSpeseTraspSoloNuovi = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "CalcolaSpeseTraspSoloNuovi", "0", strTipodoc, IIf(bGLOBCalcolaSpeseTraspSoloNuovi, "-1", "0").ToString))
      bUsaVettore1perCalcoloSpeseTrasp = CBool(IIf(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONIDOC", ".", "UsaVettore1perCalcoloSpeseTrasp", "N", strTipodoc, IIf(bUsaVettore1perCalcoloSpeseTrasp, "S", "N").ToString) = "S", True, False))
      strTestEsistQuando = UCase$(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "Test_esistenza_quando", " ", strTipodoc, strGLOBTestEsistQuando))
      strNoteNuoviDocumenti = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "NoteNuoviDocumenti", "", strTipodoc, strGLOBNoteNuoviDocumenti)
      bRiportaNote1CF = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RiportaNote1CF", "0", strTipodoc, IIf(bGLOBRiportaNote1CF, "-1", "0").ToString)))
      bRiportaNote2CF = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RiportaNote2CF", "0", strTipodoc, IIf(bGLOBRiportaNote2CF, "-1", "0").ToString)))
      bIgnoraMagTestata1Ordine = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "IgnoraMagTestata1Ordine", "0", strTipodoc, IIf(bGLOBIgnoraMagTestata1Ordine, "-1", "0").ToString)))
      bRiproponiDataDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RiproponiDataDoc", "0", strTipodoc, IIf(bGLOBRiproponiDataDoc, "-1", "0").ToString)))
      nRicalcPrezziOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaPrezziOrdini", "0", strTipodoc, nGLOBRicalcPrezziOrd.ToString)))
      nRicalcPrezziNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaPrezziNote", "0", strTipodoc, nGLOBRicalcPrezziNota.ToString)))
      nRicalcScontiOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaScontiOrdini", "0", strTipodoc, nGLOBRicalcScontiOrd.ToString)))
      nRicalcScontiNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaScontiNote", "0", strTipodoc, nGLOBRicalcScontiNota.ToString)))
      nRicalcProvvOrd = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaProvvigioniOrdini", "0", strTipodoc, nGLOBRicalcProvvOrd.ToString)))
      nRicalcProvvNota = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RicalcolaProvvigioniNote", "0", strTipodoc, nGLOBRicalcProvvNota.ToString)))
      bChiediContoOrdini = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "ChiediContoOrdini", "0", strTipodoc, IIf(bGLOBChiediContoOrdini, "-1", "0").ToString)))
      nVisMemNumList = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "VisMemNumList", "1", strTipodoc, nGLOBVisMemNumList.ToString)))
      bDisabilitaMsgPrezzoZero = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "DisabilitaMsgPrezzoZero", "0", strTipodoc, IIf(bGLOBDisabilitaMsgPrezzoZero, "-1", "0").ToString)))
      bDisabilitaMsgQuantZero = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "DisabilitaMsgQuantZero", "0", strTipodoc, IIf(bGLOBDisabilitaMsgQuantZero, "-1", "0").ToString)))
      bContoNuoviDoc = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "ContoNuoviDoc", "0", strTipodoc, IIf(bGLOBContoNuoviDoc, "-1", "0").ToString)))
      nContoNuoviDocQuale = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "ContoNuoviDocQuale", "0", strTipodoc, nGLOBContoNuoviDocQuale.ToString)))
      bChiediDestInTestata = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "ChiediDestInTestata", "0", strTipodoc, IIf(bGLOBChiediDestInTestata, "-1", "0").ToString)))
      bRilevaDisponibPerCommessa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "RilevaDisponibPerCommessa", "0", strTipodoc, IIf(bGLOBRilevaDisponibPerCommessa, "-1", "0").ToString)))
      strTestEsistCome = oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestEsistCome", "E", strTipodoc, strGLOBTestEsistCome)
      bTestEsistPerComm = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TestEsistPerComm", "0", strTipodoc, IIf(bGLOBTestEsistPerComm, "-1", "0").ToString)))
      bUsaMagStockArticolo = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "UsaMagStockArticolo", "0", strTipodoc, IIf(bGLOBUsaMagStockArticolo, "-1", "0").ToString)))
      bIncassoTotalePagContanti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "IncassoTotalePagContanti", "0", strTipodoc, IIf(bGLOBIncassoTotalePagContanti, "-1", "0").ToString)))
      bFiltroMagazRigheOrdini = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "FiltroMagazRigheOrdini", "0", strTipodoc, IIf(bGLOBFiltroMagazRigheOrdini, "-1", "0").ToString)))  ' NON DOCUMENTARE
      nFiltroMagazRigheOrdiniEscludiTipobf = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "FiltroMagazRigheOrdiniEscludiTipobf", "0", strTipodoc, nGLOBFiltroMagazRigheOrdiniEscludiTipobf.ToString)))
      bRiapriDocSuSalva = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "RiapriDocSuSalva", "0", strTipodoc, bGLOBRiapriDocSuSalva.ToString)))
      bDopoStpChiamaStpRegCassa = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "DopoStpChiamaStpRegCassa", "0", strTipodoc, IIf(bGLOBDopoStpChiamaStpRegCassa, "-1", "0").ToString)))
      bSalvaCondizioniFinali = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "SalvaCondizioniFinali", "0", strTipodoc, IIf(bGLOBSalvaCondizioniFinali, "-1", "0").ToString)))
      nSalvaCondizioniFinaliClientiDove = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "SalvaCondFinaliCliDove", "2", strTipodoc, nGLOBSalvaCondizioniFinaliClientiDove.ToString)))
      nSalvaCondizioniFinaliFornitoriDove = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "SalvaCondFinaliForDove", "2", strTipodoc, nGLOBSalvaCondizioniFinaliFornitoriDove.ToString)))
      bEvadendoRiportaSempreDatiTrasp = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "EvadendoRiportaSempreDatiTrasp", "0", strTipodoc, IIf(bGLOBEvadendoRiportaSempreDatiTrasp <> 0, "-1", "0").ToString)))

      '-----------------------------------------------------------------------------------------
      '--- Se impostata l'opzione di registro contenente il tipo bolla fattura
      '--- questa andrà in deroga a quella indicata nelle tabelle di personalizzazione
      '--- vendite/acquisti
      '-----------------------------------------------------------------------------------------
      nPeveTipobf = nGLOBPeveTipobf
      nPeacTipobf = nGLOBPeacTipobf
      nDefaultTipoBf = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "DefaultTipoBf", "0", strTipodoc, "-1")))
      If nDefaultTipoBf <> -1 Then
        If oCldBoll.ValCodiceDb(nDefaultTipoBf.ToString, strDittaCorrente, "TABTPBF", "N") Then
          nPeveTipobf = nDefaultTipoBf
          nPeacTipobf = nDefaultTipoBf
        End If
      End If
      '-----------------------------------------------------------------------------------------
      bMovimQtaLotti = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "MovimQtaLotti", "0", strTipodoc, IIf(bGLOBMovimQtaLotti, "-1", "0").ToString)))  ' NON DOCUMENTARE
      bModifColliSuQuant = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "ModifColliSuQuant", "0", strTipodoc, IIf(bGLOBModifColliSuQuant, "-1", "0").ToString)))
      bDisabilitaCheckDateAnteriori = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "DisabilitaCheckDateAnteriori", "0", strTipodoc, IIf(bGLOBDisabilitaCheckDateAnteriori, "-1", "0").ToString)))
      nTrattaSoloCliFornDellAgente = NTSCInt(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsveboll", "OpzioniDoc", ".", "TrattaSoloCliFornDellAgente", "0", strTipodoc, "0"))) 'impostare l'opzione con cod. agente per far si che vengano visualizzati/utilizzati solo i clienti/forn. associati all'agente impostato (se la cartella \OpzioniDoc è anche dipendente da operatore quetso rappresenta un modo per legare l'operatore al cod. agente)  ' NON DOCUMENTARE
      bConsentiCreazDocumCliFornBloccoFisso = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONIDOC", ".", "ConsentiCreazDocumCliFornBloccoFisso", "0", strTipodoc, IIf(bGLOBConsentiCreazDocumCliFornBloccoFisso, "-1", "0").ToString)))
      bConfermacompilazioneSchedaTrasp = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente,"BSVEBOLL", "OPZIONIDOC", ".", "ConfermacompilazioneSchedaTrasp", "0", strTipodoc, IIf(bGLOBConfermacompilazioneSchedaTrasp, "-1", "0").ToString)))

      bApriAnalottiDopoNew = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OpzioniDoc", ".", "ApriAnalottiDopoNew", "0", strTipodoc, IIf(bGLOBApriAnalottiDopoNew, "-1", "0").ToString))

      nInibisciTipiArticoliDiversi = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "InibisciTipiArticoliDiversi", "0", strTipodoc, nGLOBInibisciTipiArticoliDiversi.ToString))
      strDataInibisciArticoliDiversi = NTSCStr(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "DataInibisciArticoliDiversi", "", strTipodoc, strGLOBDataInibisciArticoliDiversi))
      bArticoliDiversiChiediConferma = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "ArticoliDiversiChiediConferma", "0", strTipodoc, IIf(bGLOBArticoliDiversiChiediConferma = True, "-1", "0").ToString))

      bMsgPrezzoZeroFinale = CBool(Val(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "OpzioniDoc", ".", "MsgPrezzoZeroFinale", "0", strTipodoc, IIf(bGLOBMsgPrezzoZeroFinale, "-1", "0").ToString)))
      bSpezzaDocArt62Deterior = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDoc", ".", "SpezzaDocArt62Deterior", "0", strTipodoc, IIf(bGLOBSpezzaDocArt62Deterior, "-1", "0").ToString))

      bControllaRifPartireDocRicevuti = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONIDOC", ".", "ControllaRifPartireDocRicevuti", "0", strTipodoc, IIf(bGLOBControllaRifPartireDocRicevuti, "-1", "0").ToString))

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overrides Function ResetVar() As Boolean
    Try
      nRegiva = 0
      lNumprot = 0
      strAlfpro = ""
      bCarProdInAvlavp = False
      bInEvasioneDaFattFigurativa = False
      lDeteriorNumDoc = 0

      Return MyBase.ResetVar()
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try

  End Function

  Public Overridable Function OkTestata() As Boolean
    Dim dttTmp As New DataTable
    Try
      '----------------------------
      'inseriti diversi test che in vb6 erano in okTestata
      If NTSCInt(dttET.Rows(0)!et_conto) = 0 Or NTSCInt(dttET.Rows(0)!et_magaz) = 0 Or NTSCInt(dttET.Rows(0)!et_tipobf) = 0 Or NTSCInt(dttET.Rows(0)!et_causale) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 127791222117187500, "Impostare prima il conto cliente/fornitore, il tipo Bolla/fattura, il codice magazzino e la causale contabile")))
        Return False
      ElseIf bNew And NTSCInt(dttET.Rows(0)!et_codese) <> 0 And dttET.Rows(0)!et_scorpo.ToString = "S" Then
        If bDocDaRetail Then
          Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130785661562704909, "Un documento in esenzione non può essere di tipo IVA inclusa (scorporo)." & vbCrLf & _
                                                                                        "Il flag 'scorporo' verrà deselezionato ed eventuali stampe dello scontrino saranno annullate." & vbCrLf & _
                                                                                        "Proseguire con l'operazione?"))
          ThrowRemoteEvent(evnt)
          If evnt.RetValue <> ThMsg.RETVALUE_YES Then Return False
        Else
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523167576927500, "Un documento in esenzione non può essere di tipo IVA inclusa (scorporo). Il flag 'scorporo' verrà deselezionato.")))
        End If
        dttET.Rows(0)!et_scorpo = "N"
      ElseIf NTSCInt(dttET.Rows(0)!et_valuta) <> 0 And NTSCDec(dttET.Rows(0)!et_cambio) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523168912287500, "Il cambio deve essere diverso da 0 quando è indicata la valuta")))
        Return False
      End If

      If dttTabucamTesta.Rows.Count = 0 Then
        oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_causale).ToString, strDittaCorrente, "TABCAUM", "N", "", dttTabucamTesta)
      End If

      If NTSCInt(dttTabucamTesta.Rows(0)!tb_causec) <> 0 And NTSCInt(dttET.Rows(0)!et_magaz2) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666580305468750, "Il magazzino secondario DI TESTATA è obbligatorio quando è stata selezionata una causale che movimenta 2 magazzini.")))
        Return False
      End If

      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'sui carichi di produzione NON il flag scorporo
        If bNew And dttET.Rows(0)!et_scorpo.ToString = "S" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523170610659500, "Impossibile emettere documenti di tipo 'Carico da produzione' di tipo iva compresa (scorporo). Il flag 'scorporo' verrà deselezionato.")))
          dttET.Rows(0)!et_scorpo = "N"
          Return False
        End If
        'sui carichi di produzione interna NON valuta (sui terzisti si)
        If bNew And bTerzista = False And NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523173669033500, "Impossibile emettere documenti di tipo 'Carico da produzione' INTERNI in valuta")))
          Return False
        End If
        If NTSCInt(dttET.Rows(0)!et_magimp) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523170290859500, "Codice magazzino scarico DI TESTATA obbligatorio per gli Scarichi a produzione")))
          Return False
        End If
        If NTSCInt(dttET.Rows(0)!et_causcap) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666578969218750, "Causale magazzino impegni DI TESTATA obbligatoria per i Carichi di produzione.")))
          Return False
        End If
        If NTSCInt(dttTabucamTesta.Rows(0)!tb_causec) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666579537343750, "Impossibile utilizzare causali di magazzino DI TESTATA doppie per i Carichi di produzioni.")))
          Return False
        End If
        If Not bNoMsgCongruenzaMagimp Then
          oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_magimp).ToString, strDittaCorrente, "TABMAGA", "N", "", dttTmp)
          If dttTmp.Rows.Count > 0 Then
            If NTSCInt(dttET.Rows(0)!et_conto) <> NTSCInt(dttTmp.Rows(0)!tb_magconto) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666587255468750, "Il conto indicato in testata DOVREBBE essere uguale al conto associato al Magazzino impegni.")))
              'non bloccante comunque
            End If
          End If
        End If
        If strNetProDB.Trim <> "" And bInNuovoDocSilent = False Then
          'se Business è collegato a Net@Pro i carichi da prod interno dovrebbero avvenire sempre e solo da netpro
          If bNew And bTerzista = False Then
            Dim evnt As New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 129944417667382352, "ATTENZIONE: i carichi da produzione Interni dovrebbero essere importati da Net@Pro. Diversamente è possibile che lo stesso prodotto venga caricato 2 volte. Proseguire?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      Else
        If NTSCInt(dttET.Rows(0)!et_magimp) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666577458906250, "Il codice magazzino impegni DI TESTATA deve essere 0 per questo tipo di documento.")))
          Return False
        End If
        If NTSCInt(dttET.Rows(0)!et_causcap) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666577537812500, "La causale di scarico di produzione DI TESTATA deve essere 0 per questo tipo di documento.")))
          Return False
        End If
      End If    'If cbTipoDoc.SelectedValue = "T" Then

      '-----------------------------------------------------------------------
      'Controllo documenti d'acconto/da fatturare
      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_tipobf).ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
      If dttTmp.Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666588735937500, "Il codice Tipo Bolla/Fattura inserito non è valido.")))
        Return False
      End If

      'Documento di acconto
      If dttTmp.Rows(0)!tb_flacconto.ToString = "S" Then
        If dttET.Rows(0)!et_tipork.ToString <> "A" And dttET.Rows(0)!et_tipork.ToString <> "F" And _
           dttET.Rows(0)!et_tipork.ToString <> "S" And dttET.Rows(0)!et_tipork.ToString <> "L" And _
           Not (dttET.Rows(0)!et_tipork.ToString = "C" And bDocDaRetail) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666589346250000, "Solo documenti 'Fatture immed. emesse', 'Ricevute fisc. emesse', 'Fatt. ric. fisc. emesse' e 'Fatture immed. ricevute' possono utilizzare un Tipo bolla/fattura di acconto.")))
          Return False
        End If
      End If
      'Documento che evade altri doc. di acconto
      If dttTmp.Rows(0)!tb_flacconto.ToString = "E" Then
        If dttET.Rows(0)!et_tipork.ToString <> "A" And dttET.Rows(0)!et_tipork.ToString <> "B" And _
           dttET.Rows(0)!et_tipork.ToString <> "F" And dttET.Rows(0)!et_tipork.ToString <> "S" And _
           dttET.Rows(0)!et_tipork.ToString <> "L" And dttET.Rows(0)!et_tipork.ToString <> "M" And _
           dttET.Rows(0)!et_tipork.ToString <> "W" And Not (dttET.Rows(0)!et_tipork.ToString = "C" And bDocDaRetail) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666589940156250, "Solo documenti 'Fatture immed. emesse', 'D.D.T. emessi', 'Ricevute fisc. emesse', 'Fatt. ric. fisc. emesse', 'Fatture immed. ricevute', 'D.D.T. ricevuti' e 'Note di prelievo' possono utilizzare un Tipo bolla/fattura che evade un documento di acconto.")))
          Return False
        End If
      End If
      'Documenti di acconto NO su conto generico
      If (dttTmp.Rows(0)!tb_flacconto.ToString = "S" Or dttTmp.Rows(0)!tb_flacconto.ToString = "E") And lConclpriv = NTSCInt(dttET.Rows(0)!et_conto) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734886597361839, "Non è possibile emettere documenti di acconto, o che evadono acconti, a clienti privati generici ")))
        Return False
      End If
      'Documenti SEGUE QUALCOSA no su conto generico
      If (dttTmp.Rows(0)!tb_flresocl.ToString = "S" Or dttTmp.Rows(0)!tb_flresocl.ToString = "F") And (lConclpriv = NTSCInt(dttET.Rows(0)!et_conto) Or oCldBoll.IsClientePrivato(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_conto))) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666590868906250, "Non è possibile emettere documenti il cui Tipo bolla/fattura ha indicato 'Segue fattura' o 'Segue fattura ric. fiscale', a clienti privati generici ")))
        Return False
      End If

      '--------------------------------
      ' Tolta perchè troppo restrittiva
      'Documento 'SEGUE FATTURA' o 'SEGUE FATT. RIC. FISCALE'
      'If snaTest!tb_flresocl <> "N" Then
      '  If dttET.Rows(0)!et_tipork.ToString <> "B" And dttET.Rows(0)!et_tipork.ToString <> "F" And dttET.Rows(0)!et_tipork.ToString <> "M" Then
      '    snaTest.Close
      '    MsgBox "Solo documenti 'D.D.T. emessi', 'Ricevute fisc. emesse', e 'D.D.T. ricevuti' possono utilizzare un Tipo bolla/fattura con indicato 'Segue fattura' o 'Segue fatt. ric. fiscale'.", vbExclamation, bsTtlMsg
      '    GoTo RoutineEnd
      '  End If
      'End If

      'Tipo documento 'SEGUE FATT. RIC.FISCALE' solo su B e F
      If dttTmp.Rows(0)!tb_flresocl.ToString = "F" Then
        If dttET.Rows(0)!et_tipork.ToString <> "B" And dttET.Rows(0)!et_tipork.ToString <> "F" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666591854531250, "Solo documenti 'D.D.T. emessi' e 'Ricevute fiscali' possono utilizzare un Tipo bolla/fattura con indicato 'Segue fatt. ric. fiscale'.")))
          Return False
        End If
      End If

      'Tipo b/f segue fattura
      If dttTmp.Rows(0)!tb_flresocl.ToString = "S" Or dttTmp.Rows(0)!tb_flresocl.ToString = "F" Then
        bSegueFatt = True
      Else
        bSegueFatt = False
      End If

      '--------------------------------
      'sui nuovi documenti NON ammette che siano in esenzione e con scorport
      If NTSCInt(dttET.Rows(0)!et_codese) > 0 And dttET.Rows(0)!et_scorpo.ToString = "S" And bNew Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666597868125000, "Un documento in esenzione non può essere di tipo IVA inclusa (scorporo).")))
        Return False
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    Finally
      dttTmp.Clear()
    End Try
  End Function

#Region "NUOVO/APRI/DUPLICA"
  Public Overrides Function NuovoDocumento(ByVal strDitta As String, ByVal strTipoDoc As String, _
                           ByVal nAnno As Integer, ByVal strSerie As String, ByVal lNumdoc As Integer) As Boolean
    Dim i As Integer = 0
    Dim dttTmp As New DataTable
    Try
      If Not CType(oCleComm, CLELBMENU).GPVDiscCheckSerieAbilitata(strDitta, strSerie) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129957197706875667, "La serie '|" & strSerie & "|' non può essere usata in base ai vincoli di Gestione Punti Vendita in Modalità Disconnessa.")))
        Return False
      End If

      '----------------------------------------
      'verifico se esiste già un Documento con le stesse caratteristiche
      If oCldBoll.EsisteDoc(strDitta, strTipoDoc, nAnno, strSerie, lNumdoc, dttTmp) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 127791222099375000, "Esiste già un documento di tipo |'" & DescrTipork(dttTmp.Rows(0)!tm_tipork.ToString) & "'| con le stesse caratteristiche di quello che si desidera creare.")))
        Return False
      End If

      bDocEmesso = IsDocumentoEmesso(strTipoDoc, False)

      LeggiRegistroDoc(strTipoDoc)

      If Not CheckSoloSerieInTRKTPBF(strDitta, strTipoDoc, _
                                     strSerie) Then
        Return False
      End If

      dttTabucamTesta.Clear()

      If bModTCO And bAttivaRecentTCO Then
        nAnnoTCO = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "RECENT", ".", "AnnoTCO", "0", " ", "0"))
        nCodstagTCO = NTSCInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "RECENT", ".", "CodstagTCO", "0", " ", "0"))
      End If

      '----------------------------------------
      MyBase.NuovoDocumento(strDitta, strTipoDoc, nAnno, strSerie, lNumdoc)

      '----------------------------------------
      'lo chiamo solo per settare dtControllaConcorrenzaOggettiDataLock
      DocumentLockAdd("", 0, "", 0, 0, True)

      '----------------------------------------
      'nel datatable c'è ancora il vecchio documento in memoria: lo elimino 
      '(visto chce non l'ho potuto fare nella Salva o nella Ripristina perchè diversamente nella tabella
      'a cui sono collegati i controlli non ci sarebbe stato alcun record e tutti i controlli avrebbero dato il messaggio
      'di valore impostato non corretto)
      dsShared.Tables("TESTAC").AcceptChanges()
      If dttETC.Rows.Count > 1 Then
        For i = 0 To dttETC.Rows.Count - 2
          dttETC.Rows(0).Delete()
        Next
        dsShared.Tables("TESTAC").AcceptChanges()
      End If

      If strPeveDatora = "S" And bNew And dttET.Rows(0)!et_tipork.ToString <> "T" Then
        If bRiproponiDataDoc Then
          dttET.Rows(0)!et_dtiniz = dtDataNewDoc
        Else
          dttET.Rows(0)!et_dtiniz = NTSCDate(DateTime.Now.ToShortDateString)
        End If
        dttET.Rows(0)!et_oriniz = NTSCDec(DateTime.Now.ToString("HH,mm"))
      End If

      If Trim$(strNoteNuoviDocumenti) <> "" Then
        dttET.Rows(0)!et_note = strNoteNuoviDocumenti
      End If
      'If bRiproponiDataDoc Then
      '  dttET.Rows(0)!et_dtcomiva = dtDataNewDoc
      'Else
      dttET.Rows(0)!et_dtcomiva = dttET.Rows(0)!et_datdoc
      'End If

      '----------------------------------------
      'se documento ricevuto cerco di proporre il num di protocollo
      InizProtocollo()

      '----------------------------------------
      'Ora se impostata l'opzione intesta il documento al conto
      If bContoNuoviDoc Then
        If nContoNuoviDocQuale = 0 Then
          'default (intesta con quello di prima)
          If lContoNewDoc > 0 Then
            dttET.Rows(0)!et_conto = lContoNewDoc
          End If
        Else
          'intesta col cliente privato
          If nContoNuoviDocQuale = 1 Then
            If lConclpriv > 0 Then
              dttET.Rows(0)!et_conto = lConclpriv
            End If
          Else
            If Not oCldBoll.ValCodiceDb(nContoNuoviDocQuale.ToString, strDittaCorrente, "ANAGRA", "N") Then
              'Se il conto indicato nel registro non esiste allora si comporta
              'come il default (cioè intesta con quello di prima)
              If lContoNewDoc > 0 Then
                dttET.Rows(0)!et_conto = lContoNewDoc
              End If
            Else
              dttET.Rows(0)!et_conto = nContoNuoviDocQuale
            End If
          End If
        End If
      End If

      Dim strTipoProg As String = ""
      Select Case NTSCStr(dttET.Rows(0)!et_tipork)
        Case "A", "D", "E", "N", "£" : strTipoProg = "A"
        Case "B" : strTipoProg = "B"
        Case "C" : strTipoProg = "C"
        Case "M" : strTipoProg = "M"
        Case "Z" : strTipoProg = "Z"
        Case "L", "K", "J", "(" : strTipoProg = "L"
        Case "W" : strTipoProg = "W"
        Case "T" : strTipoProg = "T"
        Case "U" : strTipoProg = "U"
        Case "F", "I" : strTipoProg = "F"
        Case "S" : strTipoProg = "S"
      End Select
      If NTSCInt(dttET.Rows(0)!et_numdoc) <> LegNuma(strTipoProg, dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_anno)) Then
        bProgrCambiato = True
      Else
        bProgrCambiato = False
      End If

      If bModCCC Then dttETC.Rows(0)!tm_orpromo = (Now.Hour * 100 + Now.Minute) / 100

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function NuovoDocDaImportExport(ByVal strDitta As String, ByVal strTipoDoc As String, _
                           ByVal nAnno As Integer, ByVal strSerie As String, ByVal lNumdoc As Integer, _
                           ByVal bRicalcolaValoriRiga As Boolean) As Boolean
    '---------------------------------
    'questa funzione serve nel seguente caso:
    'tramite import/export ho scritto per i cavoli miei TESTORD e MOVORD, 
    'ora voglio ricalcolare i valori di riga, ricalcolare i totli documento 
    'e risalvare per aggiornare keyord, lotcpro, ecc.

    'ATTENZIONE:DURANTE IL SALVATAGGIO VIENE ESEGUITA LA ROUTINE TESTPRESALVA CHE MANDA DEI MESSAGGI TRAMITE THROWREMOTEEVENT
    'SE CHI CHIAMA E' UNA UI TUTTO OK, SE INVECE E' UN ENTITY O I MESSAGGI NON VERRANNO VISUALIZZATI, OPPURE (MEGLIO)
    'CON LA RIGA 'AddHandler oCleboll.RemoteEvent, AddressOf GestisciEventiEntity' L'ENTITY CHE ISTANZIA beveboll
    'RICEVERA' I MESSAGGI CHE DOVRANNO ESSERE TRADOTTI!!!!!!


    'per poter utilizzare questo comando occorre inserire le seguenti righe di codice da una UI, mentre se da un entity vedi BEORGNOR.InitExt

    '******************* CREAZIONE DELL'ENTYTY *******************
    'Dim strErr As String = ""
    'Dim oTmp As Object = Nothing
    'If CLN__STD.NTSIstanziaDll(oApp.ServerDir, oApp.NetDir, "BNVEBOLL", "BEVEBOLL", oTmp, strErr, False, "", "") = False Then
    '  oApp.MgBoxErr(oApp.Tr(Me, 127791222114531250, "ERRORE in fase di creazione Entity:" & vbCrLf & "|" & strErr & "|"))
    '  Return False
    'End If
    'oCleBoll = CType(oTmp, CLEVEBOLL)
    ''------------------------------------------------
    'bRemoting = Menu.Remoting("BNVEBOLL", strRemoteServer, strRemotePort)
    'AddHandler oCleBoll.RemoteEvent, AddressOf GestisciEventiEntity
    'If oCleBoll.Init(oApp, oScript, oMenu.oCleComm, "", bRemoting, strRemoteServer, strRemotePort) = False Then Return False

    'If Not oCleBoll.InitExt() Then Return False
    'If oCleBoll.bModuloCRM Then
    '  oCleBoll.bIsCRMUser = oMenu.IsCrmUser(DittaCorrente, oCleBoll.bAmm, oCleBoll.strAccvis, oCleBoll.strAccmod, oCleboll.strRegvis, oCleboll.strRegmod)
    'End If

    '******************* CARICO IL DOCUMENTO *******************
    'If Not oCleBoll.NuovoDocDaImportExport(strDitta, strTipoDoc, nAnno, strSerie, lNumdoc, True) Then Return False

    '******************* SALVO IL DOCUMENTO ********************
    'If Not oCleBoll.SalvaDocumento("N") Then Return False         'attenzione, il parametro "N" è fisso!!!!

    Dim ds As New DataSet
    Dim i As Integer = 0
    Dim lNumTmp As Integer = 0
    Dim strTipoProg As String = ""
    Try

      ResetVar()

      '---------------------------
      'leggo il documento (prima legge le opzioni di registro)
      If Not ApriDoc(strDitta, False, strTipoDoc, nAnno, strSerie, lNumdoc, ds) Then Return False
      If ds.Tables("TESTA").Rows.Count = 0 Then Return False

      If Not OkTestata Then Return False

      bNew = True
      bHasChangesET = True
      bNuovoDaImportExport = True

      '---------------------------
      'verifico se devo aggiornare tabnuma al salvataggio
      bProgrCambiato = False
      strTipoProg = strTipoDoc
      Select Case strTipoDoc
        Case "A", "D", "E", "N", "£" : strTipoProg = "A"
        Case "B" : strTipoProg = "B"
        Case "C" : strTipoProg = "C"
        Case "M" : strTipoProg = "M"
        Case "Z" : strTipoProg = "Z"
        Case "L", "K", "J", "(" : strTipoProg = "L"
        Case "W" : strTipoProg = "W"
        Case "T" : strTipoProg = "T"
        Case "U" : strTipoProg = "U"
        Case "F", "I" : strTipoProg = "F"
        Case "S" : strTipoProg = "S"
      End Select
      lNumTmp = LegNuma(strTipoProg, strSerie, nAnno)
      If lNumTmp <> NTSCInt(ds.Tables("TESTA").Rows(0)!et_numdoc) Then bProgrCambiato = True

      '---------------------------
      'se necessario ricalcolo il valore delle righe
      If bRicalcolaValoriRiga Then
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          'ricalcolo i valori di riga degli impegni collegati e delle lavorazioni
          For i = 0 To dttECIMP.Rows.Count - 1
            SettaValoriRiga(dttECIMP.Rows(i))
          Next
        End If
        For i = 0 To dttEC.Rows.Count - 1
          If dttET.Rows(0)!et_tipork.ToString = "T" Then ValorizzaProduzione(dttEC.Rows(i))
          SettaValoriRiga(dttEC.Rows(i))
        Next
      End If
      dsShared.AcceptChanges()    'forse per ogni riga andrebbe fatta la RecordSalva, sia per il corpo che per gli impegni/lavoraz/assris...

      'attenzione: al salvataggio devo prima cancellare le righe di testord/movord vecchie, poi reinserirle
      'altrimenti non saprei come fare per aggiornare i totali!!!!!

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function ApriDoc(ByVal strDitta As String, ByVal bNew As Boolean, ByVal strTipoDoc As String, _
                       ByVal nAnno As Integer, ByVal strSerie As String, ByVal lNumdoc As Integer, _
                       ByRef ds As DataSet) As Boolean
    Dim dReturn As Boolean = False
    Dim bOk As Boolean = False
    Dim strTmp As String = ""
    Dim i As Integer = 0
    Dim bRetail As Boolean = False
    Dim strMsg As String = ""

    Try
      '--------------------------------------------------------------------------------------------------------------
      bCaricamentoDocumentoOrdine = True
      '--------------------------------------------------------------------------------------------------------------
      'If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then

      If lNumdoc <> 0 Then LeggiRegistroDoc(strTipoDoc)

      '--------------------------------------
      'tengo un puntatore al datatable che verrà usato nell'UI, quindi chiedo i dati al DAL
      strDittaCorrente = strDitta


      If Not bDocDaRetail Then
        '--------------------------------------
        'se è un documento fatto con retail esco
        If (bModRET Or bModGPV) And lNumdoc <> 0 Then
          If oCldBoll.IsDocRetail(strDitta, strTipoDoc, nAnno, strSerie, lNumdoc) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523795520642000, "Attenzione!" & vbCrLf & _
                            "Il documento selezionato è stato creato con il programma" & vbCrLf & _
                            "'Gestione Unificata Documenti' o 'Gestione Punto Vendita'." & vbCrLf & _
                            "Non sarà possibile salvare e/o cancellare il documento." & vbCrLf & _
                            "Alcune informazione specifiche del retail non saranno visualizzate")))
            bRetail = True
          End If
        End If
      End If

      '--------------------------------
      'solo all'avvio del programma (ovvero numdoc = 0) memorizzo se in barcode o codarfo c'è qualche cosa
      If lNumdoc = 0 Then
        oCldDocu.CheckBarcodeCodarfo(strDittaCorrente, bTableBarcodeEmpty, bTableCodarfoEmpty)
      End If

      dReturn = oCldBoll.ApriDocumento(strDitta, bNew, strTipoDoc, nAnno, strSerie, lNumdoc, ds, bModTCO, bModPM, nOrdrig)

      '--------------------------------------
      'svuoto il campo note di movcla se non devo gestirlo
      If bTmp501 = False And ds.Tables("MOVCLA").Rows.Count > 0 Then
        For i = 0 To ds.Tables("MOVCLA").Rows.Count - 1
          ds.Tables("MOVCLA").Rows(i)!mc_note = DBNull.Value
        Next
      End If

      '--------------------------------------
      'imposto i valori di default per i nuovi record
      SetDefaultValueTestmag(ds)
      SetDefaultValueMovmag(ds, False)
      SetDefaultValueMovmag(ds, True)
      SetDefaultValueLavcent(ds)
      If bModTCO Then
        SetDefaultValueMovmagTC(ds)
        SetDefaultValueMovmagIMPTC(ds)
      End If
      If bModPM Then SetDefaultValueProesec(ds)
      oCldBoll.SetTableDefaultValueFromDB("MOVCLA", ds)
      oCldBoll.SetTableDefaultValueFromDB("MOVCONA", ds)
      oCldBoll.SetTableDefaultValueFromDB("MOVMATR", ds)
      oCldBoll.SetTableDefaultValueFromDB("SCHETRASP", ds)
      '--------------------------------------------------------------------------------------------------------------
      '--- Se non esite il record in TESTMAGC, riempie il DataSet relativo adesso
      '--------------------------------------------------------------------------------------------------------------
      If (bNew = False) And (strTipoDoc <> "W") Then
        If ds.Tables("TESTMAGC").Rows.Count = 0 Then
          ds.Tables("TESTMAGC").Rows.Add(ds.Tables("TESTMAGC").NewRow)
          With ds.Tables("TESTMAGC").Rows(ds.Tables("TESTMAGC").Rows.Count - 1)
            !codditt = strDittaCorrente
            !tm_tipork = strTipoDoc
            !tm_anno = nAnno
            !tm_serie = strSerie
            !tm_numdoc = lNumdoc
          End With
          i = 1
          For i = 1 To 20
            ds.Tables("TESTMAGC").Rows(ds.Tables("TESTMAGC").Rows.Count - 1)("tm_ccontr_" & i.ToString) = 0
            ds.Tables("TESTMAGC").Rows(ds.Tables("TESTMAGC").Rows.Count - 1)("tm_impcont_" & i.ToString) = 0
            ds.Tables("TESTMAGC").Rows(ds.Tables("TESTMAGC").Rows.Count - 1)("tm_impcontv_" & i.ToString) = 0
          Next
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      'generalizzo i datatable
      If Not CambiaPrefissoCampiDatatable(ds.Tables("TESTMAG"), "TESTMAG", "TESTA", "tm_", "et_") Then Return False
      If Not CambiaPrefissoCampiDatatable(ds.Tables("TESTMAGC"), "TESTMAGC", "TESTAC", "tm_", "tm_") Then Return False
      If Not CambiaPrefissoCampiDatatable(ds.Tables("MOVMAG"), "MOVMAG", "CORPO", "mm_", "ec_") Then Return False
      If Not CambiaPrefissoCampiDatatable(ds.Tables("MOVMAGIMP"), "MOVMAGIMP", "CORPOIMP", "mm_", "ec_") Then Return False
      If bModTCO Then
        If Not CambiaPrefissoCampiDatatable(ds.Tables("MOVMAGTC"), "MOVMAGTC", "CORPOTC", "mm_", "ec_") Then Return False
        If Not CambiaPrefissoCampiDatatable(ds.Tables("MOVMAGIMPTC"), "MOVMAGIMPTC", "CORPOIMPTC", "mm_", "ec_") Then Return False
      End If
      If Not CambiaPrefissoCampiDatatable(ds.Tables("SCHETRASP"), "SCHETRASP", "SCHETRASP", "sct_", "et_") Then Return False

      '--------------------------------------
      'per standardizzare i nomi delle colonne ...
      ds.Tables("TESTA").Columns("et_flbolli").ColumnName = "et_flboll"
      ds.Tables("CORPO").Columns("ec_flstat").ColumnName = "ec_ricimp"
      ds.Tables("CORPOIMP").Columns("ec_flstat").ColumnName = "ec_ricimp"

      '--------------------------------------
      'compilo la descrizione del cli/forn
      If ds.Tables("TESTA").Rows.Count > 0 Then
        lContoCF = NTSCInt(ds.Tables("TESTA").Rows(0)!et_conto)
        bOk = oCldBoll.ValCodiceDb(ds.Tables("TESTA").Rows(0)!et_conto.ToString, strDittaCorrente, "ANAGRACF", "N", strTmp, dttEt_conto)
        If bOk Then
          If dttEt_conto.Rows.Count > 0 Then
            ds.Tables("TESTA").Rows(0)!xx_tipo = dttEt_conto.Rows(0)!an_tipo.ToString
            ds.Tables("TESTA").Rows(0)!xx_conto = dttEt_conto.Rows(0)!an_descr1.ToString & " " & _
                                dttEt_conto.Rows(0)!an_descr2.ToString & vbCrLf & _
                                dttEt_conto.Rows(0)!an_indir.ToString & vbCrLf & _
                                dttEt_conto.Rows(0)!an_cap.ToString & " " & _
                                dttEt_conto.Rows(0)!an_citta.ToString & " (" & _
                                dttEt_conto.Rows(0)!an_prov.ToString & ")   (" & _
                                dttEt_conto.Rows(0)!an_stato.ToString & ")"
            lAgControp = NTSCInt(dttEt_conto.Rows(0)!an_agcontrop)
            nClscan = NTSCInt(dttEt_conto.Rows(0)!an_clascon)
            nClpran = NTSCInt(dttEt_conto.Rows(0)!an_claprov)
            nTabling = NTSCInt(dttEt_conto.Rows(0)!an_codling)
          End If
        End If

        'se cliente privato
        If lContoCF = lConclpriv And NTSCStr(ds.Tables("TESTA").Rows(0)!et_andescr1).Trim <> "" Then
          ds.Tables("TESTA").Rows(0)!xx_conto = ds.Tables("TESTA").Rows(0)!et_andescr1.ToString & " " & _
                                          ds.Tables("TESTA").Rows(0)!et_andescr2.ToString & vbCrLf & _
                                          ds.Tables("TESTA").Rows(0)!et_anindir.ToString & vbCrLf & _
                                          ds.Tables("TESTA").Rows(0)!et_ancap.ToString & " " & _
                                          ds.Tables("TESTA").Rows(0)!et_ancitta.ToString & " (" & _
                                          ds.Tables("TESTA").Rows(0)!et_anprov.ToString & ")"
        End If    'If lContoCF = lConclpriv Then
      End If    'If ds.Tables("TESTA").Rows.Count > 0 Then

      If nInibisciTipiArticoliDiversi = 1 Then
        Dim dttTmp As New DataTable
        If Not ds.Tables("CORPO").Columns.Contains("xxo_art62") Then ds.Tables("CORPO").Columns.Add("xxo_art62")
        If Not ds.Tables("CORPOIMP").Columns.Contains("xxo_art62") Then ds.Tables("CORPOIMP").Columns.Add("xxo_art62")

        'Scorre le righe del documento per aggiungere il tipo articolo
        For i = 0 To ds.Tables("CORPO").Rows.Count - 1
          oCldBoll.ValCodiceDb(NTSCStr(ds.Tables("CORPO").Rows(i)!ec_codart), strDittaCorrente, "ARTICO", "S", , dttTmp)
          If dttTmp.Rows.Count > 0 Then ds.Tables("CORPO").Rows(i)!xxo_art62 = dttTmp.Rows(0)(strNomeCampoArtico)
        Next
        For i = 0 To ds.Tables("CORPOIMP").Rows.Count - 1
          oCldBoll.ValCodiceDb(NTSCStr(ds.Tables("CORPOIMP").Rows(i)!ec_codart), strDittaCorrente, "ARTICO", "S", , dttTmp)
          If dttTmp.Rows.Count > 0 Then ds.Tables("CORPOIMP").Rows(i)!xxo_art62 = dttTmp.Rows(0)(strNomeCampoArtico)
        Next
      End If

      bDocEmesso = IsDocumentoEmesso(strTipoDoc, False)

      bNew = False

      'dtrTmp = ds.Tables("CORPO").Select(Nothing, "ec_riga DESC")

      If dReturn = False Then Return False

      If ApriDocumento(ds) = False Then Return False
      bDocRetail = bRetail

      '------------------------------
      If ds.Tables("TESTA").Rows.Count > 0 And ds.Tables("TESTAC").Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128657033946875000, "La tabella TESTMAGC o TESTPRBC non è allineata con la rispettiva tabella. (TESTMAG / TESTPRB). Procedo ugualmente.")))
        Return False
      End If

      If dttET.Rows.Count > 0 Then
        If Not Accconf_CheckVis() Then Return False

        If strTipoDoc = "T" And bCarichiProdDaAvmg Then
          'memorizzo se il carico da prod è stato fatto da BNDBAVMG/BNDBAVEX
          bCarProdInAvlavp = oCldBoll.CheckInAvlavp(strDittaCorrente, NTSCStr(ds.Tables("TESTA").Rows(0)!et_tipork), _
                                                    NTSCInt(ds.Tables("TESTA").Rows(0)!et_anno), _
                                                    NTSCStr(ds.Tables("TESTA").Rows(0)!et_serie), _
                                                    NTSCInt(ds.Tables("TESTA").Rows(0)!et_numdoc), 0, 0)
        End If

        If NTSCInt(dttET.Rows(0)!et_causale) <> 0 Then
          oCldDocu.ValCodiceDb(dttET.Rows(0)!et_causale.ToString, strDittaCorrente, "TABCAUM", "N", "", dttTabucamTesta)
        End If
      End If

      '------------------------------
      'come la MyBase.ApriDocumento(ds) ma per tabelle specifiche di movmag
      If Not dsShared Is Nothing Then
        RemoveHandler dsShared.Tables("MOVMATR").ColumnChanging, AddressOf BeforeColUpdate_MOVMATR
        RemoveHandler dsShared.Tables("MOVMATR").ColumnChanged, AddressOf AfterColUpdate_MOVMATR

        RemoveHandler dsShared.Tables("MOVCLA").ColumnChanging, AddressOf BeforeColUpdate_MOVCLA
        RemoveHandler dsShared.Tables("MOVCLA").ColumnChanged, AddressOf AfterColUpdate_MOVCLA

        RemoveHandler dsShared.Tables("MOVCONA").ColumnChanging, AddressOf BeforeColUpdate_MOVCONA
        RemoveHandler dsShared.Tables("MOVCONA").ColumnChanged, AddressOf AfterColUpdate_MOVCONA
      End If

      AddHandler dsShared.Tables("MOVMATR").ColumnChanging, AddressOf BeforeColUpdate_MOVMATR
      AddHandler dsShared.Tables("MOVMATR").ColumnChanged, AddressOf AfterColUpdate_MOVMATR
      AddHandler dsShared.Tables("MOVCLA").ColumnChanging, AddressOf BeforeColUpdate_MOVCLA
      AddHandler dsShared.Tables("MOVCLA").ColumnChanged, AddressOf AfterColUpdate_MOVCLA
      AddHandler dsShared.Tables("MOVCONA").ColumnChanging, AddressOf BeforeColUpdate_MOVCONA
      AddHandler dsShared.Tables("MOVCONA").ColumnChanged, AddressOf AfterColUpdate_MOVCONA

      '------------------------------
      If dttET.Rows.Count > 0 Then
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          dtTimeStampDocU = oCldBoll.GetTimeStampTestmag(strDittaCorrente, "U", _
                                   NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), _
                                   NTSCInt(dttET.Rows(0)!et_numdoc))
        End If

        '------------------------------
        'Modificabilità rate scadenze
        If CBool(NTSCInt(dttET.Rows(0)!et_ccambiati) And bsVEBOLLmodifCastScad) Then bModifCastScad = True Else bModifCastScad = False
      End If

      '------------------------------
      'se è la lettura iniziale in form_load non faccio altro ed esco
      If lNumdoc = 0 Then
        ds.AcceptChanges()
        Return True
      End If

      '------------------------------
      If dttET.Rows.Count > 0 Then      'solo se ho trovato un documento ...
        'per compatibilità con VB6
        If NTSCStr(dttET.Rows(0)!et_datapag) = "" Then dttET.Rows(0)!et_datapag = CalcolaDataScadenza(NTSCStr(dttET.Rows(0)!et_tipork), NTSCStr(dttET.Rows(0)!et_datpar), NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)

        'Elimina eventuali multiple evasioni a saldo della stessa riga
        If Not bNew Then
          If Not ApriDocumentoAggUnicaEvasioneSaldo(strTipoDoc, nAnno, strSerie, lNumdoc) Then Return False
          If strTipoDoc = "T" Then
            If Not ApriDocumentoAggUnicaEvasioneSaldo("U", nAnno, strSerie, lNumdoc) Then Return False
          End If
        End If

        '------------------------
        'carico il project management (solo in modifica documento)
        If bModPM Then FileApriCaricaPM()

        '------------------------
        'se serve verifico se qualche altro utente ha il documento aperto
        DocumentLockCheck(dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), 0, strMsg)
        If strMsg.Trim <> "" Then
          If nControllaConcorrenzaOggetti = -1 Then
            'avviso
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                              oApp.Tr(Me, 129176064247451172, "Potrebbe non essere possibile salvare il documento in apertura se " & _
                              "il primo operatore apporterà delle modifiche." & vbCrLf & _
                              "Diversamente se modifichiamo il documento sarà il primo operatore a perdere il lavoro svolto.")))
          End If
          If nControllaConcorrenzaOggetti = 1 Then
            'blocco
            bDocumentLockNoSave = True
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                              oApp.Tr(Me, 129176039613408203, "Non sarà possibile salvare il documento in apertura.")))
          End If
        End If
        '------------------------
        'se serve memorizzo che l'utente ha il doc aperto (solo se non sono bloccato. se sono bloccato non ha senso, visto che alla fine non potrò salvare ...
        If bDocumentLockNoSave = True Then
          'non aggiungo il lock. tanto non potrò salvare il documento ...
        Else
          DocumentLockAdd(dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), 0, True)
        End If

      End If    ' If dttET.Rows.Count > 0 Then          'solo se ho trovato un documento ...
      '--------------------------------------------------------------------------------------------------------------
      '--- In modifica di un documento, prima dell'apertura, effettua ulteriori controlli (prima erano nel BN...)
      '--------------------------------------------------------------------------------------------------------------
      If bInRiapriDopoSalva = False Then TestaBlocchi(bNew)
      '--------------------------------------------------------------------------------------------------------------

      'se c'è il collegamento con NETPRO controllo che il documento non sia in evasione ed eventualmente avviso
      NetProCheckOrdModifCanc(True)

      For Each dtrRow As DataRow In dsShared.Tables("CORPO").Rows
        ColoraCelle(dtrRow)
      Next

      If bNew = False AndAlso bModCCC AndAlso bDocDaRetail = False Then
        If ds.Tables("TESTA").Rows.Count > 0 Then
          'Per ogni contratto presente ricarica le descrizioni e altre informazioni
          If NTSCInt(dttETC.Rows(0)!tm_codtes) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes), "tm_codtes", "xx_codtes")
          If NTSCInt(dttETC.Rows(0)!tm_codtes2) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes2), "tm_codtes2", "xx_codtes2")
          If NTSCInt(dttETC.Rows(0)!tm_codtes3) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes3), "tm_codtes3", "xx_codtes3")
          If NTSCInt(dttETC.Rows(0)!tm_codtes4) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes4), "tm_codtes4", "xx_codtes4")
          If NTSCInt(dttETC.Rows(0)!tm_codtes5) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes5), "tm_codtes5", "xx_codtes5")
          If NTSCInt(dttETC.Rows(0)!tm_codtes6) <> 0 Then ValidaContratto(dttETC.Rows(0), NTSCInt(dttETC.Rows(0)!tm_codtes6), "tm_codtes6", "xx_codtes6")
          CaricaPromozioni()
          ColoraGrigliaPromozioni()
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      AggiungiColonneUnbound(ds)
      '--------------------------------------------------------------------------------------------------------------
      bHasChangesET = False 'imposto che il documento non è cambiato

      ds.AcceptChanges()        'confermo tutto
     
      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    Finally
      bCaricamentoDocumentoOrdine = False
    End Try
  End Function
  Public Overridable Function ApriDocumentoSvuotaRiferimenti(ByRef ds As DataSet, ByVal strTipoDoc As String, ByVal bProformaTmp As Boolean) As Boolean
    'chiamato da duplica documento: svuota i riferimenti
    Dim i As Integer = 0
    Try
      For Each dtrT As DataRow In ds.Tables("CORPO").Rows
        If bProformaTmp = False Then
          dtrT!ec_ortipo = " "
          dtrT!ec_oranno = 0
          dtrT!ec_orserie = " "
          dtrT!ec_ornum = 0
          dtrT!ec_orriga = 0
          dtrT!ec_salcon = "C"
          dtrT!ec_qtadisimp = 0
          dtrT!ec_coldisimp = 0
          dtrT!ec_valdisimp = 0
        Else
          'già fatto prima ...
          'dtrT!ec_ornum = dtrT!ec_commen
          'dtrT!ec_commen = 0
        End If
        dtrT!ec_cltipo = DBNull.Value
        dtrT!ec_clanno = 0
        dtrT!ec_clserie = DBNull.Value
        dtrT!ec_clnum = 0
        dtrT!ec_clriga = 0
        dtrT!ec_nptipo = DBNull.Value
        dtrT!ec_npanno = 0
        dtrT!ec_npserie = DBNull.Value
        dtrT!ec_npnum = 0
        dtrT!ec_npriga = 0
        dtrT!ec_npqtadis = 0
        dtrT!ec_npcoldis = 0
        dtrT!ec_npvaldis = 0
        dtrT!ec_npsalcon = "C"
        dtrT!ec_nprcoleva = 0
        dtrT!ec_nprquaeva = 0
        dtrT!ec_nprflevas = "C"
        dtrT!ec_nprvalore = 0
        dtrT!ec_valdisimpv = 0
        dtrT!ec_npvaldisv = 0
        dtrT!ec_nprvalorev = 0
        dtrT!ec_actipo = DBNull.Value
        dtrT!ec_acanno = 0
        dtrT!ec_acserie = DBNull.Value
        dtrT!ec_acnum = 0
        dtrT!ec_cctipo = DBNull.Value
        dtrT!ec_ccanno = 0
        dtrT!ec_ccserie = DBNull.Value
        dtrT!ec_ccnum = 0
        dtrT!ec_ccriga = 0
        dtrT!ec_pmtaskid = 0
        dtrT!ec_pmsalcon = "C"
        dtrT!ec_pmqtadis = 0
        dtrT!ec_pmvaldis = 0
        dtrT!xxo_pmqtadisda = 0
        dtrT!xxo_pmvaldisda = 0
        dtrT!xxo_pmqtares = 0
        dtrT!xxo_pmvalres = 0
        dtrT!xxo_pmqtarim = 0
        dtrT!xxo_pmvalrim = 0
        dtrT!xxo_darave = ""
        dtrT!xxo_prevgrup = "N"
        dtrT!xxo_gestcost = "1"
        dtrT!ec_cvtipo = DBNull.Value
        dtrT!ec_cvanno = 0
        dtrT!ec_cvserie = DBNull.Value
        dtrT!ec_cvnum = 0
        dtrT!ec_cvriga = 0
      Next

      If bModTCO Then
        For Each dtrT As DataRow In ds.Tables("CORPOTC").Rows
          For z As Integer = 1 To 24
            dtrT("ec_qtadis" & z.ToString("00")) = 0
            dtrT("ec_npqtadis" & z.ToString("00")) = 0
            dtrT("ec_nprquae" & z.ToString("00")) = 0
          Next
        Next
      End If

      With dttET.Rows(0)
        !et_flfatt = "N"
        !et_alffat = " "
        !et_numfat = 0
        !et_datfat = DBNull.Value
        !et_annfat = 0
        !et_tiporkfat = " "
        !et_flcont = "N"
        !et_datregef = DBNull.Value
        !et_numregef = 0
        !et_numprot = 0
        !et_nregiva = 0
        !et_flprov = "N"
        !et_impprov = 0
        !et_totprov = 0
        !et_totprov2 = 0
        !et_datregin = DBNull.Value
        !et_numrgin = 0
        !et_datregom = DBNull.Value
        !et_numregom = 0
        !et_vistato = "N"
        !et_idpick = 0
        !et_flevas = "N"
        !et_ccambiati = 0
        !et_salacceva = "N"
        !et_totacceva = 0
        !et_totaccevav = 0
        !et_salriemrf = "N"
        !et_totriemrf = 0
        !et_totriemrfv = 0
        !et_proforma = "N"
        !et_cup = ""
        !et_cig = ""
        !et_riferimpa = ""
      End With

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ApriDocumentoAggUnicaEvasioneSaldo(ByVal strTipoDoc As String, ByVal nAnno As Integer, _
                                                              ByVal strSerie As String, ByVal lNumdoc As Integer) As Boolean
    '----------------------------------
    'Elimina eventuali multiple evasioni a saldo della stessa riga
    'contiene anche la 'AggUnicaEvasioneSaldoLav'
    Dim dttOrd As New DataTable
    Dim dttNota As New DataTable
    Dim dttLavc As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim dtrOrd() As DataRow = Nothing
    Dim i As Integer = 0
    Dim l As Integer = 0

    Dim dttTabella As DataTable = Nothing

    Try

      'se tipork = 'U' deve lavorare su dttEcimp invece che su dttEc
      If strTipoDoc = "U" Then
        dttTabella = dttECIMP
      Else
        dttTabella = dttEC
      End If

      '----------------------------------
      'elenco delle righe del documento collegate ad IMP / ORD
      If dttTabella.Select("ec_ornum <> 0").Length = 0 And dttEC.Select("ec_npnum <> 0").Length = 0 Then Return True

      '----------------------------------
      'ottengo l'elenco degli mm_salcon diversi da mm_flevas di Imp cli aperti e li correggo come su imp cli aperti
      If Not oCldBoll.ApriDocumentoGetOrdSalcon(strDittaCorrente, strTipoDoc, nAnno, strSerie, lNumdoc, dttOrd, dttNota, dttLavc) Then Return False

      'ORDINE
      '----------------------------------
      'Elimina le evasione a saldo doppie sulla stessa riga di Documento - ORDINE
      dtrOrd = dttTabella.Select("ec_ornum <> 0 AND ec_salcon = 'S'")
      For i = 0 To dtrOrd.Length - 1
        dtrT = dttTabella.Select("ec_ortipo = " & CStrSQL(dtrOrd(i)!ec_ortipo) & _
                            " AND ec_oranno = " & dtrOrd(i)!ec_oranno.ToString & _
                            " AND ec_orserie = " & CStrSQL(dtrOrd(i)!ec_orserie) & _
                            " AND ec_ornum = " & dtrOrd(i)!ec_ornum.ToString & _
                            " AND ec_orriga = " & dtrOrd(i)!ec_orriga.ToString & _
                            " AND ec_salcon = 'S'", "ec_riga DESC")
        For l = 1 To dtrT.Length - 1
          dtrT(l)!ec_salcon = "C"
        Next
      Next

      'NOTA DI PRELIEVO
      If strTipoDoc <> "W" Then
        '----------------------------------
        'Elimina le evasione a saldo doppie sulla stessa riga di Documento - NOTA DI PRELIEVO
        dtrOrd = dttTabella.Select("ec_ornum <> 0 AND ec_npsalcon = 'S'")
        For i = 0 To dtrOrd.Length - 1
          dtrT = dttTabella.Select("ec_nptipo = " & CStrSQL(dtrOrd(i)!ec_nptipo) & _
                              " AND ec_npanno = " & dtrOrd(i)!ec_npanno.ToString & _
                              " AND ec_npserie = " & CStrSQL(dtrOrd(i)!ec_npserie) & _
                              " AND ec_npnum = " & dtrOrd(i)!ec_npnum.ToString & _
                              " AND ec_npriga = " & dtrOrd(i)!ec_npriga.ToString & _
                              " AND ec_npsalcon = 'S'", "ec_riga DESC")
          For l = 1 To dtrT.Length - 1
            dtrT(l)!ec_npsalcon = "C"
          Next
        Next
      End If    'If strTipoDoc <> "W" Then

      '----------------------------------
      'Elimina eventuali multiple evasioni a saldo nelle LAVORAZIONI
      If strTipoDoc = "T" Then
        For i = 0 To dttLavc.Rows.Count - 1
          dtrT = dttLAVCENT.Select("lce_riga = " & NTSCInt(dttLavc.Rows(i)!lce_riga).ToString & _
                                   " AND lce_rigaa = " & NTSCInt(dttLavc.Rows(i)!lce_rigaa).ToString)
          If dtrT.Length > 0 Then dtrT(0)!lce_flevas = NTSCStr(dttLavc.Rows(i)!at_flevas)
        Next

        '----------------------------------
        'Elimina le evasione a saldo doppie sulla stessa riga di Documento - LAVCENT
        dtrOrd = dttLAVCENT.Select("lce_ornum <> 0 AND lce_flevas = 'S'")
        For i = 0 To dtrOrd.Length - 1
          dtrT = dttLAVCENT.Select("lce_ortipo = " & CStrSQL(dtrOrd(i)!lce_ortipo) & _
                              " AND lce_oranno = " & dtrOrd(i)!lce_oranno.ToString & _
                              " AND lce_orserie = " & CStrSQL(dtrOrd(i)!lce_orserie) & _
                              " AND lce_ornum = " & dtrOrd(i)!lce_ornum.ToString & _
                              " AND lce_orriga = " & dtrOrd(i)!lce_orriga.ToString & _
                              " AND lce_orfase = " & dtrOrd(i)!lce_orfase.ToString & _
                              " AND lce_flevas = 'S'", "lce_orriga DESC, lce_orfase")
          For l = 1 To dtrT.Length - 1
            dtrT(l)!lce_flevas = "C"
          Next
        Next
      End If    'If strTipoDoc <> "T" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Sub SetDefaultValueTestmag(ByRef ds As DataSet)
    Try

      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("TESTMAG", ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables("TESTMAG")
        .Columns("codditt").DefaultValue = strDittaCorrente
        .Columns("tm_serie").DefaultValue = " "
        .Columns("tm_datdoc").DefaultValue = DateTime.Now.ToString
        .Columns("tm_datapag").DefaultValue = DateTime.Now.ToString
        .Columns("tm_acuradi").DefaultValue = " "
        .Columns("tm_alfpar").DefaultValue = " "
        .Columns("tm_subcommeca").DefaultValue = " "
        .Columns("tm_ultagg").DefaultValue = IntSetDate("01/01/1900")
        .Columns("tm_opnome").DefaultValue = oApp.User.Nome
        .Columns("tm_codcfam").DefaultValue = " "
        .Columns("tm_flscdb").DefaultValue = "N"
        .Columns("tm_codport").DefaultValue = " "
      End With
      oCldBoll.SetTableDefaultValueFromDB("TESTMAGC", ds)
      With ds.Tables("TESTMAGC")
        .Columns("codditt").DefaultValue = strDittaCorrente
        .Columns("tm_serie").DefaultValue = " "
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub SetDefaultValueMovmag(ByRef ds As DataSet, ByVal bMovmagIMP As Boolean)
    Try
      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("MOVMAG", IIf(bMovmagIMP = False, "MOVMAG", "MOVMAGIMP").ToString(), ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables(IIf(bMovmagIMP = False, "MOVMAG", "MOVMAGIMP").ToString())
        .Columns("codditt").DefaultValue = strDittaCorrente
        .Columns("mm_tipork").DefaultValue = "R"
        .Columns("mm_serie").DefaultValue = " "
        .Columns("mm_codart").DefaultValue = " "
        .Columns("mm_stasino").DefaultValue = "S"
        .Columns("mm_codcfam").DefaultValue = " "
        .Columns("mm_subcommeca").DefaultValue = " "
        .Columns("mm_ultagg").DefaultValue = IntSetDate("01/01/1900")
        .Columns("mm_perqta").DefaultValue = 1
        .Columns("mm_flkit").DefaultValue = " "
        .Columns("mm_matric").DefaultValue = " "
        .Columns("mm_umprz").DefaultValue = " "
        .Columns("mm_ubicaz").DefaultValue = " "
        .Columns("mm_datini").DefaultValue = DateTime.Now.ToShortDateString
        .Columns("mm_datfin").DefaultValue = DateTime.Now.ToShortDateString
        .Columns("mm_ortipo").DefaultValue = " "
        .Columns("mm_orserie").DefaultValue = " "

        .Columns("xxo_pmqtadisda").DefaultValue = 0
        .Columns("xxo_pmvaldisda").DefaultValue = 0
        .Columns("xxo_pmqtares").DefaultValue = 0
        .Columns("xxo_pmvalres").DefaultValue = 0
        .Columns("xxo_pmqtarim").DefaultValue = 0
        .Columns("xxo_pmvalrim").DefaultValue = 0
        .Columns("xxo_pmtaskid").DefaultValue = ""
        .Columns("xxo_darave").DefaultValue = " "
        .Columns("xxo_prevgrup").DefaultValue = ""
        .Columns("xxo_gestcost").DefaultValue = ""
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub SetDefaultValueLavcent(ByRef ds As DataSet)
    Try

      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("LAVCENT", ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables("LAVCENT")
        .Columns("codditt").DefaultValue = strDittaCorrente
        .Columns("xx_tempatte").DefaultValue = 0
        .Columns("xx_tempese").DefaultValue = 0
        .Columns("xx_tempattem").DefaultValue = 0
        .Columns("xx_tempesem").DefaultValue = 0
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub SetDefaultValueMovmagTC(ByRef ds As DataSet)
    Try

      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("MOVMAGTC", ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables("MOVMAGTC")
        .Columns("codditt").DefaultValue = strDittaCorrente
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub SetDefaultValueMovmagIMPTC(ByRef ds As DataSet)
    Try

      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("MOVMAGTC", "MOVMAGIMPTC", ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables("MOVMAGIMPTC")
        .Columns("codditt").DefaultValue = strDittaCorrente
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub SetDefaultValueProesec(ByRef ds As DataSet)
    Try

      '--------------------------------------------------------------
      'imposto i valori di default di movord: con la riga che seguen prendo prima i valori dal database
      oCldBoll.SetTableDefaultValueFromDB("PROESEC", ds)
      'ora imposto i valori di default diversi da quelli impostati nel database
      With ds.Tables("PROESEC")
        .Columns("codditt").DefaultValue = strDittaCorrente
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Function DuplicaDoc(ByVal strNewTipork As String, ByVal nNewAnno As Integer, ByVal strNewSerie As String, _
                                         ByVal lNewNumord As Integer, ByVal lNewConto As Integer, ByVal nNewTipobf As Integer) As Boolean
    'dal documento aperto, ne crea uno duplicato e setta lo stato di quest'ultimo su nuovo
    Dim i As Integer = 0
    Dim l As Integer = 0
    Dim lNumTmp As Integer = 0
    Dim dttTmp As New DataTable
    Dim bRicalcolaPrezziSconti As Boolean = False
    Dim strTiporkOrig As String = dttET.Rows(0)!et_tipork.ToString
    Dim nAnnoOrig As Integer = NTSCInt(dttET.Rows(0)!et_anno)
    Dim strSerieOrig As String = dttET.Rows(0)!et_serie.ToString
    Dim lNumOrig As Integer = NTSCInt(dttET.Rows(0)!et_numdoc)
    Dim dtrTmp() As DataRow = Nothing
    Dim dtrTmp1() As DataRow = Nothing
    Dim strTipoProg As String = ""
    Try

      CType(oCleComm, CLELBMENU).AccconfGetBlocchi(strDittaCorrente, strNewTipork, dttAccconf)

      '-------------------------------
      'test pre-duplica
      If BORDINI Then
        If dttET.Rows(0)!et_tipork.ToString = strNewTipork Then
          'posso continuare
        ElseIf dttET.Rows(0)!et_tipork.ToString = "Q" And (strNewTipork = "R" Or strNewTipork = "O" Or strNewTipork = "#") Then
          'Da 'preventivo' solo 'Impegno cliente', 'Documento fornitore', 'Impegno di commessa'
        ElseIf (dttET.Rows(0)!et_tipork.ToString = "R" Or dttET.Rows(0)!et_tipork.ToString = "#") And (strNewTipork = "O" Or strNewTipork = "H") Then
          'DA 'Impegno cliente' o 'Impegno di commessa' solo 'Documento fornitore', 'Documento di produzione'
        Else
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128573002731562500, _
                        "ATTENZIONE: sono consentite solo le seguenti duplicazioni: " & vbCrLf & _
                        "Nuovo documento dello stesso tipo del documento di origine" & vbCrLf & _
                        "Da 'preventivo' solo 'Impegno cliente', 'Documento fornitore', 'Impegno di commessa'" & vbCrLf & _
                        "DA 'Impegno cliente' o 'Impegno di commessa' solo 'Documento fornitore', 'Documento di produzione'")))
          Return False
        End If
      Else
        '--------------------------------
        'determino se la fattura di origine è di tipo proforma:
        'se lo è quella di destinazine deve essere per forza una fattura e non proforma
        If dttET.Rows(0)!et_tipork.ToString = "A" Then
          If dttET.Rows(0)!et_proforma.ToString = "S" And Not (strNewTipork = "A" Or strNewTipork = "B") Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128655907155000000, "Da una 'Fattura immediata proforma' è possibile generare solo una 'Fattura immediata' o 'DDT emesso'.")))
            Return False
          End If
        End If

        If strNewTipork = "T" Or strNewTipork = "U" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698373662968750, "Non è possibile duplicare documenti di Carico e/o Scarico di produzione.")))
          Return False
        End If
      End If    'If BORDINI Then

      '-------------------------------
      lNewConto = NTSCInt(dttET.Rows(0)!et_conto)
      nNewTipobf = NTSCInt(dttET.Rows(0)!et_tipobf)

      If lNewConto = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128602612713906250, "Indicare un conto cliente/fornitore valido")))
        Return False
      Else
        oCldBoll.ValCodiceDb(lNewConto.ToString, strDittaCorrente, "ANAGRA", "N", "", dttTmp)
        If dttTmp.Rows.Count = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128605156510156250, "Codice conto |" & lNewConto.ToString & "| inesistente")))
          Return False
        Else
          If dttTmp.Rows(0)!an_tipo.ToString = "S" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128602613721562500, "Il conto non può far parte dei sottoconti")))
            Return False
          End If
        End If
      End If

      If nNewTipobf = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128602614980781250, "Il tipo Bolla/Fattura per il nuovo documento deve essere diverso da 0")))
        Return False
      End If

      If lNewNumord <= 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128602615352968750, "Il numero per il nuovo documento deve essere maggiore di 0")))
        Return False
      End If

      '-------------------------------
      'verifico se il nuovo documento da creare esiste già
      If oCldBoll.EsisteDoc(strDittaCorrente, strNewTipork, nNewAnno, strNewSerie, lNewNumord, dttTmp) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128602616075000000, "Esiste già un documento di tipo |'" & DescrTipork(dttTmp.Rows(0)!tm_tipork.ToString) & "'| con le stesse caratteristiche di quello che si desidera creare.")))
        Return False
      End If

      '-------------------------------
      'DUPLICO
      bNew = True
      bHasChangesET = True
      bInDuplicadoc = True
      strInDuplicadocTiporkOrig = strTiporkOrig

      'rimuovo il blocco impostato in apertura documento
      DocumentLockRemove()

      '-------------------------------
      'svuoto movcla
      dttMOVCLA.Clear()

      'cambio gli estremi del documento e devo svuotare il flag di evasione e prenotazione 
      '(come se il documento no fosse mai stato evaso)
      CambiaNumdoc(dsShared, strNewTipork, lNewNumord, strNewSerie, nNewAnno, False)
      bDocEmesso = IsDocumentoEmesso(strNewTipork, False)

      If strTiporkOrig = "T" And strNewTipork <> "T" Then
        dttET.Rows(0)!et_causcap = 0
        dttET.Rows(0)!et_magimp = 0
        If dttECIMPTC IsNot Nothing Then dttECIMPTC.Clear()
        dttECIMP.Clear()
      End If


      If NTSCStr(dttETC.Rows(0)!tm_retail) = "S" Then
        ThrowRemoteEvent(New NTSEventArgs(ThMsg.MSG_INFO, oApp.Tr(Me, 129956236048163626, "Attenzione! Si sta duplicando un documento creato da Gestione Punti Vendita." & vbCrLf & _
                                                                                          "Verranno eliminati dal documento eventuali promozioni, data e ora stampa scontrin, il secondo codice pagamento (con anche il resto) e le informazioni sul negozio che ha creato il documento.")))
        dttETC.Rows(0)!tm_retail = "N"
        dttETC.Rows(0)!tm_progchiu = 0
        dttETC.Rows(0)!tm_datsco = New Date(1900, 1, 1)
        dttETC.Rows(0)!tm_orasco = 0
        dttETC.Rows(0)!tm_codrepc = " "
        dttETC.Rows(0)!tm_datpromo = DBNull.Value
        dttETC.Rows(0)!tm_orpromo = 0
        dttETC.Rows(0)!tm_codtes = 0
        dttETC.Rows(0)!tm_pagato2v = 0
        dttETC.Rows(0)!tm_pagato2cambio = 0
        dttETC.Rows(0)!tm_pagato2valu = 0
        dttETC.Rows(0)!tm_codstab = 0
        dttETC.Rows(0)!tm_numsco = 0

        dttET.Rows(0)!et_resto = 0
        dttET.Rows(0)!et_codpaga2 = 0
        dttET.Rows(0)!et_pagato2 = 0
        dttET.Rows(0)!et_datapag2 = DBNull.Value

        For i = 0 To dttEC.Rows.Count - 1
          With dttEC.Rows(i)
            !ec_scontp = 0
            !ec_scontv = 0
            !ec_codrepr1 = 0
            !ec_codrepr2 = 0
            !ec_codrepr3 = 0
            !ec_codrepr4 = 0
            !ec_codrepr5 = 0
            !ec_codrepr6 = 0
            !ec_codrepc = " "
          End With
        Next
      End If

      '-------------------------------
      'tolgo i rifereimenti a ordini/impegni/note prelievo, ...
      ApriDocumentoSvuotaRiferimenti(dsShared, strNewTipork, CBool(IIf(dttET.Rows(0)!et_proforma.ToString = "S", True, False)))
      dsShared.AcceptChanges()

      '---------------------------
      'verifico se devo aggiornare tabnuma al salvataggio
      bProgrCambiato = False
      strTipoProg = strNewTipork
      Select Case strNewTipork
        Case "A", "D", "E", "N", "£" : strTipoProg = "A"
        Case "B" : strTipoProg = "B"
        Case "C" : strTipoProg = "C"
        Case "M" : strTipoProg = "M"
        Case "Z" : strTipoProg = "Z"
        Case "L", "K", "J", "(" : strTipoProg = "L"
        Case "W" : strTipoProg = "W"
        Case "T" : strTipoProg = "T"
        Case "U" : strTipoProg = "U"
        Case "F", "I" : strTipoProg = "F"
        Case "S" : strTipoProg = "S"
      End Select
      If lNewNumord <> LegNuma(strTipoProg, strNewSerie, nNewAnno) Then
        bProgrCambiato = True
      Else
        bProgrCambiato = False
      End If

      bDocRetail = False

      '---------------------------
      'se documento ricevuto verifico se devo aggiornare il protocollo
      dttET.Rows(0)!et_nregiva = 0
      dttET.Rows(0)!et_numprot = 0
      dttET.Rows(0)!et_alfpro = ""
      InizProtocollo()

      '---------------------------
      'Se impostata l'opzione di registro relativa, duplica anche i records di ALLOLE di tipo file (se esistenti)
      If bDuplicaAllole = True Then
        If Not oCldBoll.DuplicaDocAllole(strDittaCorrente, strTiporkOrig, nAnnoOrig, strSerieOrig, lNumOrig, strNewTipork, nNewAnno, strNewSerie, lNewNumord) Then
          oCldBoll.DeleteDocAllole(strDittaCorrente, strNewTipork, nNewAnno, strNewSerie, lNewNumord, BORDINI, Nothing)
          Return False
        End If
      End If    'If bDuplicaAllole = True Then

      bInDuplicadoc = False
      strInDuplicadocTiporkOrig = ""

      dsShared.AcceptChanges()    'forse per ogni riga andrebbe fatta la RecordSalva, sia per il corpo che per gli impegni/lavoraz/assris...

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      bInDuplicadoc = False
      strInDuplicadocTiporkOrig = ""
    End Try
  End Function
#End Region

#Region "BEFORE/AFTER UPDATE"
  Public Overrides Function BeforeColUpdate_TESTA_et_datdoc(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim evnt As NTSEventArgs = Nothing
    Try
      If Not MyBase.BeforeColUpdate_TESTA_et_datdoc(sender, e) Then Return False

      '--------------------------------------------------------------------------------------------------------------
      '--- Se si tratta di una Nota di Prelievo ed è attiva l'opzione di registro che ne consente l'operazione di
      '--- Inserimento/Modifica/Cancellazione, salta il test/blocco/messaggio relativi
      '--------------------------------------------------------------------------------------------------------------
      If (dttET.Rows(0)!et_tipork.ToString = "W") And (bConsModifNoteAnteChiusuraMag = True) Then GoTo SaltaBlocco
      '--------------------------------------------------------------------------------------------------------------
      If bNew And NTSCDate(e.ProposedValue) <= dtUlap Then
        e.ProposedValue = e.Row!et_datdoc
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661944549843750, "La data del nuovo documento deve essere successiva alla data ultimo aggiornamento progressivi di magazzino.")))
        Return False
      End If

SaltaBlocco:

      '---------------------------
      'propongo il cambio della data competenza IVA
      If NTSCDate(e.ProposedValue).ToShortDateString <> NTSCDate(e.Row!et_dtcomiva).ToShortDateString Then
        If NTSCDate(e.Row!et_dtcomiva) = ntscdate(intsetdate("01/01/1900")) Then
          e.Row!et_dtcomiva = e.ProposedValue
        Else
          If dttET.Rows(0)!et_tipork.ToString <> "B" And _
           dttET.Rows(0)!et_tipork.ToString <> "M" And dttET.Rows(0)!et_tipork.ToString <> "T" And _
           dttET.Rows(0)!et_tipork.ToString <> "W" And dttET.Rows(0)!et_tipork.ToString <> "Z" Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128661946337343750, "Utilizzare la data |" & NTSCDate(e.ProposedValue).ToShortDateString & "| anche come data di competenza IVA?"))
            If bInNuovoDocSilent Or bDatIvaComeDatdoc Then
              evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES
            Else
              ThrowRemoteEvent(evnt)
            End If
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
              e.Row!et_dtcomiva = e.ProposedValue
            Else
              If Not IsDate(e.Row!et_dtcomiva) Then e.Row!et_dtcomiva = e.ProposedValue
            End If
          Else
            e.Row!et_dtcomiva = e.ProposedValue
          End If
        End If
      End If

      'sui documenti in modifica (o documenti duplicati)
      'se cambio la data documento dopo aver modificato le scadenze, annulle le modifiche sulle scadenze e le ricalcolo
      'non ha senso mantenere scadenze a mano del 2010 se il documento del 2010 è stato duplicato in uno del 2011
      If bModifCastScad Then
        ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 129563224214521484, _
                        "ATTENZIONE: nel documento erano state forzate manualmente le date di scadenza." & vbCrLf & _
                        "Modificando la data del documento verranno ricalcolate le scadenze")))
        If CBool(NTSCInt(dttET.Rows(0)!et_ccambiati) And bsVEBOLLmodifCastScad) Then dttET.Rows(0)!et_ccambiati = NTSCInt(dttET.Rows(0)!et_ccambiati) - bsVEBOLLmodifCastScad
        bModifCastScad = False
        CalcolaScadenzeStandard(False)
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overrides Function BeforeColUpdate_TESTA_et_conto(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim dttTmp As New DataTable
    Dim strStato As String = ""
    Try
      If Not MyBase.BeforeColUpdate_TESTA_et_conto(sender, e) Then Return False

      '-----------------------
      'al cambio del conto azzero i dati del cliente privato
      e.Row!et_andescr1 = ""
      e.Row!et_andescr2 = ""
      e.Row!et_anindir = ""
      e.Row!et_ancitta = ""
      e.Row!et_ancap = ""
      e.Row!et_anprov = ""
      e.Row!et_ancodfis = ""

      If dttEt_conto.Rows.Count > 0 Then
        e.Row!et_codntra = dttEt_conto.Rows(0)!an_codntra
        e.Row!et_intrarettif = "N"
        e.Row!et_paepag = " "
        If NTSCInt(dttEt_conto.Rows(0)!an_codntra) <> 0 Then
          'imposto se intra cessioni o acquisti, in base al tipo documento
          Select Case dttET.Rows(0)!et_tipork.ToString
            Case "A", "B", "C", "N", "E", "S", "W"
              e.Row!et_intra = "C"
              If (dttET.Rows(0)!et_tipork.ToString = "N") And (CLN__STD.FRIENDLY = False) Then
                e.Row!et_intrarettif = "S" 'nota di accredito = rettifica
              End If
            Case "M", "L", "J", "T"
              e.Row!et_intra = "A"
              If (dttET.Rows(0)!et_tipork.ToString = "J") And (CLN__STD.FRIENDLY = False) Then
                e.Row!et_intrarettif = "S" 'nota di accredito = rettifica
              End If
            Case Else
              e.Row!et_intra = "N"
          End Select
          If CLN__STD.FRIENDLY = False Then e.Row!et_coderog = "I" 'per default I, eventualmente gestito a mano ...
        Else
          e.Row!et_intra = "N"
        End If    ' If NTSCInt(dttEt_conto.Rows(0)!an_codntra) <> 0 Then

        'per i servizi cerco di proporre il paese di pagamento
        'è il paese dove etnrano i soldi, per cui per i servizi resi è fisso IT, mentre per i ricevuti è il paese esterno
        strStato = NTSCStr(dttEt_conto.Rows(0)!an_stato).Trim
        e.Row!et_paepag = NTSCStr(dttEt_conto.Rows(0)!an_paepag).PadRight(2).Substring(0, 2)
        If NTSCStr(e.Row!et_paepag).Trim = "" Then
          If NTSCStr(e.Row!et_intra) = "C" Then
            e.Row!et_paepag = "IT"
          Else
            oCldBoll.ValCodiceDb(strStato, strDittaCorrente, "TABSTAT", "S", "", dttTmp)
            If dttTmp.Rows.Count > 0 Then
              If (NTSCStr(dttTmp.Rows(0)!tb_siglaiso).Trim <> "") And (CLN__STD.FRIENDLY = False) Then
                e.Row!et_paepag = Microsoft.VisualBasic.Left(NTSCStr(dttTmp.Rows(0)!tb_siglaiso).Trim, 2)
              End If
            End If
          End If
        End If
      End If    'If dttEt_conto.Rows.Count > 0 Then
      '--------------------------------------------------------------------------------------------------------------
      If (NTSCInt(e.Row!et_conto) <> 0 And NTSCInt(e.ProposedValue) <> 0) And _
         (NTSCInt(e.Row!et_conto) <> NTSCInt(e.ProposedValue)) Then
        oCldBoll.ValCodiceDb(NTSCStr(e.ProposedValue), strDittaCorrente, "ANAGRA", "N", "", dttTmp)
        Select Case NTSCStr(dttTmp.Rows(0)!an_gescon).ToUpper
          Case "S"
            If dsShared.Tables("CORPO").Rows.Count > 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130377266123816846, "Attezione!" & vbCrLf & _
                "Il nuovo conto indicato prevede una gestione del CONAI, mentre quello indicato no." & vbCrLf & _
                "Per le righe già esistenti, al salvataggio del documento, non sarà creato il dettaglio CONAI relativo.")))
            End If
          Case Else
            dsShared.Tables("MOVCONA").Clear()
            dsShared.Tables("MOVCONA").Dispose()
            dsShared.Tables("MOVCONA").AcceptChanges()
        End Select

        'avviso che eventuali evasioni di oridni collegati al precedente cliente/fornitore verranno mantenuti
        If bInDuplicadoc = False And bEliminaMessaggioCambioDatiTest = False And _
           dttEC.Select("ec_ornum <> 0 OR ec_npnum <> 0").Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 130433158995489140, "Attenzione!" & vbCrLf & _
                "Il documento contiene dei riferimenti di evasione di ordini e/o note di prelievo collegate al vecchio cliente/fornitore." & vbCrLf & _
                "Tali riferimenti verranno mantenuti!")))
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_causale(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim i As Integer = 0
    Dim strDarave As String = ""
    Dim strDaraveR As String = ""
    Try
      If NTSCInt(e.ProposedValue) = 0 Then
        e.Row!et_magaz2 = 0
        e.Row!xx_causale = ""
        Return True
      End If
      If ValCodice(e, "CAUM", "xx_causale", oApp.Tr(Me, 128661422337500000, "Codice CAUSALE DI MAGAZZINO |" & NTSCInt(e.ProposedValue).ToString & "| non corretto"), "N", dttTabucamTesta) Then
        If NTSCInt(dttTabucamTesta.Rows(0)!tb_causec) = 0 Then
          e.Row!et_magaz2 = 0
        End If

        '--------------------------------
        If Not Accconf_CheckBeforecolupdate("CA", NTSCInt(e.ProposedValue)) Then
          e.ProposedValue = 0
          Return False
        End If

        Select Case dttTabucamTesta.Rows(0)!tb_testci.ToString
          Case " " : strDarave = " "
          Case "A", "B" : strDarave = "A"
          Case "D", "E" : strDarave = "D"
        End Select
        If NTSCInt(e.ProposedValue) > 0 And dttEC.Rows.Count > 0 And bInDuplicadoc = False Then
          Dim msg As New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128734886791183839, "Modificare la causale di magazzino su tutte le righe di questo documento?"))
          ThrowRemoteEvent(msg)
          If msg.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
            For i = 0 To dttEC.Rows.Count - 1
              'se c'è il project mamagement devo cambiare la causale solo se il taskid è= 0 o se tb_flci è uguale a quello della causale della riga 
              If bModPM Then
                Select Case dttEC.Rows(i)!xxo_testci.ToString
                  Case " " : strDaraveR = " "
                  Case "A", "B" : strDaraveR = "A"
                  Case "D", "E" : strDaraveR = "D"
                End Select
                If Not (strDarave = strDaraveR Or NTSCInt(dttEC.Rows(i)!ec_pmtaskid) = 0) Then GoTo passa
              End If
              dttEC.Rows(i)!ec_causale = NTSCInt(e.ProposedValue)
              If NTSCInt(dttTabucamTesta.Rows(0)!tb_causec) = 0 Then
                dttEC.Rows(i)!ec_causale2 = 0
                dttEC.Rows(i)!ec_magaz2 = 0
              Else
                dttEC.Rows(i)!ec_causale2 = NTSCInt(dttTabucamTesta.Rows(0)!tb_causec)
              End If
PASSA:
            Next
          End If
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_causcap(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim dttTmp As New DataTable
    Dim i As Integer = 0
    Try
      If dttET.Rows(0)!et_tipork.ToString <> "T" And NTSCInt(e.ProposedValue) <> 0 Then
        e.ProposedValue = 0
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128662072983750000, "La causale per gli scarichi a produzione deve essere compilata solo nei documenti di tipo 'Carico a produzione'")))
      End If

      If ValCodice(e, "CAUM", "xx_causcap", oApp.Tr(Me, 128661422066562500, "Codice CAUSALE DI SCARICO A PRODUZIONE |" & NTSCInt(e.ProposedValue).ToString & "| non corretto"), "N", dttTmp) Then

        '--------------------------------
        If Not Accconf_CheckBeforecolupdate("CS", NTSCInt(e.ProposedValue)) Then
          e.ProposedValue = 0
          Return False
        End If

        If NTSCInt(e.ProposedValue) > 0 And dttEC.Rows.Count > 0 Then
          Dim msg As New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128662068991718750, "Modificare la causale di magazzino (scarico a produzione) su tutte le righe di questo documento?"))
          ThrowRemoteEvent(msg)
          If msg.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
            For i = 0 To dttECIMP.Rows.Count - 1
              dttECIMP.Rows(i)!ec_causale = NTSCInt(e.ProposedValue)
            Next
          End If
        End If
      End If
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_nregiva(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim strSerieProt As String = ""
    Try
      If bNew Then
        strSerieProt = NTSCStr(dttET.Rows(0)!et_alfpro)
        If strSerieProt = "" Then strSerieProt = " "

        'Rileva il numero di protocollo
        If NTSCInt(e.ProposedValue) > 0 Then
          e.Row!et_numprot = oCldBoll.LegNuma(strDittaCorrente, "P", "A" & strSerieProt & NTSCInt(e.ProposedValue).ToString("000"), NTSCInt(dttET.Rows(0)!et_anno), True)
        Else
          e.Row!et_numprot = 0
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_alfpro(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim strSerieProt As String = ""
    Dim strTmp As String = ""
    Try
      strTmp = TestSerieMaxLen(NTSCStr(e.ProposedValue), False)
      If strTmp <> NTSCStr(e.ProposedValue) Then e.ProposedValue = strTmp

      If bNew Then
        strSerieProt = NTSCStr(e.ProposedValue)
        If strSerieProt = "" Then strSerieProt = " "
        'Rileva il n. di protocollo
        lNumprot = oCldBoll.LegNuma(strDittaCorrente, "P", "A" & strSerieProt & NTSCInt(dttET.Rows(0)!et_nregiva).ToString("000"), NTSCInt(dttET.Rows(0)!et_anno), True)

        strAlfpro = strSerieProt
        dttET.Rows(0)!et_numprot = lNumprot
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_codntra(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      ValCodice(e, "NTRA", "xx_codntra", oApp.Tr(Me, 128661399066562500, "Codice NATURA TRANSAZIONE |" & NTSCInt(e.ProposedValue).ToString & "| non corretto"))
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_codport(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      ValCodice(e, "MPOR", "xx_codport", oApp.Tr(Me, 128661399652812500, "Codice TRASPORTO INTRASTAT '|" & e.ProposedValue.ToString & "|' non corretto"), "S")
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_codrsta(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      ValCodice(e, "RSTA", "xx_codrsta", oApp.Tr(Me, 128661400446718750, "Codice REGIME STATISTICO |" & NTSCInt(e.ProposedValue).ToString & "| non corretto"))
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_coderog(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If NTSCStr(e.ProposedValue) <> NTSCStr(e.ProposedValue).ToUpper Then e.ProposedValue = e.ProposedValue.ToString.ToUpper
      ValCodice(e, "EROG", "xx_coderog", oApp.Tr(Me, 129457984765928359, "Codice MODALITA' DI EROGAZIONE |'" & NTSCStr(e.ProposedValue) & "'| non corretto"), "S")
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_codmodi(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If NTSCStr(e.ProposedValue) <> NTSCStr(e.ProposedValue).ToUpper Then e.ProposedValue = e.ProposedValue.ToString.ToUpper
      ValCodice(e, "MODI", "xx_codmodi", oApp.Tr(Me, 129457985473838515, "Codice MODALITA' DI INCASSO |'" & NTSCStr(e.ProposedValue) & "'| non corretto"), "S")
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_alfpar(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim strTmp As String = ""
    Try
      strTmp = TestSerieMaxLen(NTSCStr(e.ProposedValue), False)
      If strTmp <> NTSCStr(e.ProposedValue) Then e.ProposedValue = strTmp

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTA_et_alffat(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim strTmp As String = ""
    Try
      strTmp = TestSerieMaxLen(NTSCStr(e.ProposedValue), False)
      If strTmp <> NTSCStr(e.ProposedValue) Then e.ProposedValue = strTmp

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public Overrides Function AfterColUpdate_TESTA_et_speinc(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If NTSCDec(e.ProposedValue) <> 0 And e.Row!et_flspinc.ToString <> "S" Then
        e.Row!et_speincv = 0
        e.ProposedValue = 0
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128665680036250000, "Le spese incasso devono essere a 0 quando è disattivata l'opzione di addebito delle spese incasso.")))
      End If
      Return MyBase.AfterColUpdate_TESTA_et_speinc(sender, e)

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function AfterColUpdate_TESTA_et_flscdb(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      CalcolaTotali()
      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function AfterColUpdate_TESTA_et_proforma(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If e.ProposedValue.ToString = "S" Then
        If Not CheckCausaleProforma() Then
          e.Row!et_causale = 0
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Function AfterColUpdate_TESTA_et_causale(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try

      If Not CheckCausaleProforma() Then e.Row!et_proforma = "N"

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overrides Function AfterColUpdate_TESTA_et_cambio(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim i As Integer = 0
    Try
      If Not MyBase.AfterColUpdate_TESTA_et_cambio(sender, e) Then Return False

      '---------------------------------------------
      'Ricalcola TTMOVCONA, se serve
      If dttEt_conto.Rows.Count > 0 Then
        If bConai And dttEt_conto.Rows(0)!an_gescon.ToString <> "N" And bDocEmesso And dttET.Rows(0)!et_tipork.ToString <> "W" And dttET.Rows(0)!et_scorpo.ToString = "N" Then
          For i = 0 To dttMOVCONA.Rows.Count - 1
            dttMOVCONA.Rows(i)!mma_prezval = oCldDocu.ConvImpEur(True, NTSCDec(dttMOVCONA.Rows(i)!mma_prezzo), _
                                                      NTSCInt(dttET.Rows(0)!et_valuta), NTSCDate(dttET.Rows(0)!et_datdoc), _
                                                      NTSCDec(dttET.Rows(0)!et_cambio))
          Next
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overrides Function AfterColUpdate_TESTA_et_pagato(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim dttTmp As New DataTable
    Try

      If bIncassoTotalePagContanti = True And bDocEmesso And bNew And Not bDocDaRetail Then
        'Rileva il tipo pagamanto impostato
        If VerificaCodicePagamentoContanti(NTSCInt(dttET.Rows(0)!et_codpaga)) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128665633247812500, "Attenzione! il campo incassato, per i pagamenti di tipo 'Contanti', viene calcolato automaticamente pertanto le modifiche apportate manualmente andranno perse.")))
        End If
      End If

      Return MyBase.AfterColUpdate_TESTA_et_pagato(sender, e)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overrides Function AfterColUpdate_TESTA_et_codpaga(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim dttTmp As New DataTable
    Try
      If bIncassoTotalePagContanti AndAlso NTSCInt(e.ProposedValue) <> 0 Then
        If Not VerificaCodicePagamentoContanti(NTSCInt(e.ProposedValue)) Then dttET.Rows(0)!et_pagato = 0
      End If

      If Not MyBase.AfterColUpdate_TESTA_et_codpaga(sender, e) Then Return False

      'se ho il modulo intra cerco di proporre la modalità di incasso per servizi
      If CBool(ModuliDittaDitt(strDittaCorrente) And bsModIC) And NTSCInt(e.ProposedValue) <> 0 Then
        oCldBoll.ValCodiceDb(e.ProposedValue.ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
        If dttTmp.Rows.Count > 0 Then e.Row!et_codmodi = NTSCStr(dttTmp.Rows(0)!tb_codmodi)
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    Finally
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes", "xx_codtes")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes2(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes2", "xx_codtes2")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes3(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes3", "xx_codtes3")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes4(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes4", "xx_codtes4")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes5(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes5", "xx_codtes5")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_codtes6(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      e.ProposedValue = ValidaContratto(e.Row, NTSCInt(e.ProposedValue), "tm_codtes6", "xx_codtes6")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function BeforeColUpdate_TESTAC_tm_datpromo(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If Not bModCCC Then Return True
      If dttEC.Rows.Count = 0 Then Return True

      Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130597599410480073, "Il cambio della data promozione comporterà il caricamento dei contratti validi a quella data" & _
                                                                                    " e l'annullamento delle promozioni precedentemente applicate." & vbCrLf & _
                                                                                    "Procedere con il cambio di data?"))
      ThrowRemoteEvent(evnt)
      If evnt.RetValue = ThMsg.RETVALUE_YES Then Return True

      e.ProposedValue = e.Row!tm_datpromo
      bNoCambioDataContratto = True

      Return True
    Catch ex As Exception
      '-------------------------------------------------
      Dim strErr As String = CLN__STD.GestError(ex, Me, "", oApp.InfoError, oApp.ErrorLogFile, True)
      '-------------------------------------------------	
    End Try
  End Function
  Public Overridable Function BeforeColUpdate_TESTAC_tm_orpromo(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If Not bModCCC Then Return True
      If dttEC.Rows.Count = 0 Then Return True

      Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130597607273744390, "Il cambio dell'ora promozione comporterà il caricamento delle promozioni valide in quella fascia oraria" & _
                                                                                    " e quindi l'annullamento delle promozioni precedentemente applicate." & vbCrLf & _
                                                                                    "Procedere con il cambio di orario?"))
      ThrowRemoteEvent(evnt)
      If evnt.RetValue = ThMsg.RETVALUE_YES Then Return True

      e.ProposedValue = e.Row!tm_orpromo
      bNoCambioDataContratto = True

      Return True
    Catch ex As Exception
      '-------------------------------------------------
      Dim strErr As String = CLN__STD.GestError(ex, Me, "", oApp.InfoError, oApp.ErrorLogFile, True)
      '-------------------------------------------------	
    End Try
  End Function

  Public Overridable Function AfterColUpdate_TESTAC_tm_datpromo(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If Not bNoCambioDataContratto Then CaricaContrattiCliente()
    Catch ex As Exception
      '-------------------------------------------------
      Dim strErr As String = CLN__STD.GestError(ex, Me, "", oApp.InfoError, oApp.ErrorLogFile, True)
      '-------------------------------------------------	
    Finally
      bNoCambioDataContratto = False
    End Try
  End Function
  Public Overridable Function AfterColUpdate_TESTAC_tm_orpromo(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Try
      If Not bNoCambioDataContratto Then CaricaContrattiCliente()
    Catch ex As Exception
      '-------------------------------------------------
      Dim strErr As String = CLN__STD.GestError(ex, Me, "", oApp.InfoError, oApp.ErrorLogFile, True)
      '-------------------------------------------------	
    Finally
      bNoCambioDataContratto = False
    End Try
  End Function
#End Region

  Public Overridable Function CheckCausaleProforma() As Boolean
    'nelle fatture proforma la causale contabile deve essere nulla!!!!
    'testo prima la causale di testata, quindi quelle del corpo (se ci sono)
    'Controlla anche che non ci siano righe che evadono note di prelievo
    Dim i As Integer = 0
    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Dim dtrT As DataRow = Nothing
    Try

      'Esce se non è proforma
      If dttET.Rows(0)!et_tipork.ToString <> "A" Or dttET.Rows(0)!et_proforma.ToString = "N" Then
        Return True
      End If

      If dttTabucamTesta.Rows.Count = 0 Then
        oCldDocu.ValCodiceDb(dttET.Rows(0)!et_causale.ToString, strDittaCorrente, "TABCAUM", "N", "", dttTabucamTesta)
      End If
      If dttTabucamTesta.Rows.Count > 0 Then
        With dttTabucamTesta.Rows(0)
          If NTSCInt(!tb_esist) <> 0 Or NTSCInt(!tb_carfor) <> 0 Or NTSCInt(!tb_carpro) <> 0 Or NTSCInt(!tb_carvar) <> 0 Or NTSCInt(!tb_rescli) <> 0 Or NTSCInt(!tb_scacli) <> 0 Or _
             NTSCInt(!tb_scapro) <> 0 Or NTSCInt(!tb_scavar) <> 0 Or NTSCInt(!tb_resfor) <> 0 Or NTSCInt(!tb_giaini) <> 0 Or NTSCInt(!tb_vcarfor) <> 0 Or NTSCInt(!tb_vcarpro) <> 0 Or _
             NTSCInt(!tb_vcarvar) <> 0 Or NTSCInt(!tb_vrescli) <> 0 Or NTSCInt(!tb_vscacli) <> 0 Or NTSCInt(!tb_vscapro) <> 0 Or NTSCInt(!tb_vscavar) <> 0 Or NTSCInt(!tb_vresfor) <> 0 Or _
             NTSCInt(!tb_vgiaini) <> 0 Or !tb_ultcos.ToString = "S" Or !tb_ultpre.ToString = "S" Or !tb_dtulcar.ToString = "S" Or !tb_dtulsca.ToString = "S" Or NTSCInt(!tb_causec) <> 0 Or _
             NTSCInt(!tb_valoriz) <> 0 Or !tb_testci.ToString <> " " Or NTSCInt(!tb_vvaloriz) <> 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734886877337839, "Nelle fatture proforma la causale di magazzino deve essere 'NULLA', ovvero non deve aver impostato nessun flag. " & vbCrLf & "La causale '|" & dttET.Rows(0)!et_causale.ToString & "|' non soddisfa questi requisiti.")))
            Return False
          End If
        End With
      End If

      'la fattura proforna non deve essere collegata a note di prelievo
      If dttEC.Select("ec_npnum <> 0").Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128665623586093750, "Nelle fatture proforma non devono essere presenti riferimenti alle note di prelievo.")))
        Return False
      End If

      'Controllo sulle righe che la causale sia nulla
      For i = 0 To dttEC.Rows.Count - 1
        'Controllo causale
        oDttgr = New CLEGROUPBY
        dttGr.Clear()
        If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_causale", "ec_causale <> 0", "ec_causale") Then
          Return False
        End If
        For Each dtrT In dttGr.Rows
          oCldDocu.ValCodiceDb(dtrT!ec_causale.ToString, strDittaCorrente, "TABCAUM", "N", "", dttTabucamTesta)
          If dttTabucamTesta.Rows.Count > 0 Then
            With dttTabucamTesta.Rows(0)
              If NTSCInt(!tb_esist) <> 0 Or NTSCInt(!tb_carfor) <> 0 Or NTSCInt(!tb_carpro) <> 0 Or NTSCInt(!tb_carvar) <> 0 Or NTSCInt(!tb_rescli) <> 0 Or NTSCInt(!tb_scacli) <> 0 Or _
                 NTSCInt(!tb_scapro) <> 0 Or NTSCInt(!tb_scavar) <> 0 Or NTSCInt(!tb_resfor) <> 0 Or NTSCInt(!tb_giaini) <> 0 Or NTSCInt(!tb_vcarfor) <> 0 Or NTSCInt(!tb_vcarpro) <> 0 Or _
                 NTSCInt(!tb_vcarvar) <> 0 Or NTSCInt(!tb_vrescli) <> 0 Or NTSCInt(!tb_vscacli) <> 0 Or NTSCInt(!tb_vscapro) <> 0 Or NTSCInt(!tb_vscavar) <> 0 Or NTSCInt(!tb_vresfor) <> 0 Or _
                 NTSCInt(!tb_vgiaini) <> 0 Or !tb_ultcos.ToString = "S" Or !tb_ultpre.ToString = "S" Or !tb_dtulcar.ToString = "S" Or !tb_dtulsca.ToString = "S" Or NTSCInt(!tb_causec) <> 0 Or _
                 NTSCInt(!tb_valoriz) <> 0 Or !tb_testci.ToString <> " " Or NTSCInt(!tb_vvaloriz) <> 0 Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128665619270156250, "Nelle fatture proforma la causale di magazzino deve essere 'NULLA', ovvero non deve aver impostato nessun flag. " & vbCrLf & "La causale '|" & dttET.Rows(0)!et_causale.ToString & "|' non soddisfa questi requisiti.")))
                Return False
              End If
            End With
          End If
        Next    'For Each dtrT In dttGr.Rows
      Next    'For i = 0 To dttEC.Rows.Count - 1

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overrides Function RipristinaDocumento() As Boolean
    Dim bCollaudi As Boolean = False
    Try
      MyBase.RipristinaDocumento()

      'rimuovo il blocco impostato in apertura programma
      DocumentLockRemove()

      'non decommentare la riga sotto: in fase di ripristino di un nuovo documento i controlli di testata 
      'rimarrebbero senza nessun record e darebbero una sfilza di errori!!
      'dttET.Rows(nRow).RejectChanges()
      bHasChangesET = False

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

#Region "SALVA/CANCELLA e TestPreSalva"
  Public Overridable Function SalvaDocumento(ByVal strState As String) As Boolean
    'strState: N = new, D = delete, U = update
    'strOrdlistCollegati = elenco degli ordlist separati da ',' che sono serviti per generare il documento (da BNORGNOR): al salva devo aggiornare anche ordlist/movrdo
    Dim bResult As Boolean = False
    Dim strErrore As String = ""
    Dim strTipork As String = ""
    Dim dtUltaggTmp As Date = NTSCDate(dttET.Rows(0)!et_ultagg)
    Dim strOpnomeTmp As String = NTSCStr(dttET.Rows(0)!et_opnome)
    Dim nDecPaga As Integer = 0
    Dim dttTmp As New DataTable
    Dim bAggNumprot As Boolean = False
    Dim strPVR As String = ""
    Dim i As Integer = 0
    Dim bAnnullaSalvataggio As Boolean = False
    Dim oTestata As CLELBMENU.OutTestata = Nothing
    Dim dTotImpIVA As Decimal = 0
    Dim dTotImpCont As Decimal = 0
    Dim dTotImpIVAval As Decimal = 0
    Dim dTotImpContval As Decimal = 0
    Dim bCaDc As Boolean = False
    Dim evt As NTSEventArgs = Nothing
    Dim bProformaOk As Boolean = False
    Dim nEscomp As Integer = 0
    Dim dttScad As New DataTable
    Dim lConeff As Integer = 0  'conto effetti attivi
    Try
      strTipork = dttET.Rows(0)!et_tipork.ToString

      '----------------------------------------
      'controllo se il documento aperto in modifica/cancellaz è stato variato nel frattempo da un altro utente
      If Not bNew Then
        If bDocRetail Then
          'non posso risalvare/cancellare documenti fatti con retail
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128832251204278000, "Documenti generati con il modulo RETAIL non possono essere salvati e/o cancellati con questo programma")))
          Return False
        End If

        If bDocumentLockNoSave Then
          'in apertura documento un altro utente aveva lo stesso doc aperto (o se sono in veboll aveva un ddt aperto 
          'contenente l'ordine che ho cercato di aprire ...) ed è impostato di bloccare la modifica: non faccio salvare
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129176049337099610, "Il documento non può essere modificato/cancellato perchè (come avvisato in apertura documento) un altro operatore lo aveva già in consultazione/modifica. E' possibile solo ripristinare")))
          Return False
        End If

      End If

      If Not CheckTimeStamp(strState) Then Return False

      '----------------------------------------
      'controlli pre-salvataggio (solo se non è una delete)
      If strState = "D" Then
        If Not TestPreCancellaTestmag() Then Return False
      Else
        '--------------------------------------
        If SpeseIncSoloSuPrimaFatt() Then dttET.Rows(0)!et_flspinc = "N"

        If Not OkTestata() Then Return False

        '-------------------------------------
        'ricalcolo i totali del documento

        If CalcolaTotali(oTestata) = False Then Return False

        '----------------------------------------------------------------------------------------------------------
        'controllo se c'è quadratura tra castellettiiva e contropartite
        'oTestata.dImponib, oTestata.dImpocont, oTestata.dImponibv, oTestata.dImpcontv
        'For i = 0 To 8
        '  dTotImpIVA += oTestata.dImponib(i)
        '  dTotImpIVAval += oTestata.dImponibv(i)
        'Next
        'For i = 0 To 20
        '  dTotImpCont += oTestata.dImpocont(i)
        '  dTotImpContval += oTestata.dImpcontv(i)
        'Next
        'If Not bInNuovoDocSilent Then
        '  If Not ControllaCastelletti(dTotImpIVA, dTotImpCont, dTotImpIVAval, dTotImpContval) Then Return False
        'End If
        While True
          bSalvaRicalcolaDisimpegno = False
          If Not AggiornaDisimpegno() Then Return False

          If Not TestPreSalvaTestmag() Then Return False

          If bSpezzaDocArt62Deterior AndAlso strState <> "D" Then
            'Se devo spezzare gli articoli 62, allora per sicurezza ripeto il TestPreSalvaTestmag(), 
            ' altrimenti posso procedere normalemnte e completare il salvataggio
            If Not SpezzaDocArt62() Then
              If Not bNew Then Return False 'Documento aperto: chiedo se proseguire oppure no
            End If
          End If
          'aggiornamento disimpegno: se nel DDT EMESSO ho evaso totalmente un IC di 100 con QTA 100 ma 
          'manualmente ho tolto il flag 'a saldo', oppure ho cambiato la qta in 80 e poi messo qta superiore a residuo (es 200)) 
          'e non ho rimesso il flag a saldo nell AggSisimpegno ho indicato come QTA DA DISIMPEGNOARE 200!!!! perchè non c'era il flag 'a saldo'
          'RIFACCIO il calcolo del disimpegno
          If Not bSalvaRicalcolaDisimpegno Then Exit While
        End While
        CambiaFormaDiPagamento(False) 'Qui sotto per gestire il caso di articoli deteriorabili che ptorebbero variare la forma di pagametno.

        dsShared.AcceptChanges()

        '-------------------------------------
        'Rileva la decorrenza pagamento
        oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_codpaga).ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
        nDecPaga = NTSCInt(dttTmp.Rows(0)!tb_decpaga)
        dttTmp.Clear()

        '-------------------------------------
        'Ripartisce spese ac.
        If Not AggSpeaccRiga() Then Return False
        dsShared.AcceptChanges()

        '-------------------------------------
        'Aggiorna movcla
        With dttET.Rows(0)
          If Not AggMovcla(!et_tipork.ToString, NTSCInt(!et_anno), !et_serie.ToString, NTSCInt(!et_numdoc), _
                           bTmp501, NTSCDate(!et_datdoc), NTSCInt(!et_conto)) Then Return False
        End With

        '-------------------------------------
        'verifico se devo aggiornare o meno il numero di protocollo acquisti
        If bNew And (nRegiva = NTSCInt(dttET.Rows(0)!et_nregiva) Or nRegiva = 0) And _
           NTSCInt(dttET.Rows(0)!et_nregiva) <> 0 And _
           lNumprot = NTSCInt(dttET.Rows(0)!et_numprot) And _
           strAlfpro = NTSCStr(dttET.Rows(0)!et_alfpro) And _
           strAutoNumProt = "S" And _
           (dttET.Rows(0)!et_tipork.ToString = "L" Or dttET.Rows(0)!et_tipork.ToString = "J") Then
          nRegiva = NTSCInt(dttET.Rows(0)!et_nregiva)
          bAggNumprot = True
        End If

        '-------------------------------------
        'calcolo la stringa per i PVR
        If bGestPVR And (strTipork = "A" Or strTipork = "L") Then
          strPVR = CalcolaStringaPVR()
          dttET.Rows(0)!et_andescr2 = Left(strPVR, 30)
          dttET.Rows(0)!et_anindir = Mid(strPVR, 31)
        End If

        '-------------------------------------
        'calcolo le scadenze
        If CBool(NTSCInt(dttET.Rows(0)!et_ccambiati) And bsVEBOLLmodifCastScad) Then
          'non devo fare nulla: le scadenze sono già state impostate da form di 'modifica scadenze'
        Else
          If Not bDocDaRetail Then
            'devo ricalcolarle
            For i = 1 To 8
              dttET.Rows(0)("et_tippaga_" & i.ToString) = 0
              dttET.Rows(0)("et_datsca_" & i.ToString) = DBNull.Value
              dttET.Rows(0)("et_impsca_" & i.ToString) = 0
              dttET.Rows(0)("et_impscav_" & i.ToString) = 0
            Next
            'calcolo le scadenze sul residuo da pagare
            If Not CalcolaScadenzeStandard(False) Then Return False
          End If
        End If    'If CBool(NTSCInt(dttET.Rows(0)!et_ccambiati) And bsVEBOLLmodifCastScad) Then

      End If    'If strState = "D" Then

      'scheda di trasporto
      If Not strState = "D" Then
        If CheckAperturaSchetrasp(True, bAnnullaSalvataggio) Then
          ThrowRemoteEvent(New NTSEventArgs("SCHEDATRAS:", ""))
        Else
          If bAnnullaSalvataggio Then Return False
        End If
      End If

      dttET.Rows(0)!et_ultagg = DateTime.Now
      If Not bInImportDaPicking And Not bDocDaRetail Then dttET.Rows(0)!et_opnome = oApp.User.Nome
      For Each dtrT As DataRow In dttEC.Rows
        dtrT!ec_ultagg = dttET.Rows(0)!et_ultagg
      Next
      dttEC.AcceptChanges()
      If Not dttECIMP Is Nothing Then
        For Each dtrT As DataRow In dttECIMP.Rows
          dtrT!ec_ultagg = dttET.Rows(0)!et_ultagg
        Next
        dttECIMP.AcceptChanges()
      End If
      bCaDc = CBool(lModuliSupDittaDitt And bsModSupCAE)
      If bCaDc Then
        bCaDc = oCldBoll.CheckEsercizioInCa2(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)
      End If

      '----------------------------------------
      'se il documento è una fattura proforma, sposto il contenuto di mm_commen in mm_ornum
      '(così non viene aggiornato il disimpegno dell'eventuale impegno cliente collegato)
      If dttET.Rows(0)!et_proforma.ToString = "S" Then
        bProformaOk = True
        For i = 0 To dttEC.Rows.Count - 1
          dttEC.Rows(i)!ec_commen = dttEC.Rows(i)!ec_ornum
          dttEC.Rows(i)!ec_ornum = 0
        Next
        dttEC.AcceptChanges()
      End If
      'Setta dati creazione documento
      If strState = "N" Then SettaDatiCreazione()
      'Soluzione provvisoria al problema della dimenticanza del campo tm_scostp su TESTPRBC
      If NTSCStr(dttETC.Rows(0)!tm_tipork) = "W" AndAlso dttETC.Columns.Contains("tm_scostp") Then dttETC.Columns.Remove("tm_scostp")

      If strState = "D" Then
        'cancello prima la registrazione contabile, se presente: nell'ordine: abbuono, incasso, fattura
        'questo perche bsvepnfa registra in prima nota sempre prima la fattura, poi l'evenutale incasso, poi l'eventuale abbuono...
        If (bCancellaRegCG Or ChiamaPnfa()) And NTSCStr(dttET.Rows(0)!et_datregef).Trim <> "" Then
          'verifico se posso cancellare: 

          '---------------------------
          'abbuono
          If NTSCInt(dttET.Rows(0)!et_numregom) <> 0 Then
            dttScad.Clear()
            If Not CType(oCleComm, CLELBMENU).TestPreCancellaRegistrazioneEx(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numregom), "N", False, strErrore, dttScad) Then
              If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
              Return False
            End If
          End If

          '---------------------------
          'incassato
          If NTSCInt(dttET.Rows(0)!et_numrgin) <> 0 Then
            dttScad.Clear()
            If Not CType(oCleComm, CLELBMENU).TestPreCancellaRegistrazioneEx(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numrgin), "N", False, strErrore, dttScad) Then
              If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
              Return False
            End If
          End If

          '---------------------------
          'fattura
          If NTSCInt(dttET.Rows(0)!et_numregef) <> 0 Then
            dttScad.Clear()
            If Not CType(oCleComm, CLELBMENU).TestPreCancellaRegistrazioneEx(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numregef), "N", False, strErrore, dttScad) Then

              'devo scartare la registrazione degli omaggi e di incasso contestuale
              If NTSCInt(dttET.Rows(0)!et_numregom) <> 0 Then
                For Each dtrT As DataRow In dttScad.Select("sc_flsaldato = 'S' AND sc_dtsaldato = " & CDataSQL(NTSCDate(dttET.Rows(0)!et_datregef)) & " AND sc_rgsaldato = " & NTSCInt(dttET.Rows(0)!et_numregom))
                  dtrT.Delete()
                Next
                dttScad.AcceptChanges()
              End If
              If NTSCInt(dttET.Rows(0)!et_numrgin) <> 0 Then
                For Each dtrT As DataRow In dttScad.Select("sc_flsaldato = 'S' AND sc_dtsaldato = " & CDataSQL(NTSCDate(dttET.Rows(0)!et_datregef)) & " AND sc_rgsaldato = " & NTSCInt(dttET.Rows(0)!et_numrgin))
                  dtrT.Delete()
                Next
                dttScad.AcceptChanges()
              End If

              'scarto le scadenze generate e saldate all'interno della stessa registrazione 'nota accredito emessa che compensa fattura emessa'
              For Each dtrT As DataRow In dttScad.Select("sc_flsaldato = 'S' AND sc_dtsaldato = sc_datreg AND sc_rgsaldato = sc_numreg")
                dtrT.Delete()
              Next
              dttScad.AcceptChanges()

              'se ho scadenze collegate ad incassi differiti o no RB/tratte, avviso subito che non posso cancellare
              If dttScad.Select("sc_codincdiff > 0 or sc_tippaga > 2").Length > 0 Then
                If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                Return False
              End If

              'possono essere solo scadenze di effetti: verifico per ogni record se posso cancellare la registrazione:
              'se posso farlo (perchè emesso gli effetti ma non presentati in banca, cancellerò anche queste registrazioni
              'le scadenze, sia con che senza chiusura cliente, sono quelle sul conto EFFETTI ATTIVI con stessi estremi di partita del cliente
              oCldBoll.ValCodiceDb("1", strDittaCorrente, "TABPECG", "N", "", dttTmp)
              If dttTmp.Rows.Count > 0 Then
                lConeff = oCldBoll.TrovaContoDaContrEConto(strDittaCorrente, NTSCInt(dttTmp.Rows(0)!tb_contreff), NTSCInt(dttTmp.Rows(0)!tb_coneff))
              End If
              dttTmp.Clear()
              If lConeff = 0 Then
                If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                Return False
              End If

              For Each dtrT As DataRow In dttScad.Rows
                If Not oCldBoll.GetScadEffetti(strDittaCorrente, lConeff, NTSCInt(dtrT!sc_annpar), _
                                               NTSCStr(dtrT!sc_alfpar), NTSCInt(dtrT!sc_numpar), _
                                               NTSCInt(dtrT!sc_numrata), dttTmp) Then
                  If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                  Return False
                End If
                If dttTmp.Rows.Count = 0 Then
                  'non c'è emissione effetti, ma se sono qui è perchè le scadenze sono saldate: blocco
                  'attenzione: passa di qui anche nel caso di emissione effetti senza chiusura cliente
                  'se genero gli effetti e poi cancello la generazione effetti. sulla scadenza cliente rimane sc_fldis = "S"
                  'stessa cosa se spezzo la scadenza quando sc_fldis = "S"! la scadenza non è saldata e non c'è la generazione effetti
                  'per ora blocco solo se la scadenza è saldata! se non è saldata, potrei aver cancellato la scadenza a mano da prima nota
                  If NTSCStr(dtrT!sc_flsaldato) = "S" Then
                    If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                    Return False
                  Else
                    'così non cercherò di cancellare la registrazione che ha saldato questo record, perchè già non esistente
                    dtrT!sc_flsaldato = DBNull.Value
                    dtrT!sc_rgsaldato = 0
                  End If
                Else
                  If NTSCStr(dttTmp.Rows(0)!sc_flsaldato) = "S" Then
                    'già presentata in banca
                    If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                    Return False
                  Else
                    'farò cancellare la registrazione
                    dtrT!sc_dtsaldato = NTSCDate(dttTmp.Rows(0)!sc_datreg)
                    dtrT!sc_rgsaldato = NTSCInt(dttTmp.Rows(0)!sc_numreg)
                  End If
                End If

                If NTSCInt(dtrT!sc_rgsaldato) <> 0 Then
                  If Not CType(oCleComm, CLELBMENU).TestPreCancellaRegistrazione(strDittaCorrente, NTSCDate(dtrT!sc_dtsaldato).ToShortDateString, NTSCInt(dtrT!sc_rgsaldato), "N", False, "") Then
                    If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
                    Return False
                  End If
                End If
              Next    'For Each dtrT As DataRow In dttScad.Rows
              dttScad.AcceptChanges()
            End If
          End If    'If NTSCInt(dttET.Rows(0)!et_numregef) <> 0 Then

          '---------------------------
          'eseguo la cancellazione

          'prima cancello eventuali registrazioni di emissione effetti
          For Each dtrT As DataRow In dttScad.Rows
            If NTSCStr(dtrT!sc_dtsaldato) <> "" Then
              If Not CType(oCleComm, CLELBMENU).CancellaRegistrazione(strDittaCorrente, NTSCDate(dtrT!sc_dtsaldato).ToShortDateString, NTSCInt(dtrT!sc_rgsaldato), "N") Then
                Return False
              End If
            End If
          Next
          'ora cancello le registrazioni effettivamente collegate alla fattura
          If Not CType(oCleComm, CLELBMENU).CancellaRegistrazione(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numregom), "N") Then
            Return False
          End If
          If Not CType(oCleComm, CLELBMENU).CancellaRegistrazione(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numrgin), "N") Then
            Return False
          End If
          If Not CType(oCleComm, CLELBMENU).CancellaRegistrazione(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, NTSCInt(dttET.Rows(0)!et_numregef), "N") Then
            Return False
          End If
          dttET.Rows(0)!et_flcont = "N"
          strErrore = ""  'pulisco dall'eventuale errore di scadenze saldate
        End If    'If bCancellaRegCG And NTSCStr(dtrT!et_datregef).Trim <> "" Then
      End If    'If strState = "D" Then


      'Salva il documento
      bResult = oCldBoll.SalvaDocumento(dsShared, strState, bModPM, bModTCO, bProgrCambiato, _
                                     bNuovoDaImportExport, _
                                     dtInizEser, bCarProdInAvlavp, bAggNumprot, strErrore, _
                                     bCaDc, _
                                     CBool(lModuliDittaDitt And bsModSQ), bTerzista, strNetProDB, _
                                     bFlagRielabFattDiffSuVariazioneDDT, CBool(lModuliSupDittaDitt And bsModSupDII), bCollega_MG_DI)
      If bResult Then
        bHasChangesET = False
        bProformaOk = False
      Else
        '----------------------------------------
        'annullo la modifica per fattura proforma
        If bProformaOk Then
          bProformaOk = False
          For i = 0 To dttEC.Rows.Count - 1
            dttEC.Rows(i)!ec_ornum = dttEC.Rows(i)!ec_commen
            dttEC.Rows(i)!ec_commen = 0
          Next
          dttEC.AcceptChanges()
        End If

        dttET.Rows(0)!et_ultagg = dtUltaggTmp    'altrimenti a risalvataggio avvisa che un altro utente ha cambiato l'anagrafica ditta ...
        dttET.Rows(0)!et_opnome = strOpnomeTmp
        For Each dtrT As DataRow In dttEC.Rows
          dtrT!ec_ultagg = dtUltaggTmp
        Next
        dttEC.AcceptChanges()
        If Not dttECIMP Is Nothing Then
          For Each dtrT As DataRow In dttECIMP.Rows
            dtrT!ec_ultagg = dtUltaggTmp
          Next
          dttECIMP.AcceptChanges()
        End If
      End If
      'comunico gli errori all'UI
      If strErrore <> "" Then
        If strErrore.Substring(0, 3) = "*N*" Then
          'cambio il numero documento in tutti i posti interessati
          strErrore = strErrore.Substring(3)
          CambiaNumdoc(dsShared, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_numdoc))
        End If
        ThrowRemoteEvent(New NTSEventArgs("", strErrore))
      End If

      '------------------------
      If bResult Then
        'Salva la data del documento (solo i nuovi) per riproporla
        If bNew Then
          dtDataNewDoc = NTSCDate(dttET.Rows(0)!et_datdoc)
          lContoNewDoc = NTSCInt(dttET.Rows(0)!et_conto)
        End If
        'rimuovo il blocco impostato in apertura programma
        DocumentLockRemove()

        '------------------------------------------
        'se può cancella il file di picking
        If strState = "D" And dttET.Rows(0)!et_tipork.ToString = "W" And NTSCInt(dttET.Rows(0)!et_idpick) <> 0 Then
          If CType(oCleComm, CLELBMENU).GetPikDir() <> "" Then
            Try
              Kill(CType(oCleComm, CLELBMENU).GetPikDir() & "PIK" & NTSCInt(dttET.Rows(0)!et_idpick).ToString("000000000") & ".PIK")
            Catch ex As Exception
            End Try
          End If
          ' Cancello i picking collegati
          If CBool(lModuliSupDittaDitt And bsModSupRME) Then
            oCldBoll.StatoPickingRicevimento(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_idpick), dttTmp)

            If dttTmp.Rows.Count <> 0 Then
              If NTSCStr(dttTmp.Rows(0)!tb_chiuso) = "G" Or NTSCStr(dttTmp.Rows(0)!tb_chiuso) = "S" Then
                oCldBoll.CancellaTabellePickingRicevimento(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_idpick))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128872239266857867, "La nota di prelievo non sembra allineata con il picking. Il picking non verrà cancellato")))
              End If

              dttTmp.Clear()
            End If
          End If
        End If

        ' Cancello il ricevimento merci 
        If strState = "D" And (dttET.Rows(0)!et_tipork.ToString = "L" Or dttET.Rows(0)!et_tipork.ToString = "M") Then
          If CBool(lModuliSupDittaDitt And bsModSupRME) Then
            oCldBoll.StatoPickingRicevimento(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_idpick), dttTmp)

            If dttTmp.Rows.Count <> 0 Then
              If NTSCStr(dttTmp.Rows(0)!tb_chiuso) = "S" Then
                oCldBoll.CancellaTabellePickingRicevimento(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_idpick))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128872841332073036, "La nota di prelievo non sembra allineata con il picking. Il picking non verrà cancellato")))
              End If

              dttTmp.Clear()
            End If
          End If
        End If

        If bResult And bGestAlert And strState <> "D" Then
          AlertSottoCosto()
          If strState = "U" And dttET.Rows(0)!et_flcont.ToString = "S" Then AlertContabilizzato()
        End If

        '------------------------------------------
        'se necessario creo il file di picking (solo su note di prelievo)
        'non lo faccio se sto aggiornando il piking da BNPKPICK rileggendo il file .pik riscontrato
        If dttET.Rows(0)!et_tipork.ToString = "W" And strState <> "D" And bInImportDaPicking = False Then
          If CBool(lModuliExtDittaDitt And bsModExtPIK) Or CBool(lModuliSupDittaDitt And bsModSupRME) Then
            'Non crea il file PIK se la nota è in stato "VISTATO"
            If bCreaFilePick Then
              If dttET.Rows(0)!et_flevas.ToString = "N" Then
                If dttET.Rows(0)!et_vistato.ToString <> "S" And NTSCInt(dttET.Rows(0)!et_idpick) = 0 Then
                  Dim bGeneraPick As Boolean = False
                  If strProgChiamante <> "BERMPICK" Then
                    evt = New NTSEventArgs("MSG_YESNO", oApp.Tr(Me, 129658225390282636, "Generare il file di picking?"))
                    ThrowRemoteEvent(evt)
                    If evt.RetValue = "YES" Then bGeneraPick = True
                  Else
                    bGeneraPick = True
                  End If
                  If bGeneraPick Then
                    CType(oCleComm, CLELBMENU).CreaPicking("BSVEBOLL", strDittaCorrente, _
                                                             dttET.Rows(0)!et_tipork.ToString, _
                                                             NTSCInt(dttET.Rows(0)!et_anno), _
                                                             dttET.Rows(0)!et_serie.ToString, _
                                                             NTSCInt(dttET.Rows(0)!et_numdoc), _
                                                             NTSCInt(dttET.Rows(0)!et_idpick))
                  End If
                ElseIf NTSCInt(dttET.Rows(0)!et_idpick) <> 0 And Not bInCreaDocDaGnor Then
                  ThrowRemoteEvent(New NTSEventArgs(ThMsg.MSG_INFO, oApp.Tr(Me, 129967712049375000, "Il picking non può essere generato in quanto risulta già generato precedentemente.")))
                ElseIf dttET.Rows(0)!et_vistato.ToString = "S" And Not bInCreaDocDaGnor Then 'Al salvataggio del picking non deve dare il messaggio.
                  ThrowRemoteEvent(New NTSEventArgs(ThMsg.MSG_INFO, oApp.Tr(Me, 129967711782187500, "Non è possibile generare il picking sulle note di prelievo vistate.")))
                End If
              End If
            End If
          End If
        End If
      End If    'If bResult Then

      'imposto il valore di uscita dalla funzione
      SalvaDocumento = bResult

      '-------------------------------
      'faccio contabilizzare il documento
      'se non andrà a buon fine la contabilizzazione pazienza, verranno dati dei messaggi a 
      'video o visualizzerò il file di log di pnfa, ma mantengo il doc in magaz
      'non faccio nulla se il documento ha numero negativo (elaborazione di prova)

      If strErrore = "" And bResult And ChiamaPnfa() And (strState = "N" Or strState = "U") And _
        "ADNEFISPLKJ(£".Contains(NTSCStr(dttET.Rows(0)!et_tipork)) And NTSCInt(dttET.Rows(0)!et_numdoc) > 0 Then
        oCldBoll.EscompFromDate(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datdoc), nEscomp, Nothing)
        If CreaPnfa() And nEscomp <> 0 Then
          oClePnfa.ElaboraSingoloDoc(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), _
                                    NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc), _
                                    NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString, nEscomp, CBool(strState = "U"))

          'ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 127939835583750000, "Contabilizzazione documenti terminata.")))
          If oClePnfa.LogError = True Then
            'faccio aprire alla ui il file di log
            Dim evnt As New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 127940796626250000, "Esistono dei messaggi nel file di log del programma di contabilizzazione. Visualizzare il file?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
              ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.CALL_PROCESSSTART, oClePnfa.LogFileName))
            End If
          End If
        End If    'If CreaPnfa() Then
      End If    'If bResult And ChiamaPnfa Then
      '--------------------------------------------------------------------------------------------------------------
      AlertConfrontoPrezzi(strState)
      '--------------------------------------------------------------------------------------------------------------
      'Il salvataggio del primo documento è andato a buone fine. Procedo con il salvataggio del secondo documento per articoli deteriorabili (se necessario)
      If bResult Then GeneraDocumentoArticoliDeteriorabili()
      '--------------------------------------------------------------------------------------------------------------
    Catch ex As Exception
      '----------------------------------------
      If SalvaDocumento = False Then
        'annullo la modifica per fattura proforma
        If bProformaOk Then
          bProformaOk = False
          For i = 0 To dttEC.Rows.Count - 1
            dttEC.Rows(i)!ec_ornum = dttEC.Rows(i)!ec_commen
            dttEC.Rows(i)!ec_commen = 0
          Next
          dttEC.AcceptChanges()
        End If

        dttET.Rows(0)!et_ultagg = dtUltaggTmp    'altrimenti a risalvataggio avvisa che un altro utente ha cambiato l'anagrafica ditta ...
        dttET.Rows(0)!et_opnome = strOpnomeTmp
      Else
        'il documento è già stato salvato, per cui non devo ricaricare et_ultagg e et_opnome
      End If

      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    Finally
      dttScad.Clear()
      oTestata = Nothing
      bInNuovoDocSilent = False
      bInApriDocSilent = False
    End Try
  End Function

  Public Overridable Sub CambiaFormaDiPagamento(ByVal bDocArtDeterior As Boolean)
    Dim bInferioreAImportoMinimo As Boolean = False
    Dim bInferioreAImportoMassimo As Boolean = False
    Dim bSostituisciCodicePagamento As Boolean = False
    Dim nCodpagaOut As Integer = 0
    Dim lImportoOut As Decimal = 0
    Dim lImportoOut2 As Decimal = 0
    Dim strDespagaOut As String = ""
    Dim evt As NTSEventArgs = Nothing
    Try
      '----------------------------------------------------------------------------------------------------------
      '--- Controlla se la rimanenza (diversa da zero) documento rientra negli scaglioni indicati in ANAGRA
      '--- (solo per determinati documenti e solo se, per il documento corrente, non è stata chiesta
      '--- l'eventuale sostituzione del codice pagamento e successivo ricalcolo del documento)
      '--- (NON OPERA SE CHIAMATO DA GPV e/o Modulo Project Management attivo!!!)
      '----------------------------------------------------------------------------------------------------------
      If strProgChiamante Is Nothing Then strProgChiamante = ""
      If bCodicePagamentoRicalcolato = False AndAlso bDocRetail = False AndAlso bModPM = False AndAlso _
         CType(oCleComm, CLELBMENU).oTestata.dRimanenza > 0 Then
        With dttET.Rows(0)
          If RitornaCodicePagamentoPerScaglioni(!et_tipork.ToString, NTSCInt(!et_tipobf), NTSCInt(!et_conto), _
                                      CType(oCleComm, CLELBMENU).oTestata.dRimanenza, lImportoOut, NTSCInt(!et_codpaga), nCodpagaOut, _
                                      strDespagaOut, bInferioreAImportoMinimo, lImportoOut2, bInferioreAImportoMassimo, bDocArtDeterior) Then
            If bDocArtDeterior Then
              'Per gli articoli deteriorabili devo sempre sostituire il pagamento
              bSostituisciCodicePagamento = True
            Else
              Select Case strProgChiamante.ToUpper
                Case "BNVEGNBF"
                  bSostituisciCodicePagamento = True
                Case Else
                  If lImportoOut2 <> 0 Then
                    evt = New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130566221640354825, "Attenzione!" & vbCrLf & _
                      "La rimanenza del documento corrente (|" & Format(CType(oCleComm, CLELBMENU).oTestata.dRimanenza, oApp.FormatImporti) & "|)" & vbCrLf & _
                      "risulta superiore al 'Limite importo minimo' (|" & Format(lImportoOut, oApp.FormatImporti) & "|) e inferiore al 'Limite grandi importi' (|" & Format(lImportoOut2, oApp.FormatImporti) & "|)" & vbCrLf & _
                      "indicato nell'Anagrafica relativa al conto intestatario del documento." & vbCrLf & _
                      "Applicare il codice pagamento '|" & nCodpagaOut.ToString & "|' - |" & strDespagaOut & "|" & vbCrLf & _
                      "relativo allo scaglione?"))
                  Else
                    evt = New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130566221640354824, "Attenzione!" & vbCrLf & _
                      "La rimanenza del documento corrente (|" & Format(CType(oCleComm, CLELBMENU).oTestata.dRimanenza, oApp.FormatImporti) & "|)" & vbCrLf & _
                      "risulta |" & IIf(bInferioreAImportoMinimo = True, "inferiore al 'Limite importo minimo'", "superiore al 'Limite grandi importi'").ToString & "| (|" & Format(lImportoOut, oApp.FormatImporti) & "|)" & vbCrLf & _
                      "indicato nell'Anagrafica relativa al conto intestatario del documento." & vbCrLf & _
                      "Applicare il codice pagamento '|" & nCodpagaOut.ToString & "|' - |" & strDespagaOut & "|" & vbCrLf & _
                      "relativo allo scaglione?"))
                  End If

                  ThrowRemoteEvent(evt)
                  If evt.RetValue = ThMsg.RETVALUE_YES Then bSostituisciCodicePagamento = True
              End Select
            End If
            If bSostituisciCodicePagamento Then
              bCodicePagamentoRicalcolato = True
              !et_codpaga = nCodpagaOut
              .AcceptChanges()
              CalcolaTotali()
            End If
          End If
        End With
      End If
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Sub

  Public Overridable Function TestPreSalvaTestmag() As Boolean
    '-------------------------------------------------
    'eseguo i controlli necessari prima di fare il salvataggio della riga
    Dim i As Integer = 0
    Dim bOk As Boolean = False
    Dim dtrT() As DataRow = Nothing
    Dim strTestSottoCostoLOC As String = ""
    Dim evnt As NTSEventArgs = Nothing
    Dim dtLastdoc As DateTime = NTSCDate(IntSetDate("01/01/1900"))
    Dim strDatdocOut1 As String = ""
    Dim strTiporkOut1 As String = ""
    Dim dttTmp As New DataTable
    Dim dPartedecimale As Decimal = 0
    Dim dPrezzoarr As Decimal = 0
    Dim dArrotondamento As Decimal = 0
    Dim bEsiste As Boolean = False
    Dim strTipoRestituito As String = ""
    Dim strTmp As String = ""
    Dim strLastTipo As String = ""
    Dim strTipo As String = ""
    Dim bNoPlafondDich As Boolean = False
    Dim dsDic As DataSet = Nothing
    Dim dPlafondDic As Decimal = 0
    Dim dPlafondUsatoCG As Decimal = 0
    Dim dPlafondUsatoMG As Decimal = 0
    Dim dPlafondUsato As Decimal = 0
    Dim dSegno As Decimal = 1
    Dim dTotdoc As Decimal = 0
    Dim dPercUsoPlafond As Decimal = 0
    Dim bSaltacorrente As Boolean = False
    Try
      If bInUnload Then Return False

      If NTSCStr(dttET.Rows(0)!et_alfpro) = "" Then dttET.Rows(0)!et_alfpro = " "

      'se la fattura è proforma la causale utilizzata deve essere 'nulla'
      If CheckCausaleProforma() = False Then Return False

      If bAddScontiPerPeso Then
        If Not CalcolaScontiTestata Then Return False
      End If

      If ControlloStatoRicevimento(NTSCInt(dttET.Rows(0)!et_idpick)) Then Return False

      '-----------------------------------------
      'Se impostata l'opzione di registro arrotonda il totale documento
      If nArrotonda5Cent = -1 Then
        If (dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_tipork.ToString = "B" Or _
            dttET.Rows(0)!et_tipork.ToString = "C" Or dttET.Rows(0)!et_tipork.ToString = "N") And _
            NTSCInt(dttET.Rows(0)!et_valuta) = 0 And dttET.Rows(0)!et_scorpo.ToString = "N" Then
          'Solo in questo caso effettuo l'arrotondamento
          dPartedecimale = NTSCDec(dttET.Rows(0)!et_totdoc) - NTSCInt(Microsoft.VisualBasic.Fix(NTSCDec(dttET.Rows(0)!et_totdoc)))
          CalcolaArrotondamento(dPartedecimale, dPrezzoarr, dArrotondamento)
          If NTSCDec(dPrezzoarr) <> NTSCDec(dttET.Rows(0)!et_totdoc) Then
            'Devo arrotondare a 0,00: inserisco un riga in movmag "Arrotondamento"
            dttEC.Rows.Add(dttEC.NewRow)
            With dttEC.Rows(dttEC.Rows.Count - 1)
              'forzo la MovordOnAddNewRow
              !codditt = "."
              !codditt = strDittaCorrente
              !ec_codart = "D"
              !ec_descr = "Arrotondamento"
              !ec_colli = 0
              !ec_quant = 1
              !ec_prezzo = dArrotondamento
              !ec_codiva = 999
              !ec_controp = 999
              !ec_valore = dArrotondamento
              !ec_ultagg = DateTime.Now
              !ec_scont1 = 0
              !ec_scont2 = 0
              !ec_scont3 = 0
              !ec_scont4 = 0
              !ec_scont5 = 0
              !ec_scont6 = 0
              If Not CorpoCheckRiga(3, dttEC.Rows(dttEC.Rows.Count - 1)) Then
                .Delete()
                Return False
              End If

              If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
                .Delete()
                Return False
              End If

            End With

            'ricalcolo i totali del documento
            If CalcolaTotali() = False Then Return False

            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128673179165625000, "L'importo totale del documento è stato arrotondato. Proseguire con il salvataggio del documento?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If    'If NTSCDec(dPrezzoarr) <> NTSCDec(dttET.Rows(0)!et_totdoc) Then
        End If    'If (dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_ti ...
      End If    'If nArrotonda5Cent = -1 Then

      'eseguo i test pre salvataggio standard
      If Not TestPreSalvaSTD() Then Return False

      '------------------------------------
      'Controlla relativi a documento bloccato
      If bDocNonModificabile Then
        If bNonModificabileperPicking Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667188589375000, "Impossibile salvare il documento in quanto collegato ad un file di picking.")))
          Return False
        End If
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667188606562500, "Impossibile salvare il documento per blocco con password nell'apertura.")))
        Return False
      End If

      '------------------------------------
      'Non consente di salvare gli scarichi di produzione
      If dttET.Rows(0)!et_tipork.ToString = "U" Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667189062968750, "Impossibile salvare/stampare un documento di Scarico di produzione; aprire il corrispondente Carico di produzione per apportare delle modifiche.")))
        Return False
      End If

      '------------------------------------
      'Non consente di salvare gli scarichi di produzione
      If NTSCInt(dttET.Rows(0)!et_codpaga) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128674178512652500, "Indicare un codice di pagamento diverso da 0 prima di salvare.")))
        Return False
      End If

      '--------------------------------------------------------------------------------------------------------------
      '--- Se si tratta di una Nota di Prelievo ed è attiva l'opzione di registro che ne consente l'operazione di
      '--- Inserimento/Modifica/Cancellazione, salta il test/blocco/messaggio relativi
      '--------------------------------------------------------------------------------------------------------------
      If (dttET.Rows(0)!et_tipork.ToString = "W") And (bConsModifNoteAnteChiusuraMag = True) Then GoTo SaltaBlocco
      '--------------------------------------------------------------------------------------------------------------

      '------------------------------------
      'Non salva un doc. con data < a data ultimo agg. progressivi
      If bNew Then
        If NTSCDate(dttET.Rows(0)!et_datdoc) <= dtUlap Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734886976397839, "Impossibile salvare il documento in quanto la data del documento è precedente o uguale alla data ultimo aggiornamento progressivi di magazzino; è consentito solo ripristinare.")))
          Return False
        End If
      Else
        If NTSCDate(dttET.Rows(0)("et_datdoc", DataRowVersion.Original)) <= dtUlap Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734886999173839, "Impossibile salvare il documento in quanto la data del documento è precedente o uguale alla data ultimo aggiornamento progressivi di magazzino; è consentito solo ripristinare.")))
          Return False
        End If
      End If

SaltaBlocco:

      '------------------------------------
      'Sui doc. emessi la data trasporto non può essere anteriore alla data docuemnti
      If bDocEmesso And bNuovoDaImportExport = False Then
        If IsDate(dttET.Rows(0)!et_dtiniz) Then
          If NTSCDate(dttET.Rows(0)!et_dtiniz) < NTSCDate(dttET.Rows(0)!et_datdoc) Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128667192113593750, "Attenzione! la data inizio trasporto precede la data del documento. Procedere ugualmente?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      End If

      '------------------------------------
      'sui nuovi documenti controlla che se indicato il numero partita
      'sia indicato un anno valido
      If bNew And (dttET.Rows(0)!et_tipork.ToString = "L" Or dttET.Rows(0)!et_tipork.ToString = "J") Then
        If NTSCInt(dttET.Rows(0)!et_numpar) > 0 And NTSCInt(dttET.Rows(0)!et_annpar) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666571649843750, "Nei nuovi documenti ricevuti se si indica il numero partita è obbligatorio specificare un anno partita valido (compreso tra 1900 e 2099).")))
          Return False
        End If
      End If

      '----------------------------------------
      'fatture extracee: in testata è obbligatorio un codice di esenzione IVA, diversamente nelle spese di piede applicherebbe l'iva 
      'presa da peac
      If bDocEmesso = False Then
        oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_tipobf), strDittaCorrente, "TABTPBF", "N", "", dttTmp)
        If NTSCStr(dttTmp.Rows(0)!tb_fattextrc) = "S" Then
          If NTSCInt(dttET.Rows(0)!et_codese) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129461135723017578, "Con tipo bolla/fattura Extracee è obbligatorio indicare nella testata del documento un codice di esenzione IVA")))
            Return False
          Else
            dttTmp.Clear()
            oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_codese), strDittaCorrente, "TABCIVA", "N", "", dttTmp)
            If NTSCInt(dttTmp.Rows(0)!tb_aliq) <> 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129461136769726562, "Con tipo bolla/fattura Extracee è obbligatorio indicare nella testata del documento un codice di esenzione IVA")))
              Return False
            End If
          End If
          'NON DEVO MOVIMENTARE I PROTOCOLLI IVA
          If strAutoNumProt = "S" Then
            dttET.Rows(0)!et_nregiva = 0
            dttET.Rows(0)!et_numprot = 0
            dttET.Rows(0)!et_alfpro = " "
          End If
        End If
        dttTmp.Clear()
      End If    'If bDocEmesso = False Then
      '--------------------------------------------------------------------------------------------------------------
      '--- Controlli specifici in caso di documento di tipo 'Fattura Figurativa'
      '--------------------------------------------------------------------------------------------------------------
      If TestPreSalvaTestmagFatturaFigurativa() = False Then Return False
      '--------------------------------------------------------------------------------------------------------------
      'controllo articoli gestiti a commessa
      If Not bDisabilitaCheckCommesse Then
        dtrT = dttEC.Select("xxo_gescomm ='S' AND ec_commeca = 0")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734887129433839, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "| è gestito a commessa e non è indicato nessun numero di commessa")))
          Return False
        End If
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          dtrT = dttECIMP.Select("xxo_gescomm = 'S' AND ec_commeca = 0")
          If dtrT.Length > 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128526544088322000, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "| degli SCARICHI A PRODUZIONE è gestito a commessa e non è indicato nessun numero di commessa")))
            Return False
          End If
        End If
      End If    'If Not bDisabilitaCheckCommesse Then

      'Controllo se la causale di riga prevede l'inserimento del centro sulla riga
      If NTSCInt(dttET.Rows(0)!et_codcena) = 0 And CBool(lModuliSupDittaDitt And bsModSupCAE) = False And CBool(lModuliDittaDitt And bsModCI) = True Then
        If oCldDocu.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_causale), strDittaCorrente, "TABCAUM", "N", , dttTmp) Then
          If dttTmp.Rows.Count <> 0 Then
            If NTSCStr(dttTmp.Rows(0)!tb_testci) <> " " Then ' Nessun test CI
              'do il messaggio sono se sono presenti spese di piede
              If NTSCDec(dttET.Rows(0)!et_speacc) <> 0 Or NTSCDec(dttET.Rows(0)!et_speimb) <> 0 Or _
                 NTSCDec(dttET.Rows(0)!et_speinc) <> 0 Or NTSCDec(dttET.Rows(0)!et_bolli) <> 0 Or _
                 NTSCDec(dttET.Rows(0)!et_speaccv) <> 0 Or NTSCDec(dttET.Rows(0)!et_speimbv) <> 0 Or _
                 NTSCDec(dttET.Rows(0)!et_speincv) <> 0 Or NTSCDec(dttET.Rows(0)!et_bolliv) <> 0 Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129174621037656250, "La causale prevede l'inserimento del centro CA sulla testata (visto che sono presenti spese accessorie nel piede del documento).")))
                Return False
              End If
            End If
          End If
        End If
      End If

      '----------------------------------------
      'Controllo CONAI
      If Not TestPreSalvaTestmag_CheckConai() Then Return False

      '------------------------------------
      'controllo coerenza magazzini con causali di magazzino,
      'presenza dove serve di cod contropartie e cod. IVA e date competenza economica
      If Not TestPreSalvaTestmag_CheckContropartite() Then Return False

      '----------------------------------------
      'Controllo evasione note e ordini
      If Not TestPreSalvaTestmag_CheckEvasioneSaldo(dttET.Rows(0)!et_tipork.ToString, dttEC) Then Return False
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        If Not TestPreSalvaTestmag_CheckEvasioneSaldo("U", dttECIMP) Then Return False
        If Not TestPreSalvaTestmag_CheckEvasioneSaldo2() Then Return False
      End If

      If bConsentiEvasSuperioreTC And bModTCO Then
        If Not TestPreSalvaTestmag_CheckEvasioneSaldoTC() Then Return False
      End If
      If bSalvaRicalcolaDisimpegno Then Return True 'esco in anticipo: tanto ci ritornerò tra poco i restanti test verranno fatti al prossimo giro

      '----------------------------------------
      'Controlla eventuale blocco cliente
      If (Not bGnnpCheckFidoInsolu_NoBlocco OrElse strProgChiamante <> "BNORGNNP") AndAlso _
         (Not bGnbfCheckFidoInsolu_NoBlocco OrElse strProgChiamante <> "BNVEGNBF") Then
        If strContrFidoInsolinInsDoc = "S" AndAlso bNew AndAlso bDocEmesso Then
          If lConclpriv <> lContoCF Then
            If bEraBloccato Then
              CheckFidoInsol(True, NTSCInt(dttET.Rows(0)!et_conto), dttET, bOk)
            Else
              CheckFidoInsol(False, NTSCInt(dttET.Rows(0)!et_conto), dttET, bOk)
            End If

            If bOk Then
              'Ora se richiesto rileva il tipo di blocco presente in questo momento (dopo eventualmente la
              'routine fido/insoluti che blocca il soggetto
              If bNew Then
                If bRilevaBloccoDaAnagra Then
                  oCldBoll.ValCodiceDb(dttET.Rows(0)!et_conto.ToString, strDittaCorrente, "ANAGRA", "N", "", dttTmp)
                  dttET.Rows(0)!et_blocco = NTSCStr(dttTmp.Rows(0)!an_blocco)
                  dttTmp.Clear()
                End If
              End If
              If Not bInCreaDocDaGnor Then ' Se sono in fase di generazione ignoro il messaggio di errore
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128521109933568000, _
                                  "Blocco cliente : conferma del documento impossibile se non verrà sbloccato in anagrafica!")))
                bEraBloccato = True
                Return False
              End If
            End If
          End If    'If lConclpriv <> lContoCF Then
        End If    'If strContrFidoInsolinInsDoc = "S" And bNew And bDocEmesso Then
      End If

      '----------------------------------------
      'Controlli finali se castelletti sbloccati
      If NTSCStr(dttET.Rows(0)!et_flscdb) = "S" Then
        If Not TestPreSalvaTestmag_ControllaCastelletti() Then Return False
      End If

      '----------------------------------------
      'Controllo sotto costo finale (CheckSottoCostoFinale in vb6)
      bOk = True
      If ((strTestSottoCosto = "A" Or strTestSottoCosto = "P" Or strTestSottoCosto = "B") And bNew) Or _
          ((strTestSottoCostoModifica = "A" Or strTestSottoCostoModifica = "P" Or strTestSottoCostoModifica = "B") And bNew = False) Then
        'da fare
        'controllo fatto riga per riga
        If strTestSottoCostoQuando <> "B" And strTestSottoCostoQuando <> "C" Then
          'da non fare
          bOk = False
        Else
          'Esegue il test solo sui documenti A,B,C,E,W,F,S
          If dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_tipork.ToString = "B" Or _
             dttET.Rows(0)!et_tipork.ToString = "C" Or dttET.Rows(0)!et_tipork.ToString = "E" Or _
             dttET.Rows(0)!et_tipork.ToString = "W" Or dttET.Rows(0)!et_tipork.ToString = "F" Or _
             dttET.Rows(0)!et_tipork.ToString = "S" Then
            'da fare
          Else
            If (dttET.Rows(0)!et_tipork.ToString = "Z") And (bTestSottoCostoBolMovInt = True) Then
              'da fare
            End If
            'da non fare
            bOk = False
          End If
        End If
      Else
        'da non fare
        bOk = False
      End If

      If bOk Then
        If bNew Then strTestSottoCostoLOC = strTestSottoCosto Else strTestSottoCostoLOC = strTestSottoCostoModifica
        If strTestSottoPWD = "" Then strTestSottoPWD = UCase(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "Opzioni", ".", "TestSottoCostoPWD", "NTS", " ", "NTS"))
        'Test sottocosto
        If strTestSottoCostoQuando = "B" Or strTestSottoCostoQuando = "C" Then
          dtrT = dttEC.Select("ec_flkit <> 'A' AND ec_flkit <> 'T' ")
          For Each dtrTmp As DataRow In dtrT
            If TestSottoCostoSTD(dtrTmp!ec_codart.ToString, NTSCInt(dtrTmp!ec_fase), NTSCDec(dtrTmp!ec_quant), _
                              NTSCDec(dtrTmp!ec_prezzo), NTSCDate(dttET.Rows(0)!et_datdoc), NTSCInt(dttET.Rows(0)!et_valuta), _
                              NTSCDec(dtrTmp!ec_scont1), NTSCDec(dtrTmp!ec_scont2), NTSCDec(dtrTmp!ec_scont3), _
                              NTSCDec(dtrTmp!ec_scont4), NTSCDec(dtrTmp!ec_scont5), NTSCDec(dtrTmp!ec_scont6), _
                              NTSCDec(dttET.Rows(0)!et_scont1), NTSCDec(dttET.Rows(0)!et_scont2), _
                              NTSCDec(dttET.Rows(0)!et_scopag), dtrTmp!ec_flkit.ToString, strTestSottoPWD, _
                              strTestSottoCostoLOC, strTestSottoCostoTipo, strTestSottoCostoZero, _
                              strTestSottoCostoQuando, False, dTestSottoCostoRicaricoMinimo, _
                              bTestSottoCostoOscuraCosto, NTSCInt(dtrTmp!ec_riga), NTSCInt(dtrTmp!ec_codtpro), _
                              dtrTmp!ec_flprznet.ToString) = False Then
              Return False
            End If
          Next
        End If
      End If    'If bOk Then

      '----------------------------------------
      'Controllo costo carico finale
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        If Not TestPreSalvaTestmag_CheckCostoCaricoFinale() Then Return False
      End If

      '----------------------------------------
      'Controllo INTRASTAT
      If NTSCStr(dttET.Rows(0)!et_intra) <> "N" And NTSCInt(dttET.Rows(0)!et_codntra) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129458005650059218, "Se il documento deve movimentare l'archivio Intrastat la Natura transazione è obbligatoria")))
        Return False
      End If
      If NTSCStr(dttET.Rows(0)!et_intra) = "N" And NTSCInt(dttET.Rows(0)!et_codntra) <> 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129458006385010390, "Se il documento NON deve movimentare l'archivio Intrastat la Natura transazione deve essere uguale a 0")))
        Return False
      End If

      If NTSCStr(dttET.Rows(0)!et_intra) <> "N" Then
        If (NTSCInt(dttET.Rows(0)!et_codntra) > 0) And (CLN__STD.FRIENDLY = False) Then
          dtrT = dttEC.Select("ec_codart <> 'D' AND (ec_codnomc IS NULL OR ec_codnomc = '')")
          If dtrT.Length > 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734887215303839, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "|  non possiede il Codice nomenclatura combinata, obbligatorio per i movimenti IntraSTAT.")))
            Return False
          End If
        End If
        If NTSCStr(dttET.Rows(0)!et_intrarettif) <> "N" And NTSCInt(dttET.Rows(0)!et_meserif) <> 0 And NTSCInt(dttET.Rows(0)!et_trimrif) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129457995811397109, "Rettifiche intrastat: se indicato il mese da rettificare non deve essere indicato il trimestre (o viceversa)")))
          Return False
        End If
      End If    'If NTSCStr(dttET.Rows(0)!et_intra) <> "N" Then
      If NTSCStr(dttET.Rows(0)!et_intrarettif) = "N" Then
        dttET.Rows(0)!et_meserif = 0
        dttET.Rows(0)!et_trimrif = 0
        dttET.Rows(0)!et_annorif = 0
        dttET.Rows(0)!et_sezdogrif = 0
        dttET.Rows(0)!et_protrif = 0
        dttET.Rows(0)!et_sez3rif = 0
      End If
      If dttEC.Select("ec_codart <> 'D' AND substring(ec_codnomc, 1, 2) = 'S.'").Length > 0 And NTSCStr(dttET.Rows(0)!et_intra) <> "N" Then
        'intra servizi
        If NTSCInt(dttET.Rows(0)!et_anno) >= 2015 Then
          'dal 2015 non sono più obbligatori modalità di erogazione e modalità di incasso
          If NTSCStr(dttET.Rows(0)!et_paepag).Trim = "" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130693462436391594, "Intrastat servizi: il campo 'Paese di pagamento' è obbligatorio quando nel corpo del documento sono indicati dei codici di nomeclatura combinata relativi a servizi")))
            Return False
          End If
        Else
          If NTSCStr(dttET.Rows(0)!et_codmodi).Trim = "" Or _
                     NTSCStr(dttET.Rows(0)!et_coderog).Trim = "" Or _
                     NTSCStr(dttET.Rows(0)!et_paepag).Trim = "" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129457996945137343, "Intrastat servizi: i campi 'Modalità di incasso', 'Modalità di erogazione' e 'Paese di pagamento' sono obbligatori quando nel corpo del documento sono indicati dei codici di nomeclatura combinata relativi a servizi")))
            Return False
          End If
        End If
        'per il momento non sono gestite rettifiche di servizi: caso complicato 
        'per il fatto che bisogna stornare la riga presentata e farne una nuova se storno relativo ad altro periodo, 
        'mentre storno relativo a stesso periodo .... ancora peggio!!!
        If NTSCStr(dttET.Rows(0)!et_intrarettif) <> "N" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129458561122294922, "Non è possibile gestire le rettifiche intrastat di servizi con questo programma:" & vbCrLf & "i movimenti di rettifica non verranno estratti dal programma di estrazione dati intra da magazzino")))
        End If
      End If

      '----------------------------------------
      'Controllo lotto
      If Not TestPreSalvaTestmag_CheckLotto() Then Return False

      '----------------------------------------
      'Controllo articoli gestiti a ubicazione
      If Not TestPreSalvaTestmag_CheckUbicaz() Then Return False

      '----------------------------------------
      'Controllo matricole
      If Not TestPreSalvaTestmag_CheckMatricole() Then Return False

      '----------------------------------------
      'Controllo LAVCENT
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        If Not TestPreSalvaTestmag_CheckMMLavce() Then Return False
        If Not TestPreSalvaTestmag_CheckSequenzaQtaLavorate() Then Return False
        '--- Controllo sommatoria righe Scarichi collegati/Dettagli quantità
        If bModTCO Then
          'controlla che le sommatorie dei records di MOTRAIMPTC coincidano 
          'con le righe degli impegni collegati che hanno l'articolo gestito per taglie e colori
          If Not TestPreSalvaTestmag_CheckMMTRASCATC() Then Return False
        End If
      End If

      '----------------------------------------
      'Controllo acconti
      If Not TestPreSalvaTestmag_CheckAcconti() Then Return False

      '----------------------------------------
      'Controlla riemissione RF
      If Not TestPreSalvaTestmag_CheckRiemissione() Then Return False

      '----------------------------------------
      'Controllo esistenza finale
      If Not TestPreSalvaTestmag_CheckEsistFinale() Then Return False

      '----------------------------------------
      'controllo presenza di tutti i dati per gestire la Contabilità analitica duplice contabile
      If Not TestPreSalvaTestmag_CheckCa2() Then Return False

      '----------------------------------------
      'controlli modulo qualità
      If Not TestPreSalvaTestmag_CheckCollaudi() Then Return False

      '----------------------------------------
      'Controllo scadenze modificate
      If bModifCastScad Then
        If Not ApriScadenze() Then Return False
      End If
      'in vb6 lFlagModif
      If CBool(NTSCInt(dttET.Rows(0)!et_ccambiati) And bsVEBOLLmodifCastScad) Then
        If Not bModifCastScad Then dttET.Rows(0)!et_ccambiati = NTSCInt(dttET.Rows(0)!et_ccambiati) - bsVEBOLLmodifCastScad
      Else
        If bModifCastScad Then dttET.Rows(0)!et_ccambiati = NTSCInt(dttET.Rows(0)!et_ccambiati) + bsVEBOLLmodifCastScad
      End If

      '----------------------------------------
      'Controllo riferimenti al c/lav. sugli scarichi
      If Not bDisabilitaObblContoLavoro Then
        If Not TestPreSalvaTestmag_CheckContoLavoro() Then Return False
      End If

      '----------------------------------------
      '--- Controllo riferimenti alla bolla in c/to visione
      '----------------------------------------
      If TestPreSalvaTestmag_CheckContoVisione() = False Then Return False

      '-----------------------------------------
      'Controllo c/lav. per modifiche alle righe non ammesse
      If bNew = False Then
        If dttET.Rows(0)!et_tipork.ToString <> "W" Then
          If Not TestPreSalvaTestmag_CheckModifContoLavoro() Then Return False
        End If
      End If

      '-----------------------------------------
      'Controllo articoli KIT
      AggRifKit(dttET.Rows(0)!et_tipork.ToString)

      '-----------------------------------------
      'se ricevuta fiscale non totalmente incassata il cliente non deve essere il cliente privato
      With dttET.Rows(0)
        If dttET.Rows(0)!et_tipork.ToString = "F" And lContoCF = lConclpriv And _
           ((NTSCDec(!et_totdoc) + NTSCDec(!et_resto) - NTSCDec(!et_pagato) - NTSCDec(!et_pagato2) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag)) <> 0 Or (NTSCDec(!et_totdocv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov) - NTSCDec(!et_totomagv) <> 0)) Then
          If CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "RicFiscContoPrivNonInc", "0", " ", "0")) = False Then  ' NON DOCUMENTARE
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128672644901562500, _
                          "Non è possibile emettere una ricevuta fiscale non totalmente incassata ad un cliente privato." & vbCrLf & _
                          "Intestare il documento ad un cliente gestito a partite/scadenze")))
            Return False
          End If
        End If
      End With

      '----------------------------------------
      'Controlla se tutte le righe sono evase
      dttET.Rows(0)!et_flevas = "N"
      If dttET.Rows(0)!et_tipork.ToString = "W" Then
        If dttEC.Select("ec_nprflevas <> 'S'").Length = 0 Then
          dttET.Rows(0)!et_flevas = "S"
        End If
      End If

      '----------------------------------------
      'Controlla esistenza del numero documneto
      If bNew And bProgrCambiato And Not bNuovoDaImportExport Then
        If Not oCldBoll.CheckEsist(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                                   dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), bEsiste, strTipoRestituito) Then Return False
        If bEsiste Then
          ThrowRemoteEvent(New NTSEventArgs("", DescrTipork(strTipoRestituito) & oApp.Tr(Me, 128673485530156250, _
                           "serie '|" & dttET.Rows(0)!et_serie.ToString & "|', anno |" & _
                           NTSCInt(dttET.Rows(0)!et_anno) & "|, numero |" & NTSCInt(dttET.Rows(0)!et_numdoc) & _
                           "| già presente in archivio; utilizzare la funzione di menu 'Modifica tipo/numero documento', per attribuire un nuovo numero.")))
          Return False
        End If
      End If

      '--------------------------------------------------------------------------------------------------------------
      'solo documenti emessi
      'non faccio salvare (o chiedo conferma) se sono presenti articoli con artico.ar_tipo diversi (escludendo articoli descrittivi e ar_tipo = ' ' e ar_tipo = null)
      'Il tutto serve per poter differenziare, sulla base del DL n° 1 del 24/1/2012 (convertito con la legge n° 27 del 24/3/2012, e in vigore dal 24/10/2012), la vendita di PRODOTTI DETERIORABILI ENTRO O OLTRE 60ggi da parte dei produttori.. Per i primi il pagamento deve avvenire entro 30gg per i restanti entro 60gg pena interessi di mora maggiorati.
      '--------------------------------------------------------------------------------------------------------------
      If (strDataInibisciArticoliDiversi.Trim <> "") And (IsDate(strDataInibisciArticoliDiversi)) Then
        If NTSCDate(dttET.Rows(0)!et_datdoc) >= NTSCDate(strDataInibisciArticoliDiversi) Then
          Dim bPagamentoContanti As Boolean = False
          If nInibisciTipiArticoliDiversiTrannePagContanti = -1 Then bPagamentoContanti = VerificaCodicePagamentoContanti(NTSCInt(dttET.Rows(0)!et_codpaga))
          '--------------------------------------------------------------------------------------------------------------
          If (nInibisciTipiArticoliDiversi = -1 Or nInibisciTipiArticoliDiversi = 1) And Not bPagamentoContanti Then
            If bDocEmesso Then
              For Each dtrT1 As DataRow In dttEC.Rows
                If Not oCldBoll.ValCodiceDb(NTSCStr(dtrT1!ec_codart), strDittaCorrente, "ARTICO", "S", "", dttTmp) Then Return False
                If dttTmp.Rows.Count > 0 Then
                  If NTSCStr(dttTmp.Rows(0)(strNomeCampoArtico)).Trim <> "" And NTSCStr(dttTmp.Rows(0)!ar_stainv) = "S" Then
                    If strLastTipo <> "" And strLastTipo <> NTSCStr(dttTmp.Rows(0)(strNomeCampoArtico)).ToUpper Then
                      If bArticoliDiversiChiediConferma = False Then
                        Dim strIIf1 As String = IIf(NTSCStr(dtrT1!ec_descr).Trim <> "", " - ", "").ToString & NTSCStr(dtrT1!ec_descr).Trim
                        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129938211138583866, "Attenzione!" & vbCrLf & _
                          "Nella riga '|" & NTSCStr(dtrT1!ec_riga) & "|'" & vbCrLf & _
                          "è presente l'articolo '|" & _
                          NTSCStr(dtrT1!ec_codart) & "|'|" & strIIf1 & "|" & vbCrLf & _
                          "di tipologia (|" & strNomeCampoArtico & "|) --> '|" & NTSCStr(dttTmp.Rows(0)(strNomeCampoArtico)).Trim & "|'" & vbCrLf & _
                          "diversa dai precedenti (|'" & strLastTipo & "'|)." & vbCrLf & _
                          "Impossibile salvare.")))
                        Return False
                      Else
                        Dim strIIf1 As String = IIf(NTSCStr(dtrT1!ec_descr).Trim <> "", " - ", "").ToString & NTSCStr(dtrT1!ec_descr).Trim
                        evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 130054008009905964, _
                          "Attenzione!" & vbCrLf & _
                          "Nella riga '|" & NTSCStr(dtrT1!ec_riga) & "|'" & vbCrLf & _
                          "è presente l'articolo '|" & NTSCStr(dtrT1!ec_codart) & "|'|" & strIIf1 & "|" & vbCrLf & _
                          "di tipologia (|" & strNomeCampoArtico & "|) --> '|" & NTSCStr(dttTmp.Rows(0)(strNomeCampoArtico)).Trim & "|'" & vbCrLf & _
                          "diversa dai precedenti (|'" & strLastTipo & "'|)." & vbCrLf & _
                          "Procedere comunque con il salvataggio del documento?"))
                        ThrowRemoteEvent(evnt)
                        If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
                      End If
                    Else
                      strLastTipo = NTSCStr(dttTmp.Rows(0)(strNomeCampoArtico)).ToUpper
                    End If
                  End If
                End If
              Next
            End If
          End If    'If nInibisciTipiArticoliDiversi = -1 Then
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      '--- Al salvataggio di un nuovo documento ricevuto, se attiva l'opzione di registro:
      '--- BSVEBOLL\OPZIONI\ControllaRifPartireDocRicevuti
      '--- controlla se esiste un documento con stesso Tipo record, stesso Conto e stessi anno/serie/numero Partita
      '--- Nel caso chiede se proseguire o meno
      '--------------------------------------------------------------------------------------------------------------
      If (bNew = True) And (bDocEmesso = False) And _
         (bControllaRifPartireDocRicevuti = True) And _
         (NTSCInt(dttET.Rows(0)!et_annpar) <> 0) And _
         (NTSCInt(dttET.Rows(0)!et_numpar) <> 0) Then
        If oCldBoll.PartitaGiàEsistente(strDittaCorrente, dttET.Rows(0), dttTmp) = True Then
          strTmp = ""
          With dttTmp.Rows(0)
            If !an_descr1.Equals(DBNull.Value) = False Then
              If NTSCStr(!an_descr1).Trim <> "" Then strTmp = " - " & NTSCStr(!an_descr1).Trim
            End If
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, _
              oApp.Tr(Me, 130964790112040572, "Attenzione!" & vbCrLf & _
                "Esiste un altro documento di tipo:" & vbCrLf & _
                " . '|" & DecodificaTipoDocumento(NTSCStr(dttET.Rows(0)!et_tipork)) & "|'" & _
                " N° |" & NTSCStr(!tm_numdoc) & IIf(NTSCStr(!tm_serie).Trim <> "", "/" & NTSCStr(!tm_serie).Trim, "").ToString & "| del |" & NTSCStr(!tm_anno) & "|" & vbCrLf & _
                "intestato al conto |" & NTSCStr(dttET.Rows(0)!et_conto) & "|" & strTmp & "|" & vbCrLf & _
                "a parità di Anno (|" & NTSCStr(!tm_annpar) & "|)/Serie (|" & IIf(NTSCStr(!tm_alfpar).Trim = "", "spazio", NTSCStr(!tm_alfpar)).ToString & "|)/Numero Partita (|" & NTSCStr(!tm_numpar) & "|)." & vbCrLf & _
                "Confermare comunque l'inserimento del documento?"))
          End With
          dttTmp.Clear()
          dttTmp.Dispose()
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
        End If
        dttTmp.Clear()
        dttTmp.Dispose()
      End If
      '--------------------------------------------------------------------------------------------------------------
      'Se si è in inserimento di un nuovo documento e questo possiede la data anteriore
      'all'eventuale ultimo documento inserito a parità di tipo/anno/serie
      'chiede conferma prima di proseguire
      If bNew And bDisabilitaCheckDateAnteriori = False And bNuovoDaImportExport = False Then
        dtLastdoc = oCldBoll.GetDatdocLastDoc(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), _
                                              NTSCStr(dttET.Rows(0)!et_serie), strTmp, NTSCInt(dttET.Rows(0)!et_numdoc), _
                                              strDatdocOut1, strTiporkOut1)

        'strDatdocOut = data del documento immediatamente precedente (numero più basso)
        'strDatdocOut1 = data del documento immediatamente successivo (numero più alto)
        If dtLastdoc > NTSCDate(dttET.Rows(0)!et_datdoc) Then
          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 130433199356145391, "Attenzione!" & vbCrLf & _
                        "Esiste |" & DescrTipork(strTmp) & "| con numero ANTECEDENTE al documento che si vuole inserire" & vbCrLf & _
                        "(a parità di anno e serie), con data '|" & dtLastdoc.ToShortDateString & "|'," & vbCrLf & _
                        "successiva rispetto a quella di testata '|" & NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString & "|'." & vbCrLf & vbCrLf & _
                        "Confermare comunque l'inserimento del documento?"))
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
        End If

        If strDatdocOut1 <> "" Then
          If NTSCDate(strDatdocOut1) < NTSCDate(dttET.Rows(0)!et_datdoc) Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 130433199329532513, "Attenzione!" & vbCrLf & _
                          "Esiste |" & DescrTipork(strTiporkOut1) & "| con numero SUCCESSIVO al documento che si vuole inserire" & vbCrLf & _
                          "(a parità di anno e serie), con data '|" & NTSCDate(strDatdocOut1).ToShortDateString & "|'," & vbCrLf & _
                          "antecedente rispetto a quella di testata '|" & NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString & "|'." & vbCrLf & vbCrLf & _
                          "Confermare comunque l'inserimento del documento?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      End If

      '--------------------------------------------------------------------------------------------------------------
      '--- Controlla se esistono spese di piede
      '--- Se documento emesso, controlla che esista un codice Iva valido in tabella TABPEVE
      '--- Se documento ricevuto, controlla che esista un codice Iva valido in tabella TABPEAC
      '--------------------------------------------------------------------------------------------------------------
      With dttET.Rows(0)
        If (NTSCDec(!et_speacc) + NTSCDec(!et_speimb) + NTSCDec(!et_speinc) + NTSCDec(!et_bolli) + NTSCDec(!et_speaccv) + NTSCDec(!et_speimbv) + NTSCDec(!et_speincv) + NTSCDec(!et_bolliv)) <> 0 Then
          If bDocEmesso = True Then
            If (NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeveIvaInc3Fine) And nPeveIvaInc3 = 0) Or _
               (NTSCDate(dttET.Rows(0)!et_datdoc) >= NTSCDate(strPeveIvaInc3Fine) And NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeveIvaInc2Fine) And nPeveIvaInc2 = 0) Or _
               (NTSCDate(dttET.Rows(0)!et_datdoc) >= NTSCDate(strPeveIvaInc2Fine) And nPeveIvaInc = 0) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129296153374657049, "Attenzione!" & vbCrLf & _
                "Esitono delle spese di piede, mentre non è stato indicato un codice Iva valido alla data del documento in 'Personalizzazione Vendite'." & vbCrLf & _
                "Impossibile salvare il documento.")))
              Return False
            End If
          Else
            If (NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeacIvaInc3Fine) And nPeacIvaInc3 = 0) Or _
               (NTSCDate(dttET.Rows(0)!et_datdoc) >= NTSCDate(strPeacIvaInc3Fine) And NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeacIvaInc2Fine) And nPeacIvaInc2 = 0) Or _
               (NTSCDate(dttET.Rows(0)!et_datdoc) >= NTSCDate(strPeacIvaInc2Fine) And nPeacIvainc = 0) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129636574972998047, "Attenzione!" & vbCrLf & _
                "Esitono delle spese di piede, mentre non è stato indicato un codice Iva valido alla data del documento in 'Personalizzazione Acquisti'." & vbCrLf & _
                "Impossibile salvare il documento.")))
              Return False
            End If
          End If
        End If
      End With

      '------------------------------
      'se c'è il collegamento con NETPRO controllo che gli ordini inseriti nel documento non siano in evasione ed eventualmente avviso
      If Not NetProCheckOrdModifCanc(False) Then Return False

      'Modulo Dichiarazioni di intento:
      If CBool(lModuliSupDittaDitt And bsModSupDII) And bCollega_MG_DI And dttET.Rows(0)!et_tipork.ToString <> "Z" _
         And dttET.Rows(0)!et_tipork.ToString <> "W" Then
        'Eseguo la validazione solo se almeno uno dei 2 campi è compilato
        If NTSCInt(dttETC.Rows(0)!tm_dianno) <> 0 Or NTSCInt(dttETC.Rows(0)!tm_dinumero) <> 0 Then
          oCldBoll.ValCodiceDb(dttET.Rows(0)!et_conto.ToString, strDittaCorrente, "ANAGRA", "N", "", dttTmp)
          strTipo = NTSCStr(dttTmp.Rows(0)!an_tipo)
          dttTmp.Clear()
          If Not oCldBoll.TestDichint(strDittaCorrente, strTipo, NTSCInt(dttETC.Rows(0)!tm_dianno), NTSCInt(dttETC.Rows(0)!tm_dinumero)) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129636574972998147, "ATTENZIONE" & vbCrLf & _
                            "Dichiarazione di intento inesistente." & vbCrLf & _
                            "Impossibile salvare il documento.")))
            Return False
          Else
            If NTSCInt(dttET.Rows(0)!et_codese) = 0 Then
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 130433199329532524, _
                                      "ATTENZIONE" & vbCrLf & _
                                      "Il documento NON risulta in ESENZIONE nonostante abbia agganciata una Dichiarazione di intento." & vbCrLf & _
                                      "Confermare comunque l'inserimento del documento?"))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
            End If
          End If

          'IN NUOVO O MODIFICA E CI DEVE ESSERE UNA DICHIARAZIONE DI INTENTO INDICATA
          If Not oCldBoll.LeggiDatiPlafondDich(strDittaCorrente, strTipo, NTSCInt(dttETC.Rows(0)!tm_dianno), NTSCInt(dttETC.Rows(0)!tm_dinumero), _
                                               bCollega_MG_DI, bNoPlafondDich, dsDic) Then
            Return False
          End If
          If Not bNoPlafondDich Then
            dPlafondDic = NTSCDec(dsDic.Tables("DICHINT").Rows(0)!di_impmaxplaf)
            dPlafondUsatoCG = 0
            dPlafondUsatoMG = 0
            dPlafondUsato = 0
            For Each dtrRow As DataRow In dsDic.Tables("PRINOT").Rows
              If strTipo = "C" Then
                dSegno = -1
              Else
                dSegno = 1
              End If
              dPlafondUsatoCG += NTSCDec(dtrRow!pn_imponib) * dSegno
            Next
            bSaltacorrente = False
            For Each dtrRow As DataRow In dsDic.Tables("TESTMAG").Rows
              If NTSCStr(dttET.Rows(0)!et_tipork) = NTSCStr(dtrRow!tm_tipork) And _
                 NTSCInt(dttET.Rows(0)!et_anno) = NTSCInt(dtrRow!tm_anno) And _
                 NTSCStr(dttET.Rows(0)!et_serie) = NTSCStr(dtrRow!tm_serie) And _
                 NTSCInt(dttET.Rows(0)!et_numdoc) = NTSCInt(dtrRow!tm_numdoc) Then
                dTotdoc = NTSCDec(dttET.Rows(0)!et_totdoc)
                bSaltacorrente = True
              Else
                dTotdoc = NTSCDec(dtrRow!tm_totdoc)
              End If
              Select Case NTSCStr(dtrRow!tm_tipork)
                Case "A" '= fatture immediate emesse
                  dSegno = 1
                Case "B" '= D.D.T.emessi
                  dSegno = 1
                Case "C" '= corrispettivi emessi
                  dSegno = 1
                Case "D" '*  = fatture differite emesse
                  dSegno = 1
                Case "N" '= note di accredito emesse
                  dSegno = -1
                Case "£"  '*  = note di accredito differite emesse
                  dSegno = -1
                Case "E" '= note di addebito emessa
                  dSegno = 1
                Case "Z" '= documenti interni di magazzino
                  'NON POSSIBILE
                Case "T" '= carichi da produzione
                  dSegno = -1
                Case "U" '= scarichi da produzione (*)
                  'NON CONSIDERATI
                Case "M" '= D.D.T. ricevuti (esclusi resi c/lavoro)
                  dSegno = -1
                Case "L" '= fatture immediate ricevute
                  dSegno = -1
                Case "K" '*  = fatture differite ricevute
                  dSegno = -1
                Case "J" '= note daccredito ricevute
                  dSegno = 1
                Case "(" '*  = note daccredito differite ricevute
                  dSegno = 1
                Case "S" '= fatture/ricevute fiscali emessi
                  dSegno = 1
                Case "P" '*  = fatture/ricevute fiscali differite emesse
                  dSegno = 1
                Case "F" '= ricevute fiscali emesse
                  dSegno = 1
                Case "I" '= riemissioni ricevute fiscali
                  dSegno = 1
                Case "W" '= note di prelievo
                  'NON POSSIBILE
              End Select
              If strTipo = "C" Then
                'dSegno è ok 
              Else
                dSegno = dSegno * -1
              End If
              dPlafondUsatoMG += dTotdoc * dSegno
            Next

            If Not bSaltacorrente Then
              dTotdoc = NTSCDec(dttET.Rows(0)!et_totdoc)
              Select Case NTSCStr(dttET.Rows(0)!et_tipork)
                Case "A" '= fatture immediate emesse
                  dSegno = 1
                Case "B" '= D.D.T.emessi
                  dSegno = 1
                Case "C" '= corrispettivi emessi
                  dSegno = 1
                Case "D" '*  = fatture differite emesse
                  dSegno = 1
                Case "N" '= note di accredito emesse
                  dSegno = -1
                Case "£"  '*  = note di accredito differite emesse
                  dSegno = -1
                Case "E" '= note di addebito emessa
                  dSegno = 1
                Case "Z" '= documenti interni di magazzino
                  'NON POSSIBILE
                Case "T" '= carichi da produzione
                  dSegno = -1
                Case "U" '= scarichi da produzione (*)
                  'NON CONSIDERATI
                Case "M" '= D.D.T. ricevuti (esclusi resi c/lavoro)
                  dSegno = -1
                Case "L" '= fatture immediate ricevute
                  dSegno = -1
                Case "K" '*  = fatture differite ricevute
                  dSegno = -1
                Case "J" '= note daccredito ricevute
                  dSegno = 1
                Case "(" '*  = note daccredito differite ricevute
                  dSegno = 1
                Case "S" '= fatture/ricevute fiscali emessi
                  dSegno = 1
                Case "P" '*  = fatture/ricevute fiscali differite emesse
                  dSegno = 1
                Case "F" '= ricevute fiscali emesse
                  dSegno = 1
                Case "I" '= riemissioni ricevute fiscali
                  dSegno = 1
                Case "W" '= note di prelievo
                  'NON POSSIBILE
              End Select
              If strTipo = "C" Then
                'dSegno è ok 
              Else
                dSegno = dSegno * -1
              End If
              dPlafondUsatoMG += dTotdoc * dSegno
            End If

            dPlafondUsato = dPlafondUsatoCG + dPlafondUsatoMG
            dPercUsoPlafond = ArrDbl(((dPlafondUsato / dPlafondDic) * 100), 2)
            If dPercUsoPlafond > dPercControlloImportoDich Then
              If dPercUsoPlafond > 100 Then
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 130433199329532514, _
                                        "ATTENZIONE" & vbCrLf & _
                                        "Il presente documento provoca uno SFORAMENTO nel plafond " & _
                                        "della dichiarazione di intento." & vbCrLf & _
                                        "Plafond dichiarazione:  " & dPlafondDic & vbCrLf & _
                                        "Plafond utilizzato:     " & dPlafondUsato & vbCrLf & _
                                        "da CG:                  " & dPlafondUsatoCG & vbCrLf & _
                                        "da MG:                  " & dPlafondUsatoMG & vbCrLf & _
                                        "Plafond residuo:        " & (dPlafondDic - dPlafondUsato) & vbCrLf & _
                                        "Confermare comunque l'inserimento del documento?"))
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
              Else
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 130433199329532523, _
                                        "ATTENZIONE" & vbCrLf & _
                                        "% Utilizzo plafond della dichiarazione di intento," & vbCrLf & _
                                        "superiore alla soglia di monitoraggio impostata." & vbCrLf & _
                                        "Plafond dichiarazione:  " & dPlafondDic & vbCrLf & _
                                        "Plafond utilizzato:     " & dPlafondUsato & vbCrLf & _
                                        "da CG:                  " & dPlafondUsatoCG & vbCrLf & _
                                        "da MG:                  " & dPlafondUsatoMG & vbCrLf & _
                                        "Plafond residuo:        " & (dPlafondDic - dPlafondUsato) & vbCrLf & _
                                        "% Utilizzo plafond:     " & dPercUsoPlafond))
                ThrowRemoteEvent(evnt)
              End If
            End If
          End If
        Else
          'Nessuna dich. agganciata
          If NTSCInt(dttET.Rows(0)!et_codese) <> 0 And IsSoggettoconDichiarazioni(NTSCInt(dttET.Rows(0)!et_conto)) Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 130433199329532515, _
                                    "ATTENZIONE" & vbCrLf & _
                                    "Il documento risulta in ESENZIONE ma non ha agganciata una Dichiarazione di intento." & vbCrLf & _
                                    "Confermare comunque l'inserimento del documento?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      End If

      '--------------------------------------------------------------------------------------------------------------
      If dttET.Rows(0)!et_codport.ToString = "" Then dttET.Rows(0)!et_codport = " "
      '--------------------------------------------------------------------------------------------------------------
      If TestPreSalvaTestmag_CheckRighePrezzoAZero() = False Then Return False
      '--------------------------------------------------------------------------------------------------------------
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
      Return False
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmagFatturaFigurativa() As Boolean
    Dim oDttgr As CLEGROUPBY = Nothing
    Dim dttGr As New DataTable

    Try
      '--------------------------------------------------------------------------------------------------------------
      '--- Se il documento NON è di tipo 'Fattura Figurativa', restituisce 'True'
      '--------------------------------------------------------------------------------------------------------------
      If oCldBoll.IsFatturaFigurativa(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), _
        NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie)) = False Then Return True
      '--------------------------------------------------------------------------------------------------------------
      '--- Controlla che tutte le righe del corpo NON evadino Ordini/Impegni/Note di Prelievo
      '--------------------------------------------------------------------------------------------------------------
      If dttEC.Select("ec_ornum > 0 OR ec_npnum > 0").Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130619076903325622, "Attenzione!" & vbCrLf & _
          "Il documento che si intende salvare è di tipo:" & vbCrLf & _
          " . 'Fattura Figurativa'" & vbCrLf & _
          "pertanto non è possibile evadere Ordini/Impegni/Note di Prelievo.")))
        Return False
      End If
      '--------------------------------------------------------------------------------------------------------------
      '--- Controlla che tutte le causali di riga siano 'Nulle'
      '--------------------------------------------------------------------------------------------------------------
      oDttgr = New CLEGROUPBY
      If oDttgr.NTSGroupBy(dttEC, dttGr, "ec_causale", "ec_causale <> 0", "ec_causale") = True Then
        For i As Integer = 0 To (dttGr.Rows.Count - 1)
          If oCldBoll.IsCausaleNulla(NTSCInt(dttGr.Rows(i)!ec_causale)) = False Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130619076936890518, "Attenzione!" & vbCrLf & _
              "Il documento che si intende salvare è di tipo:" & vbCrLf & _
              " . 'Fattura Figurativa'" & vbCrLf & _
              "pertanto la causale indicata sulle righe NON deve movimentare i progressivi di carico/scarico e valorizzazione." & vbCrLf & _
              "Impostare il campo 'Esistenza attuale' a '(no)'," & vbCrLf & _
              "nel programma che gestisce le 'Causali di Magazzino'.")))
            Return False
          End If
        Next
      End If
      '--------------------------------------------------------------------------------------------------------------
      '--- Il documento deve essere totalmente incassato
      '--------------------------------------------------------------------------------------------------------------
      With dttET.Rows(0)
        If (NTSCDec(!et_totdoc) - NTSCDec(!et_pagato) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag) <> 0) Or _
           (NTSCDec(!et_totdocv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov) - NTSCDec(!et_totomagv) <> 0) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130619127824693248, "Attenzione!" & vbCrLf & _
            "Il documento che si intende salvare è di tipo:" & vbCrLf & _
            " . 'Fattura Figurativa'" & vbCrLf & _
            "pertanto deve essere totalmente incassato.")))
          Return False
        End If
      End With
      '--------------------------------------------------------------------------------------------------------------
      Return True
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      Return False
    End Try
  End Function

  Public Overridable Function TestPreSalvaTestmag_CheckCostoCaricoFinale() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim i As Integer = 0
    Dim bMessaggio As Boolean = False
    Dim dPrezzo1Out As Decimal = 0
    Dim dPrezzo2Out As Decimal = 0
    Dim dValoreRiga As Decimal = 0
    Dim dQuantitaRiga As Decimal = 0
    Dim dPrezzoCalcolato As Decimal = 0
    Dim strMsg As String = ""
    Dim dDiffValore As Decimal = 0
    Dim evnt As NTSEventArgs = Nothing
    Dim strTmp1 As String = ""
    Try
      If bTestCostoCaricoFinale = False Then Return True

      '--------------------------
      'Apre un recordset solo su quelle righe che hanno l'articolo con tipoopz = "O"
      dtrT = dttEC.Select(IIf(Not bTestCostoCaricoAncheSL, "xxo_tipoopz = 'O'", "").ToString, "ec_riga")
      For i = 0 To dtrT.Length - 1
        bMessaggio = False
        If dtrT(i)!ec_umprz.ToString <> "S" Then
          '--- Se la quantità è = 0 salta alla prossima riga
          If NTSCDec(dtrT(i)!ec_quant) = 0 Then GoTo SaltaRiga
        Else
          '--- Se il numero colli è = 0 salta alla prossima riga
          If NTSCDec(dtrT(i)!ec_colli) = 0 Then GoTo SaltaRiga
        End If
        dValoreRiga = NTSCDec(dtrT(i)!ec_valore)
        dQuantitaRiga = NTSCDec(dtrT(i)!ec_quant)
        dPrezzo1Out = 0
        dPrezzo2Out = 0


        SettaCondCommerciali_IstanziaNTSCondCommerciali()
        oCondCommerciali.bCalcolaPrezzo = True
        With oCondCommerciali.Input
          .strDitta = strDittaCorrente
          .strCodart = NTSCStr(dtrT(i)!ec_codart)
          .strUnmis = dtrT(i)!ec_unmis.ToString
          .strUmp = dtrT(i)!ec_ump.ToString
          .nFase = NTSCInt(dtrT(i)!ec_fase)
          .strTipoval = "P"
          .bConspromo = True
          .dtDatdoc = NTSCDate(dttET.Rows(0)!et_datdoc)
          .dColli = NTSCDec(dtrT(i)!ec_colli)
          .dQuant = NTSCDec(dtrT(i)!ec_quant)
          .bConsideraPrezziUnmis = True
          .bPrezziPerUnmis = (dtrT(i)!ec_umprz.ToString = "S")
        End With

        If nTestCostoCaricoListino1 <> 0 Then
          oCondCommerciali.Input.nListino = nTestCostoCaricoListino1
          CType(oCleComm, CLELBMENU).CercaCondCommerciali(oCondCommerciali)
          dPrezzo1Out = oCondCommerciali.OutputPrezzo.dPrezzo
        End If
        If nTestCostoCaricoListino2 <> 0 Then
          oCondCommerciali.Input.nListino = nTestCostoCaricoListino2
          CType(oCleComm, CLELBMENU).CercaCondCommerciali(oCondCommerciali)
          dPrezzo2Out = oCondCommerciali.OutputPrezzo.dPrezzo
        End If

        If dtrT(i)!ec_umprz.ToString = "S" Then
          dPrezzoCalcolato = ArrDbl(NTSCDec(dtrT(i)!ec_valore) / NTSCDec(dtrT(i)!ec_colli) * NTSCDec(dtrT(i)!ec_perqta), oCldBoll.TrovaNdecSuPrzUn(0))
        Else
          dPrezzoCalcolato = ArrDbl(NTSCDec(dtrT(i)!ec_valore) / NTSCDec(dtrT(i)!ec_quant) * NTSCDec(dtrT(i)!ec_perqta), oCldBoll.TrovaNdecSuPrzUn(0))
        End If

        'Che tipo di controllo è da fare?: SUPERIORE (default) o INFERIORE (su opzione)
        If bTestCostoCaricoInferiore Then
          'Determina lo scarto in base alla opzione di registro
          dDiffValore = 0
          If dTestCostoCaricoPercDiff <> 0 Then
            dDiffValore = ArrDbl((dPrezzoCalcolato * dTestCostoCaricoPercDiff) / 100, oCldBoll.TrovaNdecSuPrzUn(0))
          End If
          If nTestCostoCaricoListino1 > 0 Then
            If ((dPrezzoCalcolato - dDiffValore) < dPrezzo1Out) Then bMessaggio = True
          End If
          If nTestCostoCaricoListino2 > 0 Then
            If ((dPrezzoCalcolato - dDiffValore) < dPrezzo2Out) Then bMessaggio = True
          End If
        Else
          'caso default
          If (dPrezzo1Out + dPrezzo2Out) = 0 Then
            bMessaggio = True
          Else
            If nTestCostoCaricoListino1 > 0 Then
              If (dPrezzoCalcolato > dPrezzo1Out) And (dPrezzo1Out <> 0) Then bMessaggio = True
            End If
            If nTestCostoCaricoListino2 > 0 Then
              If (dPrezzoCalcolato > dPrezzo2Out) And (dPrezzo2Out <> 0) Then bMessaggio = True
            End If
            If ((nTestCostoCaricoListino1 + nTestCostoCaricoListino2) > 0) And ((dPrezzo1Out + dPrezzo2Out) = 0) Then
              bMessaggio = True
            End If
          End If
        End If

        If bMessaggio = True Then
          strTmp1 = IIf(bTestCostoCaricoInferiore, oApp.Tr(Me, 128667349779062500, "inferiore"), oApp.Tr(Me, 128667349923437500, "superiore")).ToString

          If (nTestCostoCaricoListino1 > 0) And (nTestCostoCaricoListino2 > 0) Then
            strMsg = oApp.Tr(Me, 128667359428906250, "Attenzione!" & vbCrLf & _
                      "Il costo di carico per l'articolo '|" & dtrT(i)!ec_codart.ToString & "|' prezzo: |" & dPrezzoCalcolato.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| nella riga '|" & dtrT(i)!ec_riga.ToString & "|'" & vbCrLf & _
                      "è |" & strTmp1 & "| al listino '|" & NTSCStr(nTestCostoCaricoListino1) & "|' prezzo: |" & dPrezzo1Out.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| e/o al listino '|" & NTSCStr(nTestCostoCaricoListino2) & "|' prezzo: |" & dPrezzo2Out.ToString(oApp.FormatPrzUn) & "|." & vbCrLf & vbCrLf & _
                      "Continuare il controllo?")
          End If
          If (nTestCostoCaricoListino1 > 0) And (nTestCostoCaricoListino2 = 0) Then
            strMsg = oApp.Tr(Me, 128667359412187500, "Attenzione!" & vbCrLf & _
                      "Il costo di carico per l'articolo '|" & dtrT(i)!ec_codart.ToString & "|' prezzo: |" & dPrezzoCalcolato.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| nella riga '|" & dtrT(i)!ec_riga.ToString & "|'" & vbCrLf & _
                      "è |" & strTmp1 & "| al listino '|" & NTSCStr(nTestCostoCaricoListino1) & "|' prezzo: |" & dPrezzo1Out.ToString(oApp.FormatPrzUn) & "|." & vbCrLf & vbCrLf & _
                      "Continuare il controllo?")
          End If
          If (nTestCostoCaricoListino1 = 0) And (nTestCostoCaricoListino2 > 0) Then
            strMsg = oApp.Tr(Me, 128667359399531250, "Attenzione!" & vbCrLf & _
                      "Il costo di carico per l'articolo '|" & dtrT(i)!ec_codart.ToString & "|' prezzo: |" & dPrezzoCalcolato.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| nella riga '|" & dtrT(i)!ec_riga.ToString & "|'" & vbCrLf & _
                      "è |" & strTmp1 & "| al listino '|" & NTSCStr(nTestCostoCaricoListino2) & "|' prezzo: |" & dPrezzo2Out.ToString(oApp.FormatPrzUn) & "|." & vbCrLf & vbCrLf & _
                      "Continuare il controllo?")
          End If
          If (nTestCostoCaricoListino1 = 0) And (nTestCostoCaricoListino2 = 0) Then
            strMsg = oApp.Tr(Me, 128667359184375000, "Attenzione!" & vbCrLf & _
                      "Il costo di carico per l'articolo '|" & dtrT(i)!ec_codart.ToString & "|' prezzo: |" & dPrezzoCalcolato.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| nella riga '|" & dtrT(i)!ec_riga.ToString & "|'" & vbCrLf & _
                      "è |" & strTmp1 & "| al listino '|" & NTSCStr(nTestCostoCaricoListino1) & "|' prezzo: |" & dPrezzo1Out.ToString(oApp.FormatPrzUn) & vbCrLf & _
                      "| e al listino '|" & NTSCStr(nTestCostoCaricoListino2) & "|' prezzo: |" & dPrezzo2Out.ToString(oApp.FormatPrzUn) & "|." & vbCrLf & vbCrLf & _
                      "Continuare il controllo?")
          End If

          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNOCANC, strMsg)
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then
            Return True
          End If
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_CANCEL Then
            Return False
          End If
        End If
SaltaRiga:
      Next    'For i = 0 To dtrT.Length - 1

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckLotto() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim oDttgr As CLEGROUPBY = Nothing
    Dim dttGr As New DataTable
    Dim dttGr2 As New DataTable
    Dim i As Integer = 0
    Dim strCosa As String = ""
    Dim dEsist As Decimal = 0
    Dim dPrenot As Decimal = 0
    Dim dDisp As Decimal = 0
    Try
      If bDisabilitaCheckLotti Then Return True

      '-----------------------------------
      'Controlla se sono corretti i n° di lotto su MMTRANS
      'no se fattura proforma
      If Not (dttET.Rows(0)!et_proforma.ToString = "S" And dttET.Rows(0)!et_tipork.ToString = "A") Then
        dtrT = dttEC.Select("ec_lotto = 0 and xxo_geslotti = 'S'")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667361031250000, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "|  è gestito a lotti e non è indicato nessun numero di lotto.")))
          Return False
        End If
      End If

      '-----------------------------------
      'Controlla se sono corretti i n° di lotto su MMTRASCA
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        dtrT = dttECIMP.Select("ec_lotto = 0 and xxo_geslotti = 'S'")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667365210156250, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "|  degli SCARICHI DA PRODUZIONE (associata alla riga |" & dtrT(0)!ec_prriga.ToString & "| dei CARICHI DA PRODUZIONE) è gestito a lotti e non è indicato nessun numero di lotto.")))
          Return False
        End If
      End If

      '-----------------------------------
      'Controllo esistenza lotti
      If bCheckLottiInScarico And bNew Then
        oDttgr = New CLEGROUPBY
        Dim strNoEvasioneNote As String = ""
        If strCheckLottiInScaricoCome = "D" Then strNoEvasioneNote = " AND ec_npnum = 0 "
        'se sto evadendo una nota di prelievo vuol dire che avevo già accantonato la merce e non devo controllarla nuovamente
        If dttET.Rows(0)!et_tipork.ToString <> "T" Then
          '--------------------------
          'Riporta il consumo dei lotti sul magazzino 1
          If Not oDttgr.NTSGroupBy(dttEC, dttGr, _
                        "ec_codart, ec_fase, ec_magaz, xxo_lottox, ec_lotto, Sum(ec_quant) as xx_quant, Min(ec_riga) as xx_riga, Min(ec_riga) as xx_rigascar", _
                        "xxo_esist < 0 AND xxo_geslotti = 'S' AND ec_lotto <> 0 " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz, xxo_lottox, ec_lotto") Then
            Return False
          End If

          '-------------------------
          'Riporta il consumo dei lotti sul magazzino 2
          '(tanto non è mai uguale il magazzino 1 e 2).
          If Not oDttgr.NTSGroupBy(dttEC, dttGr2, _
                        "ec_codart, ec_fase, ec_magaz2, xxo_lottox, ec_lotto, Sum(ec_quant) as xx_quant, Min(ec_riga) as xx_riga, Min(ec_riga) as xx_rigascar", _
                        "xxo_esist2 < 0 AND xxo_geslotti = 'S' AND ec_lotto <> 0 AND ec_magaz2 > 0 " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz2, xxo_lottox, ec_lotto") Then
            Return False
          Else
            dttGr2.Columns("ec_magaz2").ColumnName = "ec_magaz"
          End If

          For i = 0 To dttGr2.Rows.Count - 1
            dttGr.ImportRow(dttGr2.Rows(i))
          Next
          dttGr.AcceptChanges()

        Else
          '----------------------------
          'Riporta il consumo dei lotti sul magazzino 1
          If Not oDttgr.NTSGroupBy(dttECIMP, dttGr, _
                        "ec_codart, ec_fase, ec_magaz, xxo_lottox, ec_lotto, Sum(ec_quant) as xx_quant, Min(ec_prriga) as xx_riga, min(ec_riga) as xx_rigascar", _
                        "xxo_esist < 0 AND xxo_geslotti = 'S' AND ec_lotto <> 0 " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz, xxo_lottox, ec_lotto") Then
            Return False
          End If
        End If    'If dttET.Rows(0)!et_tipork.ToString <> "T" Then

        '-----------------------------
        'Ora fa il controllo su LOTCPRO, in modo differenziato tra Note di prelievo
        '(disponibilità netta) e Documenti (esistenza)
        If dttET.Rows(0)!et_tipork.ToString = "W" OrElse strCheckLottiInScaricoCome = "D" Then
          strCosa = oApp.Tr(Me, 128734887286283839, "disponibilità netta")
        Else
          strCosa = oApp.Tr(Me, 128734887391115839, "quantità esistente")
        End If
        Dim strIf As String
        For i = 0 To dttGr.Rows.Count - 1
          With dttGr.Rows(i)
            strIf = oApp.Tr(Me, 129078750199042495, "(riga |" & NTSCInt(!xx_rigascar).ToString & "| dello SCARICO DI PRODUZIONE)")
            dEsist = CType(oCleComm, CLELBMENU).TrovaEsistDaXpro(strDittaCorrente, !ec_codart.ToString, _
                                                NTSCInt(!ec_magaz), 0, NTSCInt(!ec_lotto), NTSCInt(!ec_fase), _
                                                "", 0, 0, dPrenot)
            If strCheckLottiInScaricoCome = "D" OrElse dttET.Rows(0)!et_tipork.ToString = "W" Then
              dDisp = ArrDbl(dEsist - dPrenot, 3)
            Else
              dDisp = dEsist
            End If
            If ArrDbl(NTSCDec(!xx_quant), 3) > dDisp Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667379321093750, _
                      "La |" & strCosa & "| per il lotto |'" & NTSCStr(!xxo_lottox) & "'| dell'articolo |" & _
                      !ec_codart.ToString & "| (fase |" & NTSCInt(!ec_fase).ToString & "|) nel magazzino |" & _
                      NTSCInt(!ec_magaz).ToString & "| (|" & dDisp.ToString(oApp.FormatQta) & _
                      "|) è inferiore alla quantità che sta per essere scaricata (|" & _
                      NTSCDec(!xx_quant).ToString(oApp.FormatQta) & "|) nella riga |" & _
                      NTSCInt(!xx_riga).ToString & "| del corpo |" & _
                      IIf(dttET.Rows(0)!et_tipork.ToString = "T", strIf, "").ToString & "|")))
              Return False
            End If
          End With
        Next    'For i = 0 To dttGr.Rows.Count - 1
      End If    'If bCheckLottiInScarico And bNew Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttGr2.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckUbicaz() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim oDttgr As CLEGROUPBY = Nothing
    Dim dttGr As New DataTable
    Dim dttGr2 As New DataTable
    Dim i As Integer = 0
    Dim strCosa As String = ""
    Dim dEsist As Decimal = 0
    Dim dPrenot As Decimal = 0
    Dim dDisp As Decimal = 0
    Try
      If bDisabilitaCheckUbicaz Then Return True

      '-----------------------------------
      'Controlla se sono corrette le ubicazioni su MMTRANS
      'no se fattura proforma
      If Not (dttET.Rows(0)!et_proforma.ToString = "S" And dttET.Rows(0)!et_tipork.ToString = "A") Then
        dtrT = dttEC.Select("(xxo_gesubic = 'S' AND ec_ubicaz = ' ') OR (xxo_gesubic = 'N' AND ec_ubicaz <> ' ')")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667399665625000, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "| o è gestito a ubicazioni e non è indicata nessuna ubicazione valida, oppure non è gestito a ubicazioni ed è stata inserita un'ubicazione.")))
          Return False
        End If
      End If

      '-----------------------------------
      'Controlla se sono corrette le ubicazioni su MMTRASCA
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        dtrT = dttECIMP.Select("(xxo_gesubic = 'S' AND ec_ubicaz = ' ') OR (xxo_gesubic = 'N' AND ec_ubicaz <> ' ')")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667399687656250, "L'articolo |" & UCase(NTSCStr(dtrT(0)!ec_codart)) & "| nella riga |" & dtrT(0)!ec_riga.ToString & "|  degli SCARICHI DA PRODUZIONE (associata alla riga |" & dtrT(0)!ec_prriga.ToString & "| dei CARICHI DA PRODUZIONE) è gestito a ubicazioni e non è indicata nessuna ubicazione valida, oppure non è gestito a ubicazioni ed è stata inserita un'ubicazione.")))
          Return False
        End If
      End If

      '-----------------------------------
      'Controllo esistenza ubicazioni
      If nCheckUbicazInScarico <> 0 And bNew Then
        oDttgr = New CLEGROUPBY
        Dim strNoEvasioneNote As String = ""
        If strCheckLottiInScaricoCome = "D" Then strNoEvasioneNote = " AND ec_npnum = 0 "
        If dttET.Rows(0)!et_tipork.ToString <> "T" Then
          '--------------------------
          'Riporta il consumo delle ubicazioni sul magazzino 1
          If Not oDttgr.NTSGroupBy(dttEC, dttGr, _
                        "ec_codart, ec_fase, ec_magaz, ec_ubicaz, Sum(ec_quant) as xx_quant, Min(ec_riga) as xx_riga, Min(ec_riga) as xx_rigascar", _
                        "xxo_esist < 0 AND xxo_gesubic = 'S' AND ec_ubicaz <> ' ' " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz, ec_ubicaz") Then
            Return False
          End If

          '-------------------------
          'Riporta il consumo delle ubicazioni sul magazzino 2
          '(tanto non è mai uguale il magazzino 1 e 2).
          If Not oDttgr.NTSGroupBy(dttEC, dttGr2, _
                        "ec_codart, ec_fase, ec_magaz2, ec_ubicaz, Sum(ec_quant) as xx_quant, Min(ec_riga) as xx_riga, Min(ec_riga) as xx_rigascar", _
                        "xxo_esist2 < 0 AND xxo_gesubic = 'S' AND ec_ubicaz <> ' ' AND ec_magaz2 > 0 " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz2, ec_ubicaz") Then
            Return False
          Else
            dttGr2.Columns("ec_magaz2").ColumnName = "ec_magaz"
          End If

          For i = 0 To dttGr2.Rows.Count - 1
            dttGr.ImportRow(dttGr2.Rows(i))
          Next
          dttGr.AcceptChanges()

        Else
          '----------------------------
          'Riporta il consumo dei lotti sul magazzino 1
          If Not oDttgr.NTSGroupBy(dttECIMP, dttGr, _
                        "ec_codart, ec_fase, ec_magaz, ec_ubicaz, Sum(ec_quant) as xx_quant, Min(ec_prriga) as xx_riga, min(ec_riga) as xx_rigascar", _
                        "xxo_esist < 0 AND xxo_gesubic = 'S' AND ec_ubicaz <> ' ' " & strNoEvasioneNote, _
                        "ec_codart, ec_fase, ec_magaz, ec_ubicaz") Then
            Return False
          End If
        End If    'If dttET.Rows(0)!et_tipork.ToString <> "T" Then

        '-----------------------------
        'Ora fa il controllo su LOTCPRO, in modo differenziato tra Note di prelievo
        '(disponibilità netta) e Documenti (esistenza)
        If dttET.Rows(0)!et_tipork.ToString = "W" OrElse strCheckUbicazInScaricoCome = "D" Then
          strCosa = oApp.Tr(Me, 128667375226406250, "disponibilità netta")
        Else
          strCosa = oApp.Tr(Me, 128667375317031250, "quantità esistente")
        End If
        Dim strIf As String
        For i = 0 To dttGr.Rows.Count - 1
          With dttGr.Rows(i)
            strIf = oApp.Tr(Me, 129078751165954623, "(riga |" & NTSCInt(!xx_rigascar).ToString & "| dello SCARICO DI PRODUZIONE)")
            dEsist = CType(oCleComm, CLELBMENU).TrovaEsistDaXpro(strDittaCorrente, !ec_codart.ToString, _
                                                NTSCInt(!ec_magaz), 0, 0, NTSCInt(!ec_fase), _
                                                !ec_ubicaz.ToString, 0, 0, dPrenot)
            If dttET.Rows(0)!et_tipork.ToString = "W" OrElse strCheckUbicazInScaricoCome = "D" Then
              dDisp = ArrDbl(dEsist - dPrenot, 3)
            Else
              dDisp = dEsist
            End If
            If ArrDbl(NTSCDec(!xx_quant), 3) > dDisp Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667395757031250, _
                      "La |" & strCosa & "| per l'ubicazione |" & !ec_ubicaz.ToString & "| dell'articolo |" & _
                      !ec_codart.ToString & "| (fase |" & NTSCInt(!ec_fase).ToString & "|) nel magazzino |" & _
                      NTSCInt(!ec_magaz).ToString & "| (|" & dDisp.ToString(oApp.FormatQta) & _
                      "|) è inferiore alla quantità che sta per essere scaricata (|" & _
                      NTSCDec(!xx_quant).ToString(oApp.FormatQta) & "|) nella riga |" & _
                      NTSCInt(!xx_riga).ToString & "| del corpo |" & _
                      IIf(dttET.Rows(0)!et_tipork.ToString = "T", strIf, "").ToString & "|")))
              Return False
            End If
          End With
        Next    'For i = 0 To dttGr.Rows.Count - 1
      End If    'If bCheckLottiInScarico And bNew Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttGr2.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckMatricole() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim i As Integer = 0
    Dim l As Integer = 0
    Dim dQuant As Decimal = 0
    Try
      If bDisabilitaCheckMatricole Then Return True

      'Non fa il controllo se è una fattura immediata proforma
      If dttET.Rows(0)!et_tipork.ToString = "A" And dttET.Rows(0)!et_proforma.ToString = "S" Then Return True

      '-----------------------------
      'Controlla che le q.tà indicate coincidino
      dtrT = dttEC.Select("xxo_gestmatr = 'S'")
      For i = 0 To dtrT.Length - 1
        dtrT1 = dttMOVMATR.Select("mma_riga = " & dtrT(i)!ec_riga.ToString & " AND mma_tipork = " & CStrSQL(dtrT(i)!ec_tipork))
        dQuant = 0
        For l = 0 To dtrT1.Length - 1
          dQuant += NTSCDec(dtrT1(l)!mma_quant)
        Next
        If NTSCDec(dtrT(i)!ec_quant) <> dQuant Then
          If dttET.Rows(0)!et_tipork.ToString <> "W" Or (dttET.Rows(0)!et_tipork.ToString = "W" And nGestioneMatricSuNoteDiPrel = 2) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667413706718750, "Per l'articolo |" & dtrT(i)!ec_codart.ToString & "|, nella riga |" & dtrT(i)!ec_riga.ToString & "|, non sono state indicate quantità corrette nel dettaglio matricole (oppure dettaglio matricole non inserito).")))
            Return False
          Else
            If Not (bInNuovoDocSilent Or bInApriDocSilent) Then
              If dQuant > NTSCDec(dtrT(i)!ec_quant) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667413694062500, "Per l'articolo |" & dtrT(i)!ec_codart.ToString & "|, nella riga |" & dtrT(i)!ec_riga.ToString & "|, sono state indicate quantità diverse rispetto al dettaglio matricole (oppure dettaglio matricole non inserito).")))
                Return False
              End If
            Else
              Return True
            End If
          End If
          'Return False
        End If
      Next


      '-----------------------------------------------------------------------
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'Controlla che le q.tà indicate coincidino sugli scarichi
        dtrT = dttECIMP.Select("xxo_gestmatr = 'S'")
        For i = 0 To dtrT.Length - 1
          dtrT1 = dttMOVMATR.Select("mma_riga = " & dtrT(i)!ec_riga.ToString & " AND mma_tipork = " & CStrSQL(dtrT(i)!ec_tipork))
          dQuant = 0
          For l = 0 To dtrT1.Length - 1
            dQuant += NTSCDec(dtrT1(l)!mma_quant)
          Next
          If NTSCDec(dtrT(i)!ec_quant) <> dQuant Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667419066406250, "Per l'articolo |" & dtrT(i)!ec_codart.ToString & "|, nella riga |" & dtrT(i)!ec_riga.ToString & "| dello SCARICO DI PRODUZIONE (associata alla riga |" & dtrT(i)!ec_prriga.ToString & "| del CARICO DI PRODUZIONE), sono state indicate quantità diverse rispetto al dettaglio matricole.")))
            Return False
          End If
        Next
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckMMLavce() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dttTmp As New DataTable
    Dim i As Integer = 0
    Try
      'Cod. centro obbligatorio sempre
      dtrT = dttLAVCENT.Select("lce_codcent = 0")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667442464531250, "La riga di LAVORAZIONE |" & dtrT(0)!lce_rigaa.ToString & "|, associata alla riga |" & dtrT(0)!lce_riga.ToString & "| del CARICO DI PRODUZIONE, possiede il Codice centro pari a 0.")))
        Return False
      End If

      If bTerzista Then
        'Congruenza terzisti: solo una lavorazione per riga di carico
        If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "First(lce_riga) AS riga, Count(lce_riga) AS NumDuplicati", "", "lce_riga") Then
          Return False
        End If
        dtrT = dttGr.Select("NumDuplicati > 1")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667445152500000, "Associata alla riga |" & dtrT(0)!riga.ToString & "| del CARICO DI PRODUZIONE esistono |" & dtrT(0)!NumDuplicati.ToString & "| righe di LAVORAZIONE. Per le lavorazioni a terzisti è obbligatorio dichiarare una sola lavorazione per riga di carico.")))
          Return False
        End If

        'Il campo tb_magterz del centro terzista deve essere uguale a MAGIMP
        dtrT = dttLAVCENT.Select("xx_magterz <> " & NTSCInt(dttET.Rows(0)!et_magimp).ToString)
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667452207500000, "Per la riga |" & dtrT(0)!lce_rigaa.ToString & "| delle LAVORAZIONI, associata alla riga |" & dtrT(0)!lce_riga.ToString & "| del CARICO DI PRODUZIONE, il centro indicato non appartiene al terzista che ha eseguito la lavorazione (magazzino impegni di testata diverso dal magazzino indicato nel centro di lavoro collegato alla lavorazione).")))
          Return False
        End If

      Else

        'Non deve essere indicato un centro terzista
        dttGr.Clear()
        If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "xx_magterz", "", "xx_magterz") Then
          Return False
        End If
        For i = 0 To dttGr.Rows.Count - 1
          oCldBoll.ValCodiceDb(NTSCInt(dttGr.Rows(i)!xx_magterz).ToString, strDittaCorrente, "TABMAGA", "N", "", dttTmp)
          If dttTmp.Rows.Count > 0 Then
            If dttTmp.Rows(0)!tb_flclavo.ToString <> " " And dttTmp.Rows(0)!tb_flclavo.ToString <> "C" Then
              dtrT = dttLAVCENT.Select("xx_magterz = " & NTSCInt(dttGr.Rows(i)!xx_magterz).ToString)
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667456535000000, "La riga di LAVORAZIONE |" & dtrT(0)!lce_rigaa.ToString & "|, associata alla riga |" & dtrT(0)!lce_riga.ToString & "| del CARICO DI PRODUZIONE, indica un Codice centro con magazzino di tipo terzista. Sono consentite solo lavorazioni interne.")))
              Return False
            End If
          End If
        Next
      End If    'If bTerzista Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_ControllaCastelletti() As Boolean
    Dim dTotImpIVA As Decimal = 0
    Dim dTotImpCont As Decimal = 0
    Dim dTotImpIVAval As Decimal = 0
    Dim dTotImpContval As Decimal = 0
    Dim i As Integer = 0

    Try
      dTotImpIVA = 0
      dTotImpIVAval = 0
      For i = 1 To 8
        If NTSCInt(dttET.Rows(0)("et_codiva_" & i.ToString)) <> 0 Then
          dTotImpIVA = dTotImpIVA + NTSCDec(dttET.Rows(0)("et_imponib_" & i.ToString))
          dTotImpIVAval = dTotImpIVAval + NTSCDec(dttET.Rows(0)("et_imponibv_" & i.ToString))
        Else
          Exit For
        End If
      Next

      dTotImpCont = 0
      dTotImpContval = 0
      For i = 1 To 20
        If NTSCInt(dttETC.Rows(0)("tm_ccontr_" & i.ToString)) <> 0 Then
          dTotImpCont = dTotImpCont + NTSCDec(dttETC.Rows(0)("tm_impcont_" & i.ToString))
          dTotImpContval = dTotImpContval + NTSCDec(dttETC.Rows(0)("tm_impcontv_" & i.ToString))
        Else
          Exit For
        End If
      Next

      Return ControllaCastelletti(dTotImpIVA, dTotImpCont, dTotImpIVAval, dTotImpContval)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try

  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckSequenzaQtaLavorate() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dttGr2 As New DataTable
    Dim i As Integer = 0
    Dim lLastRow As Integer = 0
    Dim lLastRigaa As Integer = 0
    Dim dLastQta As Decimal = 0
    Dim dQuant As Decimal = 0
    Dim dtrT1() As DataRow = Nothing
    Try
      If bNpienpSaltaControlli Then Return True 'carichi da produzione fatti da BNNPIENP: se settata l'opzione di registro salto questo test (che comunque non crea problemi per il corretto funzionamento del gestionale)

      For Each dtrTmp As DataRow In dttEC.Rows  'per ogni riga prodotta...
        dttGr.Clear()
        dttGr2.Clear()
        '------------------------------------------------------------------------------------------------------------
        '--- Riordina il DataTable di LAVCENT. Questo perché, se modificato il numero di riga e quantità, a mano
        '--- il controllo di congruità delle quantità non prendeva il numero di riga più basso
        '------------------------------------------------------------------------------------------------------------
        If Not dttLAVCENT Is Nothing Then
          If dttLAVCENT.Rows.Count > 0 Then
            Dim dttLAVCENTtmp As New DataTable
            Dim dtrLavcent() As DataRow = Nothing
            dttLAVCENTtmp = dttLAVCENT.Copy
            dtrLavcent = dttLAVCENTtmp.Select("", "lce_riga, lce_rigaa")
            dttLAVCENT.Clear()
            For i = 0 To (dtrLavcent.Length - 1)
              dttLAVCENT.Rows.Add(dtrLavcent(i).ItemArray)
            Next
            dttLAVCENT.AcceptChanges()
          End If
        End If
        '------------------------------------------------------------------------------------------------------------
        'Controlla la congruenza delle quantità fra le fasi di tutte le lavorazioni.
        'collegate ad ordini
        If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, _
                      "Sum(lce_qtaes) AS lce_qtaes, Sum(lce_qtascart) AS lce_qtascart, lce_riga, Last(lce_rigaa) AS lce_rigaa", _
                      "lce_ornum > 0 AND lce_riga = " & dtrTmp!ec_riga.ToString, _
                      "lce_riga, lce_ortipo, lce_oranno, lce_orserie, lce_ornum, lce_orriga, lce_orfase") Then
          Return False
        End If

        'scollegate da ordini
        If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr2, _
                      "lce_qtaes, lce_qtascart, lce_riga, lce_rigaa", _
                      "lce_ornum = 0 AND lce_riga = " & dtrTmp!ec_riga.ToString, _
                      "") Then
          Return False
        End If

        'aggiungo le righe non collegate ad ordini alle righe collegate all'ordine
        For i = 0 To dttGr2.Rows.Count - 1
          dttGr.ImportRow(dttGr2.Rows(i))
        Next
        dttGr.AcceptChanges()

        If dttGr.Rows.Count = 0 Then Return True

        lLastRow = NTSCInt(dttGr.Rows(0)!lce_riga)
        lLastRigaa = NTSCInt(dttGr.Rows(0)!lce_rigaa)
        dLastQta = NTSCDec(dttGr.Rows(0)!lce_qtaes) ' - dttGr.Rows(0)!lce_qtascart
        dQuant = NTSCDec(dtrTmp!ec_quant)

        dtrT1 = dttGr.Select("", "lce_riga, lce_rigaa")
        For i = 1 To dtrT1.Length - 1
          If lLastRow = NTSCInt(dtrT1(i)!lce_riga) Then
            If dLastQta <> NTSCDec(dtrT1(i)!lce_qtaes) + NTSCDec(dtrT1(i)!lce_qtascart) Then
              If Not oCldBoll.CheckInAvlavp(strDittaCorrente, NTSCStr(dttLAVCENT.Rows(0)!lce_tipork), NTSCInt(0), NTSCStr(dttLAVCENT.Rows(0)!lce_serie), NTSCInt(dttLAVCENT.Rows(0)!lce_numdoc), NTSCInt(dttGr.Rows(0)!lce_riga), NTSCInt(dttGr.Rows(0)!lce_rigaa)) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667470287500000, "La quantità lavorata (buona + scartata) nella riga |" & dtrT1(i)!lce_rigaa.ToString & "| delle LAVORAZIONI (associata alla riga di CARICO DA PRODUZIONE n° |" & dtrT1(i)!lce_riga.ToString & "|) non è uguale alla quantità eseguita della riga |" & lLastRigaa.ToString & "| precedente.")))
                Return False
              End If
            End If
          Else
            If dLastQta <> dQuant Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667470367343750, "La quantità eseguita dell'ultima lavorazione (Qta: |" & dLastQta.ToString(oApp.FormatQta) & "|, Riga |" & lLastRigaa.ToString & "| associata alla riga di CARICO DA PRODUZIONE n° |" & lLastRow.ToString & "|) non è uguale alla quantità |" & dQuant.ToString(oApp.FormatQta) & "| effettivamente caricata in magazzino.")))
              Return False
            End If
          End If
          lLastRow = NTSCInt(dtrT1(i)!lce_riga)
          lLastRigaa = NTSCInt(dtrT1(i)!lce_rigaa)
          dLastQta = NTSCDec(dtrT1(i)!lce_qtaes) ' - !lce_qtascart
          dQuant = NTSCDec(dtrTmp!ec_quant)
        Next    'For i = 1 To dtrT1.lenght - 1

        If dLastQta <> dQuant Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667471341875000, "La quantità eseguita dell'ultima lavorazione (Qta: |" & dLastQta.ToString(oApp.FormatQta) & "|, Riga |" & lLastRigaa.ToString & "| associata alla riga di CARICO DA PRODUZIONE n° |" & lLastRow.ToString & "|) non è uguale alla quantità |" & dQuant.ToString(oApp.FormatQta) & "| effettivamente caricata in magazzino.")))
          Return False
        End If
      Next    'For Each dtrTmp As DataRow In dttEC.Rows

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttGr2.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckContropartite() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dttTmp As New DataTable
    Dim oDttgr As CLEGROUPBY = Nothing
    Dim dttGr As New DataTable
    Dim i As Integer = 0
    Dim bGestDateComp As Boolean = False
    Dim evnt As NTSEventArgs = Nothing

    Try
      '------------------------------------
      'Controlla che i magazzini 1 e 2 siano diversi e le causali 1 e 2
      dtrT = dttEC.Select("ec_magaz = ec_magaz2 OR ec_causale = ec_causale2 OR (ec_causale2 > 0 AND ec_magaz2 = 0) OR (ec_causale2 = 0 AND ec_magaz2 > 0) OR (xxo_causec <> ec_causale2)")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667200696250000, _
                         "La riga |" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & _
                         "|) possiede u più anomalie sui campi magazzini e/o causali. Verificare:" & vbCrLf & vbCrLf & _
                         " - Codice causale 2 diversa dalla causale secondaria del codice causale 1;" & vbCrLf & _
                         " - Codice magazzino 1 uguale al codice magazzino 2;" & vbCrLf & _
                         " - Codice causale 1 uguale al codice causale 2;" & vbCrLf & _
                         " - Codice causale 2 diversa da 0 e codice magazzino 2 uguale a 0;" & vbCrLf & _
                         " - Codice magazzino 2 diverso da 0 e codice causale 2 uguale a 0.")))
        Return False
      End If

      '------------------------------------
      'Controlla se sono corretti i codici contropartita  su MMTRANS
      'Controlla se sono corretti i codici IVA su MMTRANS
      dtrT = dttEC.Select("ec_prezzo <> 0 AND (ec_controp = 0 OR ec_codiva = 0)")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667203774375000, _
                        "La riga |" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & _
                        "|) possiede il Codice IVA e/o Contropartita pari a 0.")))
        Return False
      End If

      '------------------------------------
      'Controlla i conti contropartita se obbligatori
      If dttET.Rows(0)!et_tipork.ToString <> "W" Then
        If CBool(lModuliDittaDitt And bsModCI) Then
          'Causale 1
          dtrT = dttEC.Select("ec_prezzo <> 0 AND xxo_testci <> ' ' AND ec_contocontr = 0")
          If dtrT.Length > 0 Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128667211048750000, "Attenzione!" & vbCrLf & _
              "Esistono righe, nel corpo del documento, che posseggono il Conto contropartita pari a 0 mentre la causale di magazzino lo richiede." & vbCrLf & _
              "La prima riga trovata è la N°|" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & "|)" & vbCrLf & _
              "Si consiglia di utilizzare un Codice contropartita che possegga il Conto di contabilità analitica." & vbCrLf & _
              "Proseguire ugualmente?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue <> CLN__STD.ThMsg.RETVALUE_YES Then Return False
          End If
          'Causale 2
          dtrT = dttEC.Select("ec_prezzo <> 0 AND xxo_testci2 <> ' ' AND ec_contocontr = 0")
          If dtrT.Length > 0 Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 131002798781847710, "Attenzione!" & vbCrLf & _
              "Esistono righe, nel corpo del documento, che posseggono il Conto contropartita pari a 0 mentre la causale di magazzino 2 lo richiede." & vbCrLf & _
              "La prima riga trovata è la N°|" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & "|)" & vbCrLf & _
              "Si consiglia di utilizzare un Codice contropartita che possegga il Conto di contabilità analitica." & vbCrLf & _
              "Proseguire ugualmente?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue <> CLN__STD.ThMsg.RETVALUE_YES Then Return False
          End If
        End If

        'tolto: non permetteva di salvare documenti con una unica causale di magazzino ma contenenti righe che dovevano andare in CA
        'e righe  che invece non dovevano andare in CA. costringeva a cambiare causale di magazzino!!!
        'il salvataggio avviene correttamente delle sole righe con dati CA compilati correttamente. La documentazione era già ok con il nuovo funzionamento
        'If CBool(lModuliSupDittaDitt And bsModSupCAE) Then
        '  'Causale 1
        '  dtrT = dttEC.Select("ec_prezzo <> 0 AND xxo_codcacadd <> 0 AND ec_contocontr = 0")
        '  If dtrT.Length > 0 Then
        '    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270510547470703, _
        '                    "La riga |" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & _
        '                    "|) possiede il Conto contropartita pari a 0 mentre la causale di magazzino lo richiede." & vbCrLf & _
        '                    "Utilizzare un Codice contropartita che possiede il Conto di contabilità analitica.")))
        '    Return False
        '  End If
        '  'Causale 2
        '  dtrT = dttEC.Select("ec_prezzo <> 0 AND xxo_codcacadd2 <> 0 AND ec_contocontr = 0")
        '  If dtrT.Length > 0 Then
        '    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270510528671875, _
        '                    "La riga |" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & _
        '                    "|) possiede il Conto contropartita pari a 0 mentre la causale di magazzino 2 lo richiede." & vbCrLf & _
        '                    "Utilizzare un Codice contropartita che possiede il Conto di contabilità analitica.")))
        '    Return False
        '  End If
        'End If

      End If    'If dttET.Rows(0)!et_tipork.ToString <> "W" Then

      '------------------------------------
      'ora per gli scarichi/lavorazioni
      If dttET.Rows(0)!et_tipork.ToString = "T" Then

        dtrT = dttECIMP.Select("ec_prezzo <> 0 AND (ec_controp = 0 OR ec_codiva = 0)")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667215821250000, _
                          "La riga |" & dtrT(0)!ec_riga.ToString & "| di SCARICO DI PRODUZIONE, " & _
                          "associata alla riga |" & dtrT(0)!ec_prriga.ToString & _
                          "| del CARICO DI PRODUZIONE, (articolo |" & dtrT(0)!ec_codart.ToString & _
                          "|) possiede il Codice IVA e/o Contropartita pari a 0.")))
          Return False
        End If

        If CBool(lModuliDittaDitt And bsModCI) Then
          dtrT = dttECIMP.Select("ec_prezzo <> 0 AND xxo_testci <> ' ' AND ec_contocontr = 0")
          If dtrT.Length > 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667216927968750, _
                            "La riga |" & dtrT(0)!ec_riga.ToString & "| di SCARICO DI PRODUZIONE, " & _
                            "associata alla riga |" & dtrT(0)!ec_prriga.ToString & _
                            "| del CARICO DI PRODUZIONE, (articolo |" & dtrT(0)!ec_codart.ToString & _
                            "|) possiede il Conto contropartita pari a 0 mentre la causale di magazzino lo richiede." & vbCrLf & _
                            "Utilizzare un Codice contropartita che possiede il Conto di contabilità analitica.")))
            Return False
          End If
        End If

        If CBool(lModuliSupDittaDitt And bsModSupCAE) Then
          dtrT = dttECIMP.Select("ec_prezzo <> 0 AND xxo_codcacadd <> 0 AND ec_contocontr = 0")
          If dtrT.Length > 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270509605878906, _
                            "La riga |" & dtrT(0)!ec_riga.ToString & "| di SCARICO DI PRODUZIONE, " & _
                            "associata alla riga |" & dtrT(0)!ec_prriga.ToString & _
                            "| del CARICO DI PRODUZIONE, (articolo |" & dtrT(0)!ec_codart.ToString & _
                            "|) possiede il Conto contropartita pari a 0 mentre la causale di magazzino lo richiede." & vbCrLf & _
                            "Utilizzare un Codice contropartita che possiede il Conto di contabilità analitica.")))
            Return False
          End If
        End If

        dtrT = dttLAVCENT.Select("lce_controp = 0")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667216917187500, _
                          "La riga di LAVORAZIONE |" & dtrT(0)!lce_rigaa.ToString & "|, " & _
                          "associata alla riga |" & dtrT(0)!lce_riga.ToString & _
                          "| del CARICO DI PRODUZIONE, (articolo |" & dtrT(0)!lce_codart.ToString & _
                          "|) possiede il Codice contropartita o il Conto contropartita pari a 0.")))
          Return False
        End If

      End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then

      '------------------------------------
      'Controlla che, se il conto (CG e/o CA) agganciato alla contropartita di riga
      'ha una gestione 'periodo di comp. economica', 'data inizio competenza economica' sia
      'inferiore a 'data fine competenza economica'
      oCldBoll.ValCodiceDb(strDittaCorrente, strDittaCorrente, "ANADITAC", "S", "", dttTmp)
      If dttTmp.Rows.Count > 0 Then
        If NTSCStr(dttTmp.Rows(0)!ac_flrifboi) = "S" Then

          oDttgr = New CLEGROUPBY
          dttGr.Clear()
          If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_controp, ec_codart", "ec_datini >= ec_datfin", "ec_controp") Then
            Return False
          End If
          For i = 0 To dttGr.Rows.Count - 1
            If NTSCStr(dttGr.Rows(i)!ec_codart) <> "D" Then
              If Not oCldBoll.SalvaDocumentoTestDataComp(strDittaCorrente, NTSCInt(dttGr.Rows(i)!ec_controp), CBool(lModuliDittaDitt And bsModCI), bGestDateComp) Then Return False
              If bGestDateComp Then
                dtrT = dttEC.Select("ec_codart <> 'D' AND ec_datini >= ec_datfin AND ec_controp = " & NTSCInt(dttGr.Rows(i)!ec_controp).ToString)
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128667211955781250, _
                                 "La riga |" & dtrT(0)!ec_riga.ToString & "| (articolo |" & dtrT(0)!ec_codart.ToString & _
                                 "|) " & vbCrLf & "possiede una contropartita il cui codice conto (di CG e/o CA) richiede obbligatoriamente " & _
                                 "l'indicazione di un periodo competenza economica valido " & vbCrLf & "('Data inizio comp. economica' " & _
                                 "deve essere inferiore alla 'data fine comp. economica')")))
                Return False
              End If
            End If
          Next    'For i = 0 To dtrT.Length - 1
        End If    'If NTSCStr(dttTmp.Rows(0)!ac_flrifboi) = "S" Then
      End If    'If dttTmp.Rows.Count > 0 Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckMMTRASCATC() As Boolean
    '------------------------
    'controlla che le sommatorie dei records di MOTRAIMPTC coincidano 
    'con le righe degli impegni collegati che hanno l'articolo gestito per taglie e colori
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim i As Integer = 0
    Dim bRigheAZero As Boolean = False
    Dim evnt As NTSEventArgs = Nothing

    Try
      dtrT = dttECIMP.Select("xxo_codtagl <> 0")
      For i = 0 To dtrT.Length - 1
        If NTSCDec(dtrT(i)!ec_quant) = 0 Then bRigheAZero = True

        dtrT1 = dttECIMPTC.Select("ec_riga = " & NTSCInt(dtrT(i)!ec_riga).ToString)
        If dtrT1.Length > 0 Then
          If NTSCDec(dtrT(i)!ec_quant) <> NTSCDec(dtrT1(0)!ec_quant01) + NTSCDec(dtrT1(0)!ec_quant02) + NTSCDec(dtrT1(0)!ec_quant03) + _
                                          NTSCDec(dtrT1(0)!ec_quant04) + NTSCDec(dtrT1(0)!ec_quant05) + NTSCDec(dtrT1(0)!ec_quant06) + _
                                          NTSCDec(dtrT1(0)!ec_quant07) + NTSCDec(dtrT1(0)!ec_quant08) + NTSCDec(dtrT1(0)!ec_quant09) + _
                                          NTSCDec(dtrT1(0)!ec_quant10) + NTSCDec(dtrT1(0)!ec_quant11) + NTSCDec(dtrT1(0)!ec_quant12) + _
                                          NTSCDec(dtrT1(0)!ec_quant13) + NTSCDec(dtrT1(0)!ec_quant14) + NTSCDec(dtrT1(0)!ec_quant15) + _
                                          NTSCDec(dtrT1(0)!ec_quant16) + NTSCDec(dtrT1(0)!ec_quant17) + NTSCDec(dtrT1(0)!ec_quant18) + _
                                          NTSCDec(dtrT1(0)!ec_quant19) + NTSCDec(dtrT1(0)!ec_quant20) + NTSCDec(dtrT1(0)!ec_quant21) + _
                                          NTSCDec(dtrT1(0)!ec_quant22) + NTSCDec(dtrT1(0)!ec_quant23) + NTSCDec(dtrT1(0)!ec_quant24) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128528299762180000, _
                            "L'articolo |'" & dtrT(i)!ec_codart.ToString & "'|, riga |'" & dtrT(i)!ec_riga.ToString & "'|" & _
                            " negli 'Scarichi collegati', possiede una quantità di riga diversa" & _
                            " dalla sommatoria presente nel Dettaglio quantità - Taglie e colori-." & vbCrLf & _
                            "Intervenire su tali valori prima di salvare il documento di produzione.")))
            Return False
          End If
        End If
      Next

      '------------------------
      'Se esistono righe con articoli per taglie e colori con quantità a zero
      'negli Impegni collegati, chiede conferma
      If bRigheAZero Then
        evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128528302186490000, _
                                "Esistono righe con quantità pari a zero negli Scarichi collegati." & vbCrLf & _
                                "Proseguire ugualmente con il salvataggio del documento di produzione?"))
        ThrowRemoteEvent(evnt)
        If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
      End If

      '------------------------
      'per gli articoli prodotti di tipo TCO controllo se sono presenti impegni collegati dove non è stata 
      'specificata la taglia   (in bus13 per ora questo test non c'è in veboll ...)
      If BORDINI Then
        dtrT = dttEC.Select("xxo_codtagl <> 0")
        For i = 0 To dtrT.Length - 1
          If dttECIMP.Select("ec_riga = " & NTSCInt(dtrT(i)!ec_riga).ToString & " AND ec_tctaglia = ' '").Length <> 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128528307575666000, _
                                "Attenzione!" & vbCrLf & _
                                "Negli 'Scarichi collegati' relativi all'articolo |'" & NTSCStr(dtrT(i)!ec_codart) & _
                                "'| (riga |'" & NTSCInt(dtrT(i)!ec_riga).ToString & "'|)" & vbCrLf & _
                                "esistono righe nelle quali non è stata indicata una taglia valida.")))
            Return False
          End If
        Next
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckEvasioneSaldo(ByVal strTipork As String, ByRef dttIn As DataTable) As Boolean
    '----------------------------------------
    'Controlla se una riga di MOTRANS evade a saldo solo una volta il documento
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim i As Integer = 0
    Dim dttMo As New DataTable
    Dim dQta As Decimal = 0
    Dim QuaEvasa As Decimal = 0
    Dim strIf As String

    Try
      '----------------------------
      'Controlla se una riga di MMTRANS non sia a saldo 'C' quando mm_quant <= mm_nprquaeva
      If strTipork = "W" Then
        dtrT = dttIn.Select("ec_nprflevas = 'C' AND ec_quant <= ec_nprquaeva AND ec_quant <> 0 AND ec_nprquaeva <> 0")
        If dtrT.Length > 0 Then
          strIf = oApp.Tr(Me, 129078537123439212, "dello SCARICO A PRODUZIONE collegata alla riga |" & _
                                  dtrT(0)!ec_prriga.ToString & "| del CARICO DI PRODUZIONE ")
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668056453750000, _
                                  "La riga |" & dtrT(0)!ec_riga.ToString & "| |" & _
                                  IIf(strTipork = "U", strIf, "").ToString & _
                                  "| non può essere evasa parzialmente (in conto), quando la quantità prenotata è " & _
                                  "inferiore o uguale alla quantità evasa.")))
          Return False
        End If
      End If

      '---------------------------
      'Controlla se una riga di MMTRANS evade a saldo solo una volta l'ordine
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Min(ec_ortipo) AS Tipo, Min(ec_oranno), Min(ec_orserie) AS Serie, Max(ec_riga) as RIGAU, " & _
                                            "Min(ec_ornum) AS Num, Min(ec_orriga) AS Riga, Min(ec_salcon), Min(ec_prriga) as RigaT, " & _
                                            "Count(ec_ortipo) AS NumDuplicati, Count(ec_salcon) as NumSalcon", _
                                            "ec_salcon='S' AND ec_ornum > 0", _
                                            "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga, ec_salcon, ec_prriga") Then
        Return False
      End If
      dtrT = dttGr.Select("NumDuplicati > 1 AND NumSalcon > 1")
      If dtrT.Length > 0 Then
        strIf = oApp.Tr(Me, 129082836083066407, " Collegata a riga |" & dtrT(0)!RIGAT.ToString & _
                                    "| del carico a produzione")
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668064422812500, _
                                  "La riga |" & dtrT(0)!RIGA.ToString & "| del |" & DescrTiporkOr(dtrT(0)!TIPO.ToString) & _
                                  "| n° |" & dtrT(0)!num.ToString & "| è stata evasa a saldo |" & _
                                  dtrT(0)!NumDuplicati.ToString & "| volte in questo Documento. " & _
                                  "E' possibile evadere solo una volta una riga d'ordine a saldo." & vbCrLf & _
                                  "(Riga documento |" & dtrT(0)!RIGAU.ToString & _
                                  IIf(strTipork = "U", strIf, "").ToString & "|)")))
        Return False
      End If

      '---------------------------
      'Controlla se una riga di MMTRANS evade a saldo solo una volta la nota
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Min(ec_nptipo) AS Tipo, Min(ec_npanno), Min(ec_npserie) AS Serie, Max(ec_riga) as RIGAU, " & _
                                            "Min(ec_npnum) AS Num, Min(ec_npriga) AS Riga, Min(ec_npsalcon), Min(ec_prriga) as RigaT, " & _
                                            "Count(ec_nptipo) AS NumDuplicati, Count(ec_npsalcon) as NumSalcon", _
                                            "ec_npsalcon='S' AND ec_npnum > 0", _
                                            "ec_nptipo, ec_npanno, ec_npserie, ec_npnum, ec_npriga, ec_npsalcon, ec_prriga") Then
        Return False
      End If
      dtrT = dttGr.Select("NumDuplicati > 1 AND NumSalcon > 1")
      If dtrT.Length > 0 Then
        strIf = oApp.Tr(Me, 129078529440549364, " Collegata a riga |" & dtrT(0)!RIGAT.ToString & _
                            "| del carico a produzione")
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668064437812500, _
                                  "La riga |" & dtrT(0)!RIGA.ToString & "| della NOTA DI PRELIEVO n° |" & _
                                  dtrT(0)!num.ToString & "| è stata evasa a saldo |" & dtrT(0)!NumDuplicati.ToString & _
                                  "| volte in questo Documento. E' possibile evadere solo una volta una riga " & _
                                  "d'ordine a saldo." & vbCrLf & _
                                  "(Riga documento |" & dtrT(0)!RIGAU.ToString & _
                                  IIf(strTipork = "U", strIf, "").ToString & "|)")))
        Return False
      End If

      '----------------------------------------
      'Controlla che una riga d'ordine sia evasa a saldo quando mo_quant supera mo_quant
      'del documento aperto a cui fa riferimento
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Min(ec_ortipo) as Tipo, Min(ec_oranno) as Anno, Min(ec_orserie) as Serie, Max(ec_riga) as RIGAU, Min(ec_prriga) as RigaT, " & _
                                             "Min(ec_ornum) as Num, Min(ec_orriga) as Riga, Sum(ec_quant) as QuaEva, Max(ec_salcon) AS Salcon ", _
                                             "ec_ornum > 0", _
                                             "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga, ec_prriga") Then
        Return False
      End If

      For i = 0 To dttGr.Rows.Count - 1
        'se nota di prelievo, 
        'leggo dall'ordine quant - quaeva - quapre e lo metto in QuaDiff
        'se altro documento,
        'leggo dall'ordine quant - quaeva e lo metto in QuaDiff
        If Not oCldBoll.GetQuaevaORD(strDittaCorrente, strTipork, _
                                     NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                     NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                     dttGr.Rows(i)!tipo.ToString, NTSCInt(dttGr.Rows(i)!anno), _
                                     dttGr.Rows(i)!serie.ToString, NTSCInt(dttGr.Rows(i)!num), _
                                     NTSCInt(dttGr.Rows(i)!riga), QuaEvasa, 0, 0, 0, dttMo) Then Return False
        If dttMo.Rows.Count > 0 Then
          'QUANTO ANCORA DA EVADERE DA MOVORD  - QUANTO E' STATO EVASO IN QUESTO DOC
          dQta = ArrDbl(NTSCDec(dttMo.Rows(0)!QuaDiff) - NTSCDec(dttGr.Rows(i)!QUAEVA), 3)

          'nei documenti in modifica devo aggiungere quanto era già evaso con il documento corrente
          If bNew = False Then dQta = ArrDbl(dQta + QuaEvasa, 3)

          'ora dQta contiene quanto deve essere ancora evaso
          If dQta <= 0 And NTSCStr(dttGr.Rows(i)!Salcon) = "C" Then
            If Not (bIgnoraDisponibilita = True And strProgChiamante = "BNORGNNP") Then 'salto il controllo se richiamato da orgnnp con opzione attiva

              'La quantità evasa globale supera o è uguale a quella ordinata sul documento di origine
              strIf = oApp.Tr(Me, 129078532274830665, " Collegata a riga |" & dttGr.Rows(i)!RIGAT.ToString & _
                                "| del carico a produzione")
              If strTipork = "W" Then
                If strProgChiamante = "BNORGNNP" And dQta = 0 Then
                  'non devo dare il messaggio se chiamato da bnorgnnp se è stata settata l'opzione di registro che consente di evadere righe con qta = 0 (BSORGNNP/Opzioni/ScriviRighe0 = -1)
                Else
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668075507500000, _
                                  "E' obbligatorio prenotare a saldo la riga |" & NTSCInt(dttGr.Rows(i)!riga).ToString & _
                                  "| del |" & DescrTiporkOr(dttGr.Rows(i)!TIPO.ToString) & "| n° |" & NTSCInt(dttGr.Rows(i)!num).ToString & _
                                  "| in quanto la quantità evasa, meno la prenotata, è uguale o supera la quantità " & _
                                  "originariamente ordinata (differenza |" & (dQta * -1).ToString(oApp.FormatQta) & "|)." & vbCrLf & _
                                  "(Riga documento |" & dttGr.Rows(i)!RIGAU.ToString & _
                                  IIf(strTipork = "U", strIf, "").ToString & "|)")))
                  Return False
                End If
              Else
                If CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "EvadiRigaAutomNoMsg", "-1", " ", "-1")) = False Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668080676406250, _
                                  "E' obbligatorio evadere a saldo la riga |" & NTSCInt(dttGr.Rows(i)!riga).ToString & _
                                  "| del |" & DescrTiporkOr(dttGr.Rows(i)!TIPO.ToString) & "| n° |" & NTSCInt(dttGr.Rows(i)!num).ToString & _
                                  "| in quanto la quantità evasa, è uguale o supera la quantità originariamente " & _
                                  "ordinata (differenza |" & (dQta * -1).ToString(oApp.FormatQta) & "|)." & vbCrLf & _
                                  "(Riga documento |" & dttGr.Rows(i)!RIGAU.ToString & _
                                  IIf(strTipork = "U", strIf, "").ToString & "|)")))
                  Return False
                Else
                  For nIndice As Integer = 0 To (dttIn.Rows.Count - 1)
                    If (NTSCStr(dttIn.Rows(nIndice)!ec_tipork) = strTipork) And _
                       (NTSCInt(dttIn.Rows(nIndice)!ec_anno) = NTSCInt(dttET.Rows(0)!et_anno)) And _
                       (NTSCStr(dttIn.Rows(nIndice)!ec_serie) = NTSCStr(dttET.Rows(0)!et_serie)) And _
                       (NTSCInt(dttIn.Rows(nIndice)!ec_numdoc) = NTSCInt(dttET.Rows(0)!et_numdoc)) And _
                       (NTSCInt(dttIn.Rows(nIndice)!ec_riga) = NTSCInt(dttGr.Rows(i)!RIGAU)) Then
                      dttIn.Rows(nIndice)!ec_salcon = "S"
                      bSalvaRicalcolaDisimpegno = True
                      SettaSaldoRigaScarichiELavorazioni(dttIn.Rows(nIndice))
                      dttIn.AcceptChanges()
                      Exit For
                    End If
                  Next
                End If
              End If
            End If
          End If    'If dQta <= 0 And NTSCStr(dttGr.Rows(i)!Salcon) = "C" Then
        End If    'If dttMo.Rows.Count > 0 Then
      Next    'For i = 0 To dttGr.Rows.Count - 1

      '----------------------------------------
      'Controlla che una riga di nota sia evasa a saldo quando mm_quant supera mm_quant prenotata
      If strTipork <> "W" Then
        dttGr.Clear()
        If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Min(ec_nptipo) as Tipo, Min(ec_npanno) as Anno, Min(ec_npserie) as Serie, Max(ec_riga) as RIGAU, Min(ec_prriga) as RigaT, " & _
                                               "Min(ec_npnum) as Num, Min(ec_npriga) as Riga, Sum(ec_quant) as QuaEva, Max(ec_npsalcon) AS Salcon ", _
                                               "ec_npnum > 0", _
                                               "ec_nptipo, ec_npanno, ec_npserie, ec_npnum, ec_npriga, ec_prriga") Then
          Return False
        End If
        For i = 0 To dttGr.Rows.Count - 1
          strIf = oApp.Tr(Me, 129078539242258982, " Collegata a riga |" & dttGr.Rows(i)!RIGAT.ToString & _
                              "| del carico a produzione")
          'leggo dalla nota di prelievo aperto quant - quaeva e lo metto in QuaDiff
          If Not oCldBoll.GetQuaevaNOTA(strDittaCorrente, strTipork, _
                                       NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                       NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                       dttGr.Rows(i)!tipo.ToString, NTSCInt(dttGr.Rows(i)!anno), _
                                       dttGr.Rows(i)!serie.ToString, NTSCInt(dttGr.Rows(i)!num), _
                                       NTSCInt(dttGr.Rows(i)!riga), QuaEvasa, 0, 0, 0, dttMo) Then Return False
          If dttMo.Rows.Count > 0 Then
            'QUANTO ANCORA DA EVADERE DA MOVPRB - QUANTO E' STATO EVASO IN QUESTO DOC
            dQta = ArrDbl(NTSCDec(dttMo.Rows(0)!QuaDiff) - NTSCDec(dttGr.Rows(i)!QUAEVA), 3)

            'nei documenti in modifica devo aggiungere quanto era già evaso con il documento corrente
            If bNew = False Then dQta = ArrDbl(dQta + QuaEvasa, 3)

            'ora dQta contiene quanto deve essere ancora evaso
            If dQta <= 0 And NTSCStr(dttGr.Rows(i)!Salcon) = "C" Then
              'La quantità evasa globale supera o è uguale a quella ordinata sul documento di origine
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668088560000000, _
                                "E' obbligatorio evadere a saldo la riga |" & NTSCInt(dttGr.Rows(i)!riga).ToString & _
                                "| della NOTA DI PRELIEVO n° |" & NTSCInt(dttGr.Rows(i)!num).ToString & _
                                "| in quanto la quantità evasa è uguale o supera la quantità originariamente " & _
                                "prenotata (differenza |" & (dQta * -1).ToString(oApp.FormatQta) & "|)." & vbCrLf & _
                                "(Riga documento |" & dttGr.Rows(i)!RIGAU.ToString & _
                                IIf(strTipork = "U", strIf, "").ToString & "|)")))
              Return False
            End If    'If dQta <= 0 And NTSCStr(dttGr.Rows(i)!Salcon) = "C" Then
          End If    'If dttMo.Rows.Count > 0 Then
        Next    'For i = 0 To dttGr.Rows.Count - 1
      End If    'If strTipork <> "W" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMo.Clear()
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckEvasioneSaldo2() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim evnt As NTSEventArgs = Nothing
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dttMo As New DataTable

    Dim QuaEvasa As Decimal = 0
    Dim QuascaEva As Decimal = 0
    Dim TattEva As Decimal = 0
    Dim TeseEva As Decimal = 0

    Dim dQuant As Decimal = 0
    Dim dQuantScart As Decimal = 0
    Dim dTese As Decimal = 0
    Dim dTatt As Decimal = 0
    Dim i As Integer = 0

    Try
      '------------------------------------------
      'solo per carichi da produzione:
      'Controlla la congruenza del saldo tra padre e figlio
      'Controlli sono informativi, non bloccante
      If Not bModTCO Then
        '----------------------------------------
        '1. padri in conto, figli a saldo (ha senso però solo se non c'è il modulo Taglie e Colori)
        dtrT = dttEC.Select("ec_salcon = 'C' AND ec_ornum > 0")
        For Each dtrTmp As DataRow In dtrT
          dtrT1 = dttECIMP.Select("ec_salcon = 'S' AND ec_ornum > 0 AND ec_prriga = " & NTSCInt(dtrTmp!ec_riga).ToString)
          If dtrT1.Length > 0 And bNpienpSaltaControlli = False Then
            'se import fatto da BENPIENP non do il messaggio (è un test solo per operatore, a livello di gestionale si può proseguire)
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_CANCOK, oApp.Tr(Me, 128668207093906250, _
                        "Controllo evasione ordini di produzione: la riga |" & dtrT1(0)!ec_riga.ToString & _
                        "| dello SCARICO DI PRODUZIONE è evasa a SALDO, mentre la riga |" & dtrTmp!ec_riga.ToString & _
                        "| del CARICO DI PRODUZIONE (a cui è collegata) è evasa in CONTO." & vbCrLf & vbCrLf & _
                        "Premere OK per proseguire comunque o ANNULLA per annullare il salvataggio."))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_CANCEL Then Return False
          End If
        Next
      End If    'If Not bModTCO Then

      '----------------------------------------
      '2. padri a saldo, figli in conto
      dtrT = dttEC.Select("ec_salcon = 'S' AND ec_ornum > 0")
      For Each dtrTmp As DataRow In dtrT
        dtrT1 = dttECIMP.Select("ec_ornum > 0 AND ec_prriga = " & NTSCInt(dtrTmp!ec_riga).ToString, "ec_oranno, ec_orserie, ec_ornum, ec_orriga, ec_salcon DESC")
        If dtrT1.Length > 0 Then
          For i = 0 To dtrT1.Length - 1
            If dtrT1(i)!ec_salcon.ToString = "C" Then
              If i > 0 Then
                If NTSCInt(dtrT1(i)!ec_ornum) = NTSCInt(dtrT1(i - 1)!ec_ornum) And _
                   NTSCInt(dtrT1(i)!ec_oranno) = NTSCInt(dtrT1(i - 1)!ec_oranno) And _
                   NTSCInt(dtrT1(i)!ec_orriga) = NTSCInt(dtrT1(i - 1)!ec_orriga) And _
                   NTSCStr(dtrT1(i)!ec_orserie) = NTSCStr(dtrT1(i - 1)!ec_orserie) And _
                   NTSCStr(dtrT1(i)!ec_ortipo) = NTSCStr(dtrT1(i - 1)!ec_ortipo) Then
                  'è il caso di una riga d'ordine evasa su più righe di scarico (ad esempio perchè articolo gestito a lotti)
                  'ordinando le righe per ec_salcon DESC, devo scartare le righe riferiete allo stesso ordine se la prima è evasa 
                  Continue For  'passo direttamente alla NEXT del for per continuare il ciclo
                End If
              End If
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_CANCOK, oApp.Tr(Me, 128668207112656250, _
                          "Controllo evasione ordini di produzione: la riga |" & dtrT1(i)!ec_riga.ToString & _
                          "| dello SCARICO DI PRODUZIONE è evasa IN CONTO," & vbCrLf & _
                          "mentre la riga |" & dtrTmp!ec_riga.ToString & _
                          "| del CARICO DI PRODUZIONE (a cui è collegata) è evasa A SALDO." & vbCrLf & vbCrLf & _
                          "Premere OK per proseguire comunque o ANNULLA per annullare il salvataggio."))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_CANCEL Then Return False
            End If
          Next
        End If    'If dtrT1.Length > 0 Then
      Next

      '----------------------------------------
      'Controlla se una riga di MMLAVCE è evasa a saldo solo una volta
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "Min(lce_ortipo) AS Tipo, Min(lce_oranno), Min(lce_orserie) AS Serie, " & _
                                        "Min(lce_ornum) AS Num, Min(lce_orriga) AS Riga, Min(lce_orfase) AS Fase, " & _
                                        "Min(lce_flevas), Count(lce_ortipo) AS NumDuplicati, Min(lce_riga) AS RigaT, " & _
                                        "Min(lce_rigaa) AS Rigaa, count(lce_flevas) as CountDuplicati ", _
                                        "lce_flevas='S'", _
                                        "lce_ortipo, lce_oranno, lce_orserie, lce_ornum, lce_orriga, lce_orfase, lce_flevas") Then
        Return False
      End If
      dtrT = dttGr.Select("NumDuplicati > 1 AND CountDuplicati > 1")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668209709375000, "La fase |" & dtrT(0)!FASE.ToString & _
                                        "| dell'ATTIVITA' n° |" & dtrT(0)!num.ToString & "|, riga |" & _
                                        dtrT(0)!RIGA.ToString & "|, è stata evasa a saldo |" & dtrT(0)!NumDuplicati.ToString & _
                                        "| volte nelle LAVORAZIONI COLLEGATE associato alla riga di carico n° |" & _
                                        dtrT(0)!RigaT.ToString & "|. E' possibile evadere solo una volta a saldo.")))
        Return False
      End If

      '----------------------------------------
      'Controlla che una riga di MMLAVCE sia evasa a saldo quando lce_tempatt >= at_tempattpr AND lce_tempese >= at_tempesepr
      'SOLO per le righe che NON sono associate ad avanzamenti di lavorazione
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "lce_ortipo, lce_oranno, lce_orserie, lce_ornum, lce_orriga, " & _
                                        "lce_orfase, Sum(lce_qtaes) AS QuantBuonaEva, Sum(lce_qtascart) AS QuantScartEva, " & _
                                        "Min(lce_riga) AS RigaT, Min(lce_rigaa) AS Rigaa, Max(lce_flevas) AS Salcon", _
                                        "lce_ornum > 0 AND lce_gnumdoc = 0", _
                                        "lce_ortipo, lce_oranno, lce_orserie, lce_ornum, lce_orriga, lce_orfase") Then
        Return False
      End If
      For Each dtrTmp As DataRow In dttGr.Rows
        If Not oCldBoll.GetQuaevaAttivit(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, _
                                     NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                     NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                     dtrTmp!lce_ortipo.ToString, NTSCInt(dtrTmp!lce_oranno), _
                                     dtrTmp!lce_orserie.ToString, NTSCInt(dtrTmp!lce_ornum), _
                                     NTSCInt(dtrTmp!lce_orriga), NTSCInt(dtrTmp!lce_orfase), QuaEvasa, 0, dttMo) Then Return False
        If dttMo.Rows.Count > 0 Then
          'QUANTO ANCORA DA EVADERE DA attivit - QUANTO E' STATO EVASO IN QUESTO DOC
          dQuant = ArrDbl(NTSCDec(dttMo.Rows(0)!QuantDiff) - (NTSCDec(dtrTmp!QuantBuonaEva) + NTSCDec(dtrTmp!QuantScartEva)), 3)

          'nei documenti in modifica devo aggiungere quanto era già evaso con il documento corrente
          If bNew = False Then dQuant = ArrDbl(dQuant + QuaEvasa, 3)

          'ora dQta contiene quanto deve essere ancora evaso
          If dQuant <= 0 And NTSCStr(dtrTmp!Salcon) = "C" Then
            'La quantità evasa globale supera o è uguale a quella ordinata sul documento di origine
            If bNpienpSaltaControlli Then
              'si può evitare: forzo l'evasione a saldo della riga
              dttLAVCENT.Select("lce_ortipo = " & CStrSQL(dtrTmp!lce_ortipo) & _
                                " AND lce_oranno = " & dtrTmp!lce_oranno.ToString & _
                                " AND lce_orserie = " & CStrSQL(dtrTmp!lce_orserie) & _
                                " AND lce_ornum = " & dtrTmp!lce_ornum.ToString & _
                                " AND lce_orriga = " & dtrTmp!lce_orriga.ToString & _
                                " AND lce_orfase = " & dtrTmp!lce_orfase.ToString)(0)!lce_flevas = "S"
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668224471250000, _
                                "E' obbligatorio evadere a saldo la fase |" & dtrTmp!lce_orfase.ToString & _
                                "|, riga |" & dtrTmp!lce_orriga.ToString & "| dell'ATTIVITA' n° |" & _
                                dtrTmp!lce_ornum.ToString & "|, nelle LAVORAZIONI associato alla riga n° |" & _
                                dtrTmp!RigaT.ToString & "| del carico, in quanto la quantità lavorata " & _
                                "(buona + scartata) è uguale o supera quella originariamente preventivata " & _
                                "(differenza |" & (dQuant * -1).ToString(oApp.FormatQta) & "|).")))
              Return False
            End If
          End If    'If dQta <= 0 And NTSCStr(dttGr.Rows(i)!Salcon) = "C" Then
        End If    'If dttMo.Rows.Count > 0 Then
      Next    'For Each dtrTmp As DataRow In dttGr.Rows

      '----------------------------------------
      'Controlla che i tempi e le qta non superino quelli indicati
      'nel LAVCENT di tipo G
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "lce_gtipork, lce_ganno, lce_gserie, lce_gnumdoc, lce_griga, lce_grigaa, " & _
                                        "Sum(lce_qtaes) AS QuaEva, Sum(lce_qtascart) AS QuascaEva, " & _
                                        "Sum(lce_tempatte) AS TattEva, Sum(lce_tempese) AS TeseEva", _
                                        "lce_gnumdoc > 0", _
                                        "lce_gtipork, lce_ganno, lce_gserie, lce_gnumdoc, lce_griga, lce_grigaa") Then
        Return False
      End If
      For Each dtrTmp As DataRow In dttGr.Rows
        If Not oCldBoll.GetQuaevaLavcentG(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, _
                                     NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                     NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                     dtrTmp!lce_gtipork.ToString, NTSCInt(dtrTmp!lce_ganno), _
                                     dtrTmp!lce_gserie.ToString, NTSCInt(dtrTmp!lce_gnumdoc), _
                                     NTSCInt(dtrTmp!lce_griga), NTSCInt(dtrTmp!lce_grigaa), dttMo, _
                                     QuaEvasa, QuascaEva, TattEva, TeseEva) Then Return False
        If dttMo.Rows.Count > 0 Then
          dQuant = ArrDbl(NTSCDec(dttMo.Rows(0)!QuaDiff) - NTSCDec(dtrTmp!QUAEVA), 3)
          dQuantScart = ArrDbl(NTSCDec(dttMo.Rows(0)!QuascaDiff) - NTSCDec(dtrTmp!QuascaEva), 3)
          dTatt = ArrDbl(NTSCDec(dttMo.Rows(0)!TattDiff) - NTSCDec(dtrTmp!TattEva), 4)
          dTese = ArrDbl(NTSCDec(dttMo.Rows(0)!TeseDiff) - NTSCDec(dtrTmp!TeseEva), 4)

          'nei documenti in modifica devo aggiungere quanto era già evaso con il documento corrente
          If bNew = False Then
            dQuant = dQuant + QuaEvasa
            dQuantScart = dQuantScart + QuascaEva
            dTatt = dTatt + TattEva
            dTese = dTese + TeseEva
          End If

          If dTatt < 0 Or dTese < 0 Or dQuant < 0 Or dQuantScart < 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668239501406250, _
                                "I tempi e/o le quantità indicate nelle LAVORAZIONI superano quelli indicati " & _
                                "originariamente nell'AVANZAMENTO DI LAVORAZIONE n° |" & dtrTmp!lce_gnumdoc.ToString & _
                                "|, Riga |" & dtrTmp!lce_griga.ToString & "|, Progr. |" & dtrTmp!lce_grigaa.ToString & "|")))
            Return False
          End If

        End If
      Next    'For Each dtrTmp As DataRow In dttGr.Rows

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMo.Clear()
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckAcconti() As Boolean
    Dim dttTmp As New DataTable
    Dim strTipoAcc As String = ""
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim evnt As NTSEventArgs = Nothing
    Dim dttMo As New DataTable
    Dim ConsidOld As Decimal = 0
    Dim ConsidOldv As Decimal = 0
    Dim dVal As Decimal = 0
    Dim dValv As Decimal = 0

    Try
      'Esce se è un documento nota di prelievo
      If dttET.Rows(0)!et_tipork.ToString = "W" Then Return True

      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_tipobf).ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
      strTipoAcc = dttTmp.Rows(0)!tb_flacconto.ToString.ToUpper
      dttTmp.Clear()
      If strTipoAcc = "N" Then Return True

      If strTipoAcc = "S" Then
        'Controlla che non ci siano omaggi
        If NTSCDec(dttET.Rows(0)!et_totomag) <> 0 Or NTSCDec(dttET.Rows(0)!et_totomagv) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668328612343750, "Per documenti di acconto non è possibile indicare righe con omaggi.")))
          Return False
        End If
        'Controlla che non ci siano abbuoni
        If NTSCDec(dttET.Rows(0)!et_abbuono) <> 0 Or NTSCDec(dttET.Rows(0)!et_abbuonov) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668328772656250, "Per documenti di acconto non è possibile indicare abbuoni.")))
          Return False
        End If
        'Solo un codice iva è consentito
        If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_codiva", "ec_codiva <> 0", "ec_codiva") Then Return False
        If dttGr.Rows.Count > 1 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668330312968750, "Per documenti di acconto è ammesso un solo codice IVA nel corpo del documento")))
          Return False
        End If
        'Solo un codice contropartita è consentito
        If NTSCInt(dttETC.Rows(0)!tm_ccontr_2) <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668330957031250, "Per documenti di acconto è ammesso un solo codice contropartita.")))
          Return False
        End If
        'Se è una RIC. FISC 'F' o 'S' deve essere saldata
        If dttET.Rows(0)!et_tipork.ToString = "F" Or dttET.Rows(0)!et_tipork.ToString = "S" Then
          If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
            If NTSCDec(dttET.Rows(0)!et_totdocv) <> NTSCDec(dttET.Rows(0)!et_pagatov) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734888333647839, "Le Ricevute fiscali d'acconto devono essere completamente incassate (totale documento = incassato).")))
              Return False
            End If
          Else
            If NTSCDec(dttET.Rows(0)!et_totdoc) <> NTSCDec(dttET.Rows(0)!et_pagato) + NTSCDec(dttET.Rows(0)!et_pagato2) - NTSCDec(dttET.Rows(0)!et_resto) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668331416406250, "Le Ricevute fiscali d'acconto devono essere completamente incassate (totale documento = incassato).")))
              Return False
            End If
          End If
        End If
      End If
      '-----------------------
      'E' un doc. che evade acconti (SOLO SUI NUOVI DOCUMENTI)
      If strTipoAcc = "E" And bNew And (Not bAccontiVerificati) Then
        If bInNuovoDocSilent Then
          'ad esempio da crea documenti da note di prelievo. anche se ci fossero degli acocnti non sono in grado di farli selezionare
          'procedo senza selezione di acconti
          ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 130003132130004094, "Attenzione: il documento dovrebbe evadere degli acconti. In elaborazione automatica non verrà evaso nessun acconto!")))
        Else
          'verifica se ci sono acconti disponibili da usare: se non ci sono esce subito
          If Not oCldBoll.CheckAcconti(strDittaCorrente, bDocEmesso, lContoCF, _
                                      CBool(IIf(dttET.Rows(0)!et_scorpo.ToString = "S", True, False)), _
                                      NTSCInt(dttET.Rows(0)!et_valuta), NTSCInt(dttET.Rows(0)!et_commeca), _
                                      NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString) Then Return True

          'ci sono degli acconti: chiedo se farli faccio selezionare 
          evnt = New NTSEventArgs("ApriAccont:", "")
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return True
          Return False
        End If
      End If

      '----------------------
      'Controlla che l'importo di riferim. acconto non superi quello residuo
      If strTipoAcc = "E" Then
        dttGr.Clear()
        If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_actipo, ec_acanno, ec_acserie, ec_acnum, " & _
                                 " Sum(ec_valore) AS Consid, Sum(ec_valorev) AS Considv", _
                                 "ec_acnum > 0", _
                                 "ec_actipo, ec_acanno, ec_acserie, ec_acnum") Then Return False
        For Each dtrTmp As DataRow In dttGr.Rows
          If Not oCldBoll.GetValevaAcconti(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, _
                                       NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                       NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                       dtrTmp!ec_actipo.ToString, NTSCInt(dtrTmp!ec_acanno), _
                                       dtrTmp!ec_acserie.ToString, NTSCInt(dtrTmp!ec_acnum), _
                                       dttMo, ConsidOld, ConsidOldv) Then Return False
          If dttMo.Rows.Count > 0 Then
            dVal = ArrDbl(NTSCDec(dttMo.Rows(0)!Resid) + NTSCDec(dtrTmp!Consid), 3)
            dValv = ArrDbl(NTSCDec(dttMo.Rows(0)!Residv) + NTSCDec(dtrTmp!Considv), 3)

            'nei documenti in modifica devo aggiungere quanto era già evaso con il documento corrente
            If bNew = False Then
              dVal = dVal - ConsidOld
              dValv = dValv - ConsidOldv
            End If

            If NTSCInt(dttET.Rows(0)!et_valuta) > 0 Then
              If dValv < 0 Or dValv > NTSCDec(dttMo.Rows(0)!Residv) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668880341875000, _
                        "L'importo in valuta considerato (|" & (NTSCDec(dtrTmp!Considv) * -1).ToString(oApp.FormatImpVal) & _
                        "|), riferito al documento di acconto tipo '|" & dtrTmp!ec_actipo.ToString & _
                        "|', anno |" & dtrTmp!ec_acanno.ToString & "|, serie '|" & dtrTmp!ec_acserie.ToString & _
                        "|', numero |" & dtrTmp!ec_acnum.ToString & "|, eccede la parte residua.")))
                Return False
              End If
            Else
              If dVal < 0 Or dVal > NTSCDec(dttMo.Rows(0)!Resid) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668880604843750, _
                        "L'importo considerato (|" & (NTSCDec(dtrTmp!Consid) * -1).ToString(oApp.FormatImporti) & _
                        "|), riferito al documento di acconto tipo '|" & dtrTmp!ec_actipo.ToString & _
                        "|', anno |" & dtrTmp!ec_acanno.ToString & "|, serie '|" & dtrTmp!ec_acserie.ToString & _
                        "|', numero |" & dtrTmp!ec_acnum.ToString & "|, eccede la parte residua.")))
                Return False
              End If
            End If
          End If    'If dttMo.Rows.Count > 0 Then
        Next    'For Each dtrTmp As DataRow In dttGr.Rows
      End If    'If strTipoAcc = "E" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
      dttGr.Clear()
      dttMo.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckConai() As Boolean
    'un breve riassunto:
    'se il clietne gestisce il conai (impostato in bn__clie)
    'nel corpo del documento scelgo un articolo che in anagrafica ha impostato figli conai memorizzo in movmcona i figli,
    'poi quando salvo il documento (o usando il comando 'seleziona dati conai) creo nel corpo delle righe con gli articoli 
    'CONAI contenuti in movcona, raggruppandoli
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dttGr1 As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim dQuant As Decimal = 0
    Dim dQuantConai As Decimal = 0
    Dim dPrezzoMin As Decimal = 0
    Dim dPrezzoMax As Decimal = 0
    Dim i As Integer = 0
    Dim evnt As NTSEventArgs = Nothing

    Try
      If (bConai) And dttEt_conto.Rows(0)!an_gescon.ToString <> "N" And (bDocEmesso And dttET.Rows(0)!et_tipork.ToString <> "W") And dttET.Rows(0)!et_scorpo.ToString = "N" Then
      Else
        Return True
      End If

      '-----------------------
      If dttMOVCONA.Rows.Count = 0 Then GoTo PassaArtCona
      If Not oDttgr.NTSGroupBy(dttMOVCONA, dttGr, "mma_codart, Sum(mma_quant) AS QuantConai, Min(mma_prezzo) AS MinContrib, " & _
                                             " Max(mma_prezzo) AS MaxContrib, Min(mma_perescon) AS MinPerescon, " & _
                                             "Max(mma_perescon) AS MaxPerescon", "", "mma_codart") Then Return False
      If dttGr.Rows.Count = 0 Then
        'Non essendoci rige in TTMOVCONA non fa nulla, esce subito con OK
        GoTo PassaArtCona
      End If

      For Each dtrTmp As DataRow In dttGr.Rows
        'Controllo uniformaità tariffe su TTMOVCONA
        If NTSCDec(dtrTmp!MinContrib) <> NTSCDec(dtrTmp!MaxContrib) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668918000312500, "Nel dettaglio CONAI è codificato l'articolo |" & UCase(dtrTmp!mma_codart.ToString) & "| più volte con contributi CONAI differenti. Entrare nel 'Dettaglio CONAI' e rettificare i contributi indicati.")))
          Return False
        End If
        'Controllo uniformaità % esenzione su TTMOVCONA
        If ArrDbl(NTSCDec(dtrTmp!MinPerescon), 2) <> ArrDbl(NTSCDec(dtrTmp!MaxPerescon), 2) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668918445625000, "Nel dettaglio CONAI è codificato l'articolo |" & UCase(dtrTmp!mma_codart.ToString) & "| più volte con percentuali esenzioni differenti. Entrare nel 'Dettaglio CONAI' e rettificare le percentuali esenzione indicate.")))
          Return False
        End If

        dQuant = 0
        dQuantConai = NTSCDec(dtrTmp!QuantConai)
        If dttEt_conto.Rows(0)!an_gescon.ToString = "E" Then
          'Abbatte la quantità se il cliente ha una % di esenzione (solo se <> 0)
          If NTSCDec(dtrTmp!MinPerescon) <> 0 Then
            dQuantConai = ArrDbl(dQuantConai * ((100 - NTSCDec(dtrTmp!MinPerescon)) / 100), 3)
          End If
        End If
        If Not oDttgr.NTSGroupBy(dttEC, dttGr1, "Sum(ec_quant) AS QUANT, Min(ec_prezzo) AS MinPrezzo, Max(ec_prezzo) AS MaxPrezzo", _
                                                "ec_codart = " & CStrSQL(dtrTmp!mma_codart.ToString), "") Then Return False
        If dttGr1.Rows.Count > 0 Then
          dQuant = ArrDbl(NTSCDec(dttGr1.Rows(0)!QUANT), 3)
          dPrezzoMin = NTSCDec(dttGr1.Rows(0)!MinPrezzo)
          dPrezzoMax = NTSCDec(dttGr1.Rows(0)!MaxPrezzo)
        End If    'If dttGr1.Rows.Count > 0 Then
        dttGr1.Clear()
        'Controlla se differiscono le quantità
        If ArrDbl(dQuantConai, 3) <> ArrDbl(dQuant, 3) Then
          If dQuant = 0 Then
            If strProgChiamante = "BNORGNNP" Then
              ScriviRigheDaConai(True)
            Else
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128668934802031250, "Nel corpo del documento non sono presenti, tutte o in parte, le righe di articoli relativi al 'Dettaglio CONAI'. Provvedere alla generazione di tali righe?."))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
                ScriviRigheDaConai(True)
              End If
              Return False
            End If
          Else
            If strProgChiamante = "BNORGNNP" Then
              ScriviRigheDaConai(True)
            Else
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128668935482500000, "Nel corpo del documento sono presenti righe di articoli relativi al 'Dettaglio CONAI', ma con quantità diverse. Provvedere alla cancellazione di tali righe e alla successiva generazione?"))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
                ScriviRigheDaConai(True)
              End If
              Return False
            End If
          End If
        End If
          'Controlla se differiscono i prezzi
        If dPrezzoMax <> NTSCDec(dtrTmp!MinContrib) Or dPrezzoMin <> NTSCDec(dtrTmp!MinContrib) Then
          If strProgChiamante = "BNORGNNP" Then
            ScriviRigheDaConai(True)
          Else
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, oApp.Tr(Me, 128668935604375000, "Nel corpo del documento sono presenti righe di articoli relativi al 'Dettaglio CONAI', ma con prezzi (contributo) diversi. Provvedere alla cancellazione di tali righe e alla successiva generazione"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
              ScriviRigheDaConai(True)
            End If
            Return False
          End If
        End If
      Next    'For Each dtrTmp As DataRow In dttGr.Rows

      If bConaiDisableCheckCodart Then Return True

      '---------------------------
      'Ora controlla che le righe CONAI siano a sconti/provv. zero
      dtrT = dttEC.Select("ec_codart LIKE 'CONAI%' AND (ec_scont1 <> 0 OR ec_scont2 <> 0 OR ec_scont3 <> 0 OR ec_scont4 <> 0 OR ec_scont5 <> 0 OR ec_scont6 <> 0 OR ec_scontp <> 0 OR ec_scontv <> 0 OR ec_provv <> 0 OR ec_provv2 <> 0)")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668922930625000, "Nel corpo sono presenti articoli (riga |" & dtrT(0)!ec_riga.ToString & "|) di tipo CONAI, con sconti e/o provvigioni diversi da zero. Azzerare sconti/provvigioni su tali righe prima di salvare il documento.")))
        Return False
      End If
      'Ora controlla che il documento non abbia sconti di testata/piede
      'If ntscdec(edScont1) <> 0 Or ntscdec(edScont2) <> 0 Or ntscdec(edScopag) <> 0 Then
      '  MsgBox "Un documento con dettaglio CONAI non può possedere sconti di testata e/o piede.", vbExclamation, bsTtlMsg
      '  GoTo RoutineEnd
      'End If
PassaArtCona:
      If bConaiDisableCheckCodart Then Return True

      '---------------------------
      'Ora controlla la presenza di righe con codice che inizia per CONAI non presenti in TTMOVCONA
      dtrT = dttEC.Select("ec_codart LIKE 'CONAI%'")
      For i = 0 To dtrT.Length - 1
        If dttMOVCONA.Select("mma_codart = " & CStrSQL(dtrT(i)!ec_codart)).Length = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668925862812500, "Nel corpo sono presenti articoli (riga |" & dtrT(i)!ec_riga.ToString & "|) il cui codice inizia con 'CONAI', non derivanti dal 'Dettaglio CONAI'. Eliminare tali righe prima di salvare il documento.")))
          Return False
        End If
      Next    'For i = 0 To dtrT.Length - 1

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttGr1.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckRiemissione() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dConsid As Decimal = 0
    Dim dConsidv As Decimal = 0
    Dim dTmp As Decimal = 0
    Dim dTmp1 As Decimal = 0

    Try
      With dttET.Rows(0)

        If !et_tipork.ToString = "F" Then
          'Controlla se questa RF può essere salvata
          If Not IsRFsalvabile() And bNew = False Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668956162031250, "La Ricevuta fiscale non può essere aggiornata in quanto è stata parzialmente o totalmente riemessa. E' possibile solo ripristinare.")))
            Return False
          End If
          'Controlla se è una RF da riemettere
          If IsRFdaRiemettere() Then
            'Controlla che nelle righe del corpo non siano indicati omaggi P o O
            dtrT = dttEC.Select("ec_stasino = 'O' OR ec_stasino ='M' OR ec_stasino ='X'")
            If dtrT.Length > 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668957733437500, "Per la riga |" & dtrT(0)!ec_riga.ToString & "| non possono essere indicati omaggi di tipo 'Sconto merce', 'Sconto merce NC' o 'Omaggio impon.' in quanto si tratta di Ricevuta fiscale da riemettere.")))
              Return False
            End If

            'Calcola la parte già considerata con pagato+omaggi+abbuono
            dConsid = 0
            dConsidv = 0
            dTmp = NTSCDec(!et_totdoc) - NTSCDec(!et_totomag) - NTSCDec(!et_pagato) - NTSCDec(!et_pagato2) + NTSCDec(!et_resto) - NTSCDec(!et_abbuono)
            dTmp1 = NTSCDec(!et_imponib_1) + NTSCDec(!et_imponib_2) + NTSCDec(!et_imponib_3) + NTSCDec(!et_imponib_4) + NTSCDec(!et_imponib_5) + NTSCDec(!et_imponib_6) + NTSCDec(!et_imponib_7) + NTSCDec(!et_imponib_8)
            'parte considerata riemessa con omaggi+pagato+abbuono
            If NTSCDec(!et_totdoc) <> 0 Then
              dConsid = dTmp1 - ArrDbl((dTmp * dTmp1) / NTSCDec(!et_totdoc), oCldBoll.TrovaNdec(0))
            Else
              dConsid = 0
            End If
            If NTSCInt(!et_valuta) > 0 Then
              dTmp = NTSCDec(!et_totdocv) - NTSCDec(!et_totomagv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov)
              dTmp1 = NTSCDec(!et_imponibv_1) + NTSCDec(!et_imponibv_2) + NTSCDec(!et_imponibv_3) + NTSCDec(!et_imponibv_4) + NTSCDec(!et_imponibv_5) + NTSCDec(!et_imponibv_6) + NTSCDec(!et_imponibv_7) + NTSCDec(!et_imponibv_8)
              'parte considerata riemessa con omaggi+pagato+abbuono
              If NTSCDec(!et_totdocv) <> 0 Then
                dConsidv = dTmp1 - ArrDbl((dTmp * dTmp1) / NTSCDec(!et_totdocv), oCldBoll.TrovaNdec(NTSCInt(!et_valuta)))
              Else
                dConsidv = 0
              End If
            End If
            'Mette a posto i 2 campi
            '(sia sui doc aperti che nuovi)
            !et_totriemrf = dConsid
            !et_totriemrfv = dConsidv
          Else
            'Pulisce i campi della riemissione
            !et_salriemrf = "N"
            !et_totriemrf = 0
            !et_totriemrfv = 0
          End If
        End If

        '------------------------------
        If !et_tipork.ToString = "I" Then
          'Controlle sulla riemissione
          'il codimento deve essere completamente incassato
          'lbRimanenza = NTSCDec(!et_totdoc) - NTSCDec(!et_pagato) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag)
          If NTSCDec(!et_totdoc) - NTSCDec(!et_pagato) - NTSCDec(!et_pagato2) + NTSCDec(!et_resto) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag) <> 0 Or NTSCDec(!et_totdocv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov) - NTSCDec(!et_totomagv) <> 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668958599843750, "Una documento di Riemissione ricev. fiscali deve essere completamente incassato.")))
            Return False
          End If
        End If

      End With    'With dttET.Rows(0)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckEsistFinale() As Boolean
    Try
      Return TestPreSalvaSTD_CheckEsistFinale()
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckContoLavoro() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim i As Integer = 0
    Dim bOk As Boolean = False
    Try
      If dttET.Rows(0)!et_tipork.ToString = "W" Then Return True

      'Controllo sulla presenza dei campi CL
      'SBSubstMsg "Controllo obbligatorietà riferimenti c/lavoro in corso in corso..."
      'Sul magazzino 1
      dtrT = dttEC.Select("(xxo_flclavo = 'C' OR xxo_flclavo = 'F' OR xxo_flclavo = 'X') AND (xxo_tipcaum = 'S' OR xxo_tipcaum = 'F' OR xxo_tipcaum = 'Y' OR xxo_tipcaum = 'X') AND ec_clnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734888425063839, "Mancano i riferimenti alla bolla di carico in conto lavoro per la riga |" & dtrT(0)!ec_riga.ToString & "|; il tipo di causale di magazzino e il tipo del magazzino li richiedono.")))
        Return False
      End If

      'Sul magazzino 2
      dtrT = dttEC.Select("ec_magaz2 <> 0 AND (xxo_flclavo2 = 'C' OR xxo_flclavo2 = 'F' OR xxo_flclavo2 = 'X') AND (xxo_tipcaum2 = 'S' OR xxo_tipcaum2 = 'F' OR xxo_tipcaum2 = 'Y' OR xxo_tipcaum2 = 'X') AND ec_clnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669168533125000, "Mancano i riferimenti alla bolla di carico in conto lavoro per la riga |" & dtrT(0)!ec_riga.ToString & "|; il tipo di causale di magazzino e il tipo del magazzino li richiedono.")))
        Return False
      End If

      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'Sul magazzino degli impegni per i carichi di prod.
        'prima 'merce propria presso terzi' (c/to lavoro passivo)
        dtrT = dttECIMP.Select("xxo_flclavo = 'F' AND xxo_tipcaum = 'S' AND ec_clnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M' AND ec_fase = 0")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129082824525634766, "Mancano i riferimenti alla bolla di carico in conto lavoro per la riga |" & dtrT(0)!ec_riga.ToString & "| dello scarico di produzione (associata alla riga |" & dtrT(0)!ec_prriga.ToString & "|del carico); il tipo di causale di magazzino e il tipo del magazzino li richiedono.")))
          Return False
        End If

        'ora c/to lavoro attivo: se settata l'opzione 'AttribRifClavAttSuScarProdFaso=0' non devo testare le righe collegate ad padri gestiti a fase
        dtrT = dttECIMP.Select("(xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND xxo_tipcaum = 'S' AND ec_clnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M' AND ec_fase = 0")
        If dtrT.Length > 0 Then
          If bAttribRifCLavAttSuScarProdArtFasi = True Then
            bOk = True
          Else
            'devo escludere i padri gestiti a fase se il magaz delle mp di scarico è del cliente
            bOk = False
            For i = 0 To dtrT.Length - 1
              If dttEC.Select("ec_riga = " & dtrT(i)!ec_prriga.ToString & _
                                 " AND ec_codart <> 'D' AND ec_codart <> 'M' AND ec_fase = 0").Length > 0 Then
                bOk = True
                Exit For
              End If
            Next
          End If
          If bOk Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129082824849384766, "Mancano i riferimenti alla bolla di carico in conto lavoro per la riga |" & dtrT(0)!ec_riga.ToString & "| dello scarico di produzione (associata alla riga |" & dtrT(0)!ec_prriga.ToString & "|del carico); il tipo di causale di magazzino e il tipo del magazzino li richiedono.")))
            Return False
          End If
        End If
      End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then

      'Controllo sulla presenza dei campi CC
      dtrT = dttEC.Select("xxo_flclavo = 'C' AND xxo_tipcaum = 'E' AND ec_ccnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M' AND xxo_gesfasi = 'N'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669172834062500, "Mancano i riferimenti al carico di produzione, per il conto lavoro attivo, per la riga |" & dtrT(0)!ec_riga.ToString & "|; il tipo di causale di magazzino e il tipo del magazzino li richiedono.")))
        Return False
      End If

      'Controlla che la riga di carico di produzione esista (nel campi CC)
      dtrT = dttEC.Select("xxo_flclavo = 'C' AND xxo_tipcaum = 'E' AND ec_ccnum <> 0 AND ec_codart <> 'D' AND ec_codart <> 'M' AND xxo_gesfasi = 'N'")
      For i = 0 To dtrT.Length - 1
        If Not oCldBoll.EsisteMovmagRiga(strDittaCorrente, dtrT(i)!ec_cctipo.ToString, NTSCInt(dtrT(i)!ec_ccanno), _
                                        dtrT(i)!ec_ccserie.ToString, NTSCInt(dtrT(i)!ec_ccnum), NTSCInt(dtrT(i)!ec_ccriga)) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669177024375000, "I riferimenti al carico di produzione, per il conto lavoro attivo, per la riga |" & dtrT(i)!ec_riga.ToString & "|, fanno riferimento ad una riga di carico di produzione inesistente.")))
          Return False
        End If
      Next

      'controlla che se siamo in un 'reso lavorato c/lav attivo' (tipo E)
      'gli articoli a fasi devono essere gestoti a commessa=S
      dtrT = dttEC.Select("(xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND xxo_tipcaum = 'E' AND xxo_gesfasi = 'S' AND xxo_gescomm <> 'S'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669174491875000, "Articolo '|" & dtrT(0)!ec_codart.ToString & "|', riga |" & dtrT(0)!ec_riga.ToString & "|: è obbligatorio utilizzare una gestione a commessa su 'Ordini/impegni/magazzino' su questo articolo gestito a fasi, quando si gestisce il conto/lavoro attivo con causali di magazzino di tipo 'Reso lavorato con trasform. c/lav (att)'.")))
        Return False
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckModifContoLavoro() As Boolean
    '--------------------
    'CONTROLLA SE SULLE RIGHE DEL DOCUMENTO APERTO (in corso di salvataggio)
    'SONO STATE FATTE MODIFICHE NON AMMESSE PER IL C/LAVORO (articolo/fase/magazzino/
    '/causale/calo di quantità)
    Dim dttMM_ori As New DataTable
    Dim dttTmp As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim lRiga As Integer = 0
    Dim strMsg2 As String = ""
    Dim strMsg1 As String = ""
    Dim evnt As NTSEventArgs = Nothing

    Try
      'Crea un recordset tra le righe del temporaneo e le righe del residente (in vb6)
      'in net rileggo movmag originale
      If oCldBoll.GetMovmag(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                            dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), dttMM_ori) = False Then Return False
      For Each dtrMM_ori As DataRow In dttMM_ori.Rows
        dtrT = dttEC.Select("ec_riga = " & dtrMM_ori!mm_riga.ToString)
        If dtrT.Length > 0 Then
          'Solo se ci sono variazioni non ammesse per il conto lavoro
          If dtrT(0)!ec_codart.ToString <> dtrMM_ori!mm_codart.ToString Or _
              NTSCInt(dtrT(0)!ec_fase) <> NTSCInt(dtrMM_ori!mm_fase) Or _
              NTSCInt(dtrT(0)!ec_magaz) <> NTSCInt(dtrMM_ori!mm_magaz) Or _
              NTSCInt(dtrT(0)!ec_causale) <> NTSCInt(dtrMM_ori!mm_causale) Or _
              ArrDbl(NTSCDec(dtrT(0)!ec_quant), 3) < ArrDbl(NTSCDec(dtrMM_ori!mm_quant), 3) Then

            '------------------------------------------
            'Rileva la riga corrente
            lRiga = NTSCInt(dtrT(0)!ec_riga)
            '------------------------------------------
            'Compone la 2. parte del messaggio
            strMsg2 = ""
            If NTSCStr(dtrT(0)!ec_codart) <> NTSCStr(dtrMM_ori!mm_codart) Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672414477187500, "- Codice articolo corrente: |" & NTSCStr(dtrT(0)!ec_codart) & "|, precedente |" & NTSCStr(dtrMM_ori!mm_codart) & "|" & vbCrLf)
            End If
            If NTSCInt(dtrT(0)!ec_fase) <> NTSCInt(dtrMM_ori!mm_fase) Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415527968750, "- Fase articolo corrente: |" & dtrT(0)!ec_fase.ToString & "|, precedente |" & dtrMM_ori!mm_fase.ToString & "|" & vbCrLf)
            End If
            If NTSCInt(dtrT(0)!ec_magaz) <> NTSCInt(dtrMM_ori!mm_magaz) Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415516718750, "- Magazzino 1 corrente: |" & dtrT(0)!ec_magaz.ToString & "|, precedente |" & dtrMM_ori!mm_magaz.ToString & "|" & vbCrLf)
            End If
            If NTSCInt(dtrT(0)!ec_causale) <> NTSCInt(dtrMM_ori!mm_causale) Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415505312500, "- Causale corrente: |" & dtrT(0)!ec_causale.ToString & "|, precedente |" & dtrMM_ori!mm_causale.ToString & "|" & vbCrLf)
            End If
            If ArrDbl(NTSCDec(dtrT(0)!ec_quant), 3) < ArrDbl(NTSCDec(dtrMM_ori!mm_quant), 3) Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415495156250, "- La quantità della riga è stata diminuita da |" & ArrDbl(NTSCDec(dtrMM_ori!mm_quant), 3).ToString(oApp.FormatQta) & "| a |" & ArrDbl(NTSCDec(dtrT(0)!ec_quant), 3).ToString(oApp.FormatQta) & "|" & vbCrLf)
            End If
            If bRendiBloccantiAlertCLavoro Then
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415674218750, vbCrLf & "Impossibile procedere.")
            Else
              strMsg2 = strMsg2 & oApp.Tr(Me, 128672415780937500, vbCrLf & "Procedere ugualmente?")
            End If
            '------------------------------------------
            'Controlla che non sia già usato su qualche documento di scarico (in MOVCLA)
            If Not oCldBoll.CheckScaricoMovcla(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                            dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), lRiga, dttTmp) Then Return False
            If dttTmp.Rows.Count > 0 Then
              strMsg1 = oApp.Tr(Me, 128672420067500000, "Attenzione! La riga |" & lRiga & "| di carico in c/lavoro è " & _
                                                        "già utilizzata in altri documenti di scarico (primo documento " & _
                                                        "rilevato: |" & DescrTipork(NTSCStr(dttTmp.Rows(0)!mc_outipo)) & _
                                                        "|, anno |" & dttTmp.Rows(0)!mc_ouanno.ToString & _
                                                        "|, serie '|" & NTSCStr(dttTmp.Rows(0)!mc_ouserie) & _
                                                        "|', numero |" & dttTmp.Rows(0)!mc_ounum.ToString & _
                                                        "|, riga |" & dttTmp.Rows(0)!mc_ouriga.ToString & _
                                                        "|). A questa riga sono state effettuate variazioni NON ammesse:" & vbCrLf & vbCrLf)
              If bRendiBloccantiAlertCLavoro Then
                ThrowRemoteEvent(New NTSEventArgs("", strMsg1 & strMsg2))
                Return False
              Else
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg1 & strMsg2)
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
              End If
            End If
            dttTmp.Clear()
            '------------------------------------------
            'Controlla se la riga è refenziata nei campi mm_cl* (ne rileva l'estremo)
            If Not oCldBoll.CheckScaricoMovcla1(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), lRiga, dttTmp) Then Return False
            If dttTmp.Rows.Count > 0 Then
              strMsg1 = oApp.Tr(Me, 128672447779375000, "Attenzione! La riga |" & lRiga & "| di carico in c/lavoro è " & _
                                            "già utilizzata in altri documenti di scarico (primo documento rilevato: |" & _
                                            DescrTipork(NTSCStr(dttTmp.Rows(0)!mm_tipork)) & "|, anno |" & _
                                            dttTmp.Rows(0)!mm_anno.ToString & "|, serie '|" & _
                                            NTSCStr(dttTmp.Rows(0)!mm_serie) & "|', numero |" & _
                                            dttTmp.Rows(0)!mm_numdoc.ToString & "|, riga |" & dttTmp.Rows(0)!mm_riga.ToString & _
                                            "|). A questa riga sono state effettuate variazioni NON ammesse:" & vbCrLf & vbCrLf)
              If bRendiBloccantiAlertCLavoro Then
                ThrowRemoteEvent(New NTSEventArgs("", strMsg1 & strMsg2))
                Return False
              Else
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg1 & strMsg2)
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
              End If
            End If
            dttTmp.Clear()
            '------------------------------------------
            'Controlla se la riga è refenziata nei campi mm_cc* (ne rileva l'estremo)
            'Solo se il documento è un carico di produzione
            If dttET.Rows(0)!et_tipork.ToString = "T" Then
              If Not oCldBoll.CheckScaricoMovcla2(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                                                  dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), lRiga, dttTmp) Then Return False
              If dttTmp.Rows.Count > 0 Then
                strMsg1 = oApp.Tr(Me, 128672447795312500, "Attenzione! La riga |" & lRiga & "| di carico in c/lavoro " & _
                                              "(produzione) è già utilizzata in altri documenti di scarico (primo documento rilevato: |" & _
                                              DescrTipork(NTSCStr(dttTmp.Rows(0)!mm_tipork)) & "|, anno |" & _
                                              dttTmp.Rows(0)!mm_anno.ToString & "|, serie '|" & _
                                              NTSCStr(dttTmp.Rows(0)!mm_serie) & "|', numero |" & _
                                              dttTmp.Rows(0)!mm_numdoc.ToString & "|, riga |" & dttTmp.Rows(0)!mm_riga.ToString & _
                                              "|). A questa riga sono state effettuate variazioni NON ammesse:" & vbCrLf & vbCrLf)
                If bRendiBloccantiAlertCLavoro Then
                  ThrowRemoteEvent(New NTSEventArgs("", strMsg1 & strMsg2))
                  Return False
                Else
                  evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg1 & strMsg2)
                  ThrowRemoteEvent(evnt)
                  If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
                End If
              End If
              dttTmp.Clear()
            End If
          End If    'If dtrT(0)!ec_codart.ToString <> dtrMM_ori!mm_codart.ToString Or _....
        End If    'If dtrT.Length > 0 Then
      Next    'For Each dtrMM_ori As DataRow In dttMM_ori.Rows

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMM_ori.Clear()
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckCa2() As Boolean
    '----------------------------
    'come devono essere fatte le registrazioni di CA

    '----------------------------
    'per sapere se movmag.mm_contocontr deve andare in priana2 in DARE oppure AVERE, 
    'mi baso su tabcaum.tb_testci (indipendentemente che sia DARE CG o DARE MG / AVERE CG o AVERE MG), 
    'se ' ' .... non va in ca: c'è un test in tabcaum per non far settare causali di CA se causale nulla
    'deroga per carichi da produzione: mm_concocontr va sempre in dare, anche se tb_testci = A o B
    'per le spese di piede mi baso sul fatto che sia un documento emesso o ricevuto e prendo sempre contropartirte, MAI conti da tabpeve/tabpeac

    '----------------------------
    'vengono portate in CA sempre e solo le righe e spese di piede con contocg che gestisce 
    'la ca e QTA e/o VALORE diversi da 0!! (se il contocg gestisce la CA, la CA deve essere gestita sempre)

    '----------------------------
    'come devono essere fatte le registrazioni di CA
    'a) DDT EMESSO / BOLLA MOVIM. INTERNA
    'causale tabcaca presa da tabcaum
    'valore preso da movmag.mm_valore
    'fatt da emettere (preso da tabcove.tb_concovag)   A    movmag.mm_contocontr
    'per spese di piede
    'causale tabcaca presa da tabtpbf
    'fatt da emettere (preso da tabcove.tb_concovag di controp di tabpeve/peac per quel tipo di spesa) A    sottoconti presi da controp di tabpeve/peac

    'oppure, per reso a fornitore
    'movmag.mm_contocontr   A  fatture da ricevere (preso da tabcove.tb_concovag)

    'b) DDT RICEVUTO
    'come per ddt emessi, ma registraz. del tipo
    'costo    A    fatt. da ricevere (preso da tabcove.tb_concovag)

    'c) carico da produzione
    '   1) riga qta prodotta (unica riga solo in dare):
    'causale da tabpecx che movim. solo la qta
    'qta da movmaga riga 'T'
    'sottoconto 'q.ta prodotta' non gestito a valore preso tabcove.tb_concova2 id movmag riga T
    '
    '   2) materiali consumati (tutto da righe di scarico 'U', sia valore che sottoconti di CA)
    'causale tabcaca da tabcaum di riga U
    'valore = mm_valore di movmag riga U
    ''MP consumate x produzione' (movmag.mm_contocontr riga 'U')    A   'consumi di MP' preso tabcove.tb_concovag (è solo un conto di giro)
    '
    '   3) lavorazioni (sia interne che esterne)
    'causale tabcaca da tabcaum di riga T
    'valore da lavcent.
    ''lavorazioni interne/esterne assegnazione' (lavcent.lce_contocontr riga 'U')    A   'lavorazioni interne/esterne prodotte' preso tabcove.tb_concovag di lavcent (è solo un conto di giro)
    'spese di piede come per DDT ricevuto

    'd) DDT EMESSI/RICEVUTI CON CAUSALE DOPPIA (trasferimenti tra magazzini)
    'su prima riga di keymag, quella di scarico
    'causale tabcaca presa da tabcaum
    'valore preso da movmag.mm_valore
    ''MP c/to transito' preso da tabcove.tb_concovag (no gestione centro,linea,commessa,...    A   'MP trasferimenti' da movmag.mm_contocontr
    'su seconda riga di keymag, quella di carico
    ''MP arrivi / assegnazioni' preso da tabcove.tb_concova2      A 'MP c/to transito' preso da tabcove.tb_concovag (no gestione centro,linea,commessa,...

    'OCCHIO: se documento che muove due magazzini devo inserire in priana2 la riga 2 volte
    'NON SONO GESTITI I DATI IN VALUTA

    'se documento già fatturato non verrà più scritta priana2, visto che il giro è:
    'quando registro DDT ricevuto rilevo 'costi a fatt da ricevere'
    'quando registro la FATT DIFF ricevuta (fadi/fdin) cancello 'costi a fatt da ric'
    'quando porto in contabilità (pnfa) registro la ca2 collegata sia alla cg che alle righe di movmag
    'se cancello la fattura differita devo anche rigenerare le righe di priana2 da movmag

    'NON SI POSSONO GESTIRE IN CA LE FATT IMMEDIATE RICEVUTE, BISOGNA PASSARE SEMPRE PER DDT RIC E FT DIFF RICEVUTE
    'LE FATTURE IMMEDIATE EMESSE ANDRANNO IN CA2 SOLO DA PNFA, VISTO CHE UNA VOLTA EMESSE POSSONO SUBITO ESSERE PORTATE IN CG

    'Dim dttTmp As New DataTable
    'Dim dttTmp1 As New DataTable
    'Dim dttTmp2 As New DataTable
    Dim dttAnagca As New DataTable
    Dim dttAnagca2 As New DataTable
    Dim strMsg As String = ""
    Dim nItem As Integer = 0
    Dim nCodcaca As Integer = 0
    Dim lConto As Integer = 0
    Dim lConto2 As Integer = 0

    Dim dtrMm() As DataRow = Nothing  'elenco righe da testare
    Dim dtrT() As DataRow = Nothing
    Dim i As Integer = 0
    Dim nCodcove As Integer = 0
    Dim lContocg As Integer = 0
    Dim bOk As Boolean = False
    Dim nCodStab As Integer = 0
    Dim strTmp As String = ""

    Try
      '----------------------------
      'se non è attivo il modulo della CA2 esco
      If CBool(lModuliSupDittaDitt And bsModSupCAE) = False Then Return True
      If Not oCldBoll.CheckEsercizioInCa2(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString) Then Return True

      Select Case NTSCStr(dttET.Rows(0)!et_tipork).ToUpper
        Case "B", "M", "Z", "T"
          'unici tipi gestiti dalla CA2 direttamente dal magazzino
        Case Else
          'va fatto anche per gli altri tipork, visto che non deve essere generata priana2 da movmag, 
          'ma potrebbe essere necessario farlo da pnfa
          'Return True
      End Select

      '----------------------------
      'CONTROLLO DATI DEL CORPO

      'ESCLUDO LE RIGHE CHE NON MOVIMENTANO L'ANALITICA (NON DOVRANNO ANDARE IN CA)
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'scarichi collegati 
        dtrMm = dttECIMP.Select("xxo_testci <> ' ' AND (ec_quant <> 0 OR ec_valore <> 0)", "ec_riga")
      Else
        dtrMm = dttEC.Select("(xxo_testci <> ' ' OR xxo_testci2 <> ' ') AND (ec_quant <> 0 OR ec_valore <> 0)", "ec_riga")
      End If
      For i = 0 To dtrMm.Length - 1
        For nItem = 1 To NTSCInt(IIf(NTSCInt(dtrMm(i)!ec_causale2) <> 0, 2, 1))
          'sevo ripetere il giro 2 volte per le causali doppie
          If nItem = 1 Then
            'caso standard
            If NTSCStr(dtrMm(i)!xxo_testci).Trim = "" Then GoTo SALTATEST_CORPO
          Else
            'caso secondo magazzinor pe causali doppie
            If NTSCStr(dtrMm(i)!xxo_testci2).Trim = "" Then GoTo SALTATEST_CORPO
          End If    'If nItem = 1 Then
          nCodcove = NTSCInt(dtrMm(i)!ec_controp)

          lConto = 0
          lConto2 = 0

          'verifico se la riga ha un conto di CG collegato a tabcove con contocg gestito a ca: se contocg = 0 è come se fosse gestito in CA
          dtrT = dsTabcove.Tables("TABCOVE").Select("tb_codcove = " & nCodcove.ToString)
          If NTSCInt(dtrT(0)!tb_concove) <> 0 And NTSCStr(dtrT(0)!xx_flci).Trim = "" Then GoTo SALTATEST_CORPO 'il conto CG non gestisce la CA
          If NTSCInt(dtrT(0)!tb_concove) = 0 And NTSCInt(dtrT(0)!tb_concova) = 0 Then GoTo SALTATEST_CORPO 'se non c'è ne conto cg ne conto ca salto
          lContocg = NTSCInt(dtrT(0)!tb_concove)

          '-------------------------
          'se sono qui vuol dire che la riga deve andare a finire in CA

          '-------------------------
          'determino la causale di CA
          If nItem = 1 Then
            nCodcaca = NTSCInt(dtrMm(i)!xxo_codcacadd)
            lConto = NTSCInt(dtrMm(i)!ec_contocontr)
          Else
            nCodcaca = NTSCInt(dtrMm(i)!xxo_codcacadd2)
            lConto = NTSCInt(dtrT(0)!tb_concova2)   'movimento con causali doppie: questo conto è quello da usarsi sulla riga di carico
          End If
          If nCodcaca = 0 Then
            If dttET.Rows(0)!et_tipork.ToString = "T" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277347409199219, "ATTENZIONE: la riga di scarico |" & dtrMm(i)!ec_riga.ToString & "| (collegata alla riga di carico |" & dtrMm(i)!ec_prriga.ToString & "|) contiene dei costi/ricavi da rilevare in CA ma nella tabelle delle causali di magazzino non è indicata la causale di Contabilità analitica da utilizzare")))
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277115869277344, "ATTENZIONE: la riga |" & dtrMm(i)!ec_riga.ToString & "| contiene dei costi/ricavi da rilevare in CA ma nella tabelle delle causali di magazzino non è indicata la causale di Contabilità analitica da utilizzare")))
            End If
            Return False
          End If

          '-------------------------
          'decodifica del conto principale (movmag.mm_contocontr)
          If lConto = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277351772011719, "ATTENZIONE!" & vbCrLf & _
              "Il documento contiene dei costi/ricavi da rilevare in CA ma, nella tabella delle contropartite vendite, per il codice |" & NTSCInt(dtrMm(i)!ec_controp).ToString & "| non è indicata la contropartita di CA da utilizzare." & vbCrLf & _
              "Aggiornare la tabella delle contropartite e ricaricare il programma di Gestione Documenti.")))
            Return False
          End If
          If dttAnagca.Rows.Count = 0 Then
            oCldBoll.ValCodiceDb(lConto.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca)
          Else
            If NTSCInt(dttAnagca.Rows(0)!ac_conto) <> lConto Then
              oCldBoll.ValCodiceDb(lConto.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca)
            End If
          End If
          If dttAnagca.Rows.Count = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129301651510830078, "ATTENZIONE: il documento contiene dei costi/ricavi da rilevare in CA sul conto |" & lConto.ToString & "| che non risulta essere presente nel piano dei conti di CA. (Contropartita |" & NTSCInt(dtrMm(i)!ec_controp).ToString & "|)")))
            Return False
          End If


          '-------------------------
          'cerco il conto contropartita da utilizzare per la seconda riga di ca (quella per la quadratura). 
          'lo prendo da tabcove.tb_concovag
          lConto2 = NTSCInt(dtrT(0)!tb_concovag)
          If lConto2 = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277425994121094, "ATTENZIONE!" & vbCrLf & _
              "Il documento contiene dei costi/ricavi da rilevare in CA ma, nella tabella delle contropartite vendite, per il codice |" & NTSCInt(dtrMm(i)!ec_controp).ToString & "| non è indicata la contropartita di 'giro' da utilizzare." & vbCrLf & _
              "Aggiornare la tabella delle contropartite e ricaricare il programma di Gestione Documenti.")))
            Return False
          End If
          If dttAnagca2.Rows.Count = 0 Then
            oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
          Else
            If NTSCInt(dttAnagca2.Rows(0)!ac_conto) <> lConto2 Then
              oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
            End If
          End If
          If dttAnagca2.Rows.Count = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129301652227705078, "ATTENZIONE: il documento contiene dei costi/ricavi da rilevare in CA sul conto |" & lConto2.ToString & "| che non risulta essere presente nel piano dei conti di CA. (Contropartita |" & NTSCInt(dtrMm(i)!ec_controp).ToString & "|)")))
            Return False
          End If

          '-------------------------
          'messaggio di base
          If dttET.Rows(0)!et_tipork.ToString <> "T" Then
            strMsg = oApp.Tr(Me, 129270529761875000, "ATTENZIONE. Sulla riga |" & dtrMm(i)!ec_riga.ToString & "| è richiesta dalla 'contabilità analitica duplice contabile' (causale di CA |" & nCodcaca.ToString & "|, conto |" & lConto.ToString & "|, contropartita |" & lConto2.ToString & "|) l'indicazione ")
          Else
            strMsg = oApp.Tr(Me, 129270518107939453, "ATTENZIONE. Sulla riga di scarico |" & dtrMm(i)!ec_riga.ToString & "| collegata alla riga di carico |" & dtrMm(i)!ec_prriga.ToString & "| è richiesta dalla 'contabilità analitica duplice contabile'  (causale di CA |" & nCodcaca.ToString & "|, conto |" & lConto.ToString & "|, contropartita |" & lConto2.ToString & "|) l'indicazione")
          End If


          '-------------------------
          'INIZIO I TEST
          'gestione date competenza
          If NTSCInt(dtrT(0)!tb_concove) <> 0 Then
            If NTSCStr(dtrT(0)!xx_accperi).ToUpper <> dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper Or _
              NTSCStr(dtrT(0)!xx_accperi).ToUpper <> dttAnagca2.Rows(0)!ac_accperi.ToString.ToUpper Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272889980166015, " del 'RICHIEDI DATE' non è lo stesso sui conti coinvolti (conto CG |" & lContocg.ToString & "|).")))
              Return False
            End If
          End If
          'se carico da prod devo prendere le date dal T, non dall'U
          If dtrMm(i)!ec_tipork.ToString = "U" Then
            Select Case dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper
              Case "S"  'periodo di competenza
                If NTSCDate(dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datini).ToShortDateString = NTSCDate(dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datfin).ToShortDateString Then
                  ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129509529756914062, " della data inizio competenza DEVE essere DIVERSA dalla data di fine competenza nella riga di carico (i conti di CA sono gestiti a PERIODO di competenza economica).")))
                  Return False
                End If
              Case "D"  'data competenza
                If nDatiniCompMese = -1 Then
                  If NTSCDate(dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datini).ToShortDateString < NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1).ToShortDateString Then
                    ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 130945659471800287, " la data inizio competenza SULLA RIGA DI CARICO: tale data è INFERIORE al primo del mese della data del documento (i conti di CA sono gestiti a DATA di competenza economica): proseguo ugualmente.")))
                  End If
                Else
                  If NTSCDate(dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datini).ToShortDateString < NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
                    ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129509529773876953, " la data inizio competenza SULLA RIGA DI CARICO: tale data è INFERIORE alla data del documento (i conti di CA sono gestiti a DATA di competenza economica): proseguo ugualmente.")))
                  End If
                End If
              Case "N"  'date non gestite
                If NTSCDate(dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datini).ToShortDateString <> NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
                  'ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272905723623047, " della data inizio competenza DEVE essere uguale alla data del documento nella riga di carico (i conti di CA non gestiscono le date di competenza economica).")))
                  'Return False
                  'non do il messaggio e correggo al volo la data: se importo righe d'ordine o di nota di prel 
                  'è normale che la data di inizio sia uguale alla data dell'ordine/della nota che è sicuramente diversa dalla data di questo documento
                  dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0)!ec_datini = dttET.Rows(0)!et_datdoc
                  dttEC.Select("ec_riga = " & dtrMm(i)!ec_prriga.ToString)(0).AcceptChanges()
                End If
            End Select
          Else
            Select Case dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper
              Case "S"  'periodo di competenza
                If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString = NTSCDate(dtrMm(i)!ec_datfin).ToShortDateString Then
                  ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272892637089843, " della data inizio competenza DEVE essere DIVERSA dalla data di fine competenza (i conti di CA sono gestiti a PERIODO di competenza economica).")))
                  Return False
                End If
              Case "D"  'data competenza
                If nDatiniCompMese = -1 Then
                  If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString < NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1).ToShortDateString Then
                    ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 130945660389472754, " la data inizio competenza: tale data è INFERIORE al primo del mese della data del documento (i conti di CA sono gestiti a DATA di competenza economica): proseguo ugualmente.")))
                  End If
                Else
                  If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString < NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
                    ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129509518087333984, " la data inizio competenza: tale data è INFERIORE alla data del documento (i conti di CA sono gestiti a DATA di competenza economica): proseguo ugualmente.")))
                  End If
                End If
              Case "N"  'date non gestite
                If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString <> NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
                  'ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272892183652343, " della data inizio competenza DEVE essere uguale alla data del documento (i conti di CA non gestiscono le date di competenza economica).")))
                  'Return False
                  'non do il messaggio e correggo al volo la data: se importo righe d'ordine o di nota di prel 
                  'è normale che la data di inizio sia uguale alla data dell'ordine/della nota che è sicuramente diversa dalla data di questo documento
                  dtrMm(i)!ec_datini = dttET.Rows(0)!et_datdoc
                  dtrMm(i).AcceptChanges()
                End If
            End Select
          End If

          'gestione centro
          If (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper = "S") And NTSCInt(dtrMm(i)!ec_codcena) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129270519476562500, " del centro di costo/ricavo.")))
            Return False
          End If
          'gestione commessa
          If (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper = "S") And NTSCInt(dtrMm(i)!ec_commeca) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129270519490800781, " della commessa.")))
            Return False
          End If
          'gestione linea/famiglia
          If (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper = "S") And NTSCStr(dtrMm(i)!ec_codcfam).Trim = "" Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129270519350644531, " della linea/famiglia.")))
            Return False
          End If
          'gestione divisione
          If (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper = "S") And NTSCInt(dtrMm(i)!ec_coddivi) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129270519764716797, " della divisione.")))
            Return False
          End If
          'gestione cliente
          If (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_codcli) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270520103916015, "ATTENZIONE. la gestione della 'contabilità analitica duplice contabile' richiede l'indicazione del cliente di CA in testata documento (il dato è richiesto dalla contropartita di CA indicata sulla riga |" & dtrMm(i)!ec_riga.ToString & "|.")))
            Return False
          End If
          'gestione stabilimento: prendo lo stabilimento dal magazzino 
          bOk = False
          If dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper = "S" Or dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper = "S" Then
            'il magaz 1 deve sempre essere presente ...
            nCodStab = 0
            If nItem = 1 Then
              nCodStab = NTSCInt(dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMm(i)!ec_magaz).ToString)(0)!tb_codstab)
            Else
              nCodStab = NTSCInt(dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMm(i)!ec_magaz2).ToString)(0)!tb_codstab)
            End If
            If nCodStab <> 0 Then bOk = True
            'non posso imporre lo stabilimento sempre sul magaz 1, visto che il documento potrebbe servire per 
            'spostare la merce dal magaz accettazione al magazzino di ca e nel magaz di accettazione non aver 
            'indicato lo stabilimento
            If bOk = False Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271328571367187, " dello stabilimento/filiale/negozio ma nella tabella dei magazzini, per i magazzini indicati nella riga in analisi, non è riportato tale dato.")))
              Return False
            End If
          End If
          'gestione articolo: non possibile: non posso salvare documenti senza articolo !!!!

          'se ho indicato un centro ed anche una linea/comm/stab/divi/arti/.... ed il dato è richiesto o facoltativo (diversamente non viene salvato) il centro deve essere principale!
          If NTSCInt(dtrMm(i)!ec_codcena) <> 0 And (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper <> "N") Then
            If (NTSCInt(dtrMm(i)!ec_commeca) <> 0 And (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper <> "N")) Or _
               (NTSCStr(dtrMm(i)!ec_codcfam).Trim <> "" And (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper <> "N")) Or _
               (NTSCInt(dtrMm(i)!ec_coddivi) <> 0 And (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper <> "N")) Or _
               (NTSCInt(dttET.Rows(0)!et_codcli) <> 0 And (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper <> "N")) Or _
               (nCodStab <> 0 And (dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper <> "N")) Or _
               ((dttAnagca.Rows(0)!ac_richarti.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richarti.ToString.ToUpper <> "N")) Then
              strTmp = oCldBoll.GetTipcenaCa2(strDittaCorrente, NTSCInt(dtrMm(i)!ec_codcena))
              If strTmp <> "P" And strTmp <> "*" Then
                Dim strTmp1 As String = oApp.Tr(Me, 129351511824082031, " di scarico collegata alla riga di carico |" & _
                        dtrMm(i)!ec_prriga.ToString & "| ")
                Dim strIIf1 As String = NTSCStr(IIf(dttET.Rows(0)!et_tipork.ToString = "T", strTmp1, ""))
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129351509737929687, _
                        "ATTENZIONE: Riga |" & dtrMm(i)!ec_riga.ToString & "||" & strIIf1 & _
                        "|: " & vbCrLf & "se si indica Commessa o Linea/famiglia o " & _
                        "Divisione o Stabilimento/filiale/negozio o Cliente o Articolo " & _
                        "(e tale dato risulta obbligatorio o facontativo nell'anagrafica del sottoconto di CA|" & _
                        dttAnagca.Rows(0)!ac_conto.ToString & "| / |" & dttAnagca2.Rows(0)!ac_conto.ToString & "|) " & _
                        "l'eventuale centro indicato deve essere di tipo 'Principale'")))
                Return False
              End If
            End If
          End If

SALTATEST_CORPO:
        Next    'For nItem = 1 To NTSCInt(IIf(NTSCInt(dtrMm(i)!ec_controp2) <> 0, 2, 1))
      Next    'For i = 0 To dtrTmp.Length - 1

      '----------------------------
      'CONTROLLO LAVORAZIONI E QTA PRODOTTA
      If Not TestPreSalvaTestmag_CheckCa2_Lavorazioni() Then Return False

      '----------------------------
      'CONTROLLO SPESE DI PIEDE
      If Not TestPreSalvaTestmag_CheckCa2_SpesePiede() Then Return False

      '----------------------------
      'il test sotto deve essere fatto quando i test di coerenza CA sono già stati fatti, 
      'altrimenti c'è il rischio che le causali di ca non siano state impostate anche se richieste
      If bNew = False Then
        'se in modifica controllo se posso cambiare le righe di priana2 (potrebbero essere collegate anche alla reg. di CG)
        If Not TestPreCancellaTestmag_CheckCa2(True, False, False) Then Return False
      Else
        If dttEC.Select("xxo_codcacadd <> 0").Length = 0 And dttEC.Select("xxo_codcacadd2 <> 0").Length = 0 And _
           dttEC.Select("xxo_codcacalv <> 0").Length = 0 And dttECIMP.Select("xxo_codcacadd <> 0").Length = 0 Then
          'se il documento non è collegato alla CA2 posso proseguire
        Else
          '----------------------------
          'non posso modificare/cancellare se in tabanaz la data congelamento CA è successiva alla data del documento
          If NTSCDate(dttAnaz.Rows(0)!tb_dtulaca) >= NTSCDate(dttET.Rows(0)!et_datdoc) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129273987278515625, "Documento non inseribile: dovrebbe alimentare la Contabilità analitica 'Duplice contabile' ma la data del documento non è successiva alla data ultimo aggiornamento contabilità analitica indicata in anagrafica ditta (|" & NTSCDate(dttAnaz.Rows(0)!tb_dtulaca).ToShortDateString & "|)")))
            Return False
          End If
        End If

      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttAnagca.Clear()
      dttAnagca.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckCa2_Lavorazioni() As Boolean
    Dim nCodcove As Integer = 0
    Dim dtrT() As DataRow = Nothing
    Dim dtrMMPadre() As DataRow = Nothing   'riga di movmag tipo T a cui si riferiscono le righe di lavorazione
    Dim lContocg As Integer = 0
    Dim nCodcaca As Integer = 0

    Dim lConto As Integer = 0
    Dim lConto2 As Integer = 0
    Dim dttAnagca As New DataTable
    Dim dttAnagca2 As New DataTable

    Dim strMsg As String = ""

    Dim dtrMm() As DataRow = Nothing
    Dim i As Integer = 0
    Dim strTmp As String = ""

    Dim nCentro As Integer = 0
    Dim lCommeca As Integer = 0
    Dim strCodcfam As String = ""

    Try

      If dttET.Rows(0)!et_tipork.ToString <> "T" Then Return True

      '----------------------------
      'CONTROLLO LAVORAZIONI SU CARICHI DA PRODUZIONE

      'ESCLUDO LE RIGHE CHE NON MOVIMENTANO QTA o VALORE
      For Each dtrL As DataRow In dttLAVCENT.Select("lce_valore <> 0 OR lce_valmo <> 0 OR lce_qtaes <> 0 OR lce_qtascart <> 0", "lce_riga, lce_rigaa")

        dtrMMPadre = dttEC.Select("ec_riga = " & dtrL!lce_riga.ToString)

        If bTerzista Then
          nCodcove = NTSCInt(dtrMMPadre(0)!ec_controp)
        Else
          nCodcove = NTSCInt(dtrL!lce_controp)
        End If

        'verifico se la riga ha un conto di CG collegato a tabcove con contocg gestito a ca: se contocg = 0 è come se fosse gestito in CA
        dtrT = dsTabcove.Tables("TABCOVE").Select("tb_codcove = " & nCodcove.ToString)
        If NTSCInt(dtrT(0)!tb_concove) <> 0 And NTSCStr(dtrT(0)!xx_flci).Trim = "" Then GoTo SALTATEST_LAVORAZ 'il conto CG non gestisce la CA
        If NTSCInt(dtrT(0)!tb_concove) = 0 And NTSCInt(dtrT(0)!tb_concova) = 0 Then GoTo SALTATEST_LAVORAZ 'se non c'è ne conto cg ne conto ca salto
        lContocg = NTSCInt(dtrT(0)!tb_concove)


        '-------------------------
        'determino la causale di CA
        nCodcaca = NTSCInt(dtrMMPadre(0)!xxo_codcacalv)
        If nCodcaca = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277368661601563, "ATTENZIONE: il documento contiene delle lavorazioni da rilevare in CA ma nella tabella delle causali di magazzino, per il codice |" & dtrMMPadre(0)!ec_causale.ToString & "| non è indicata la causale di CA da utilizzare per le lavorazioni")))
          Return False
        End If

        '-------------------------
        'decodifica del conto principale (movmag.mm_contocontr se prod da terzista, altrimenti lavcent.lce_contocontr)
        If bTerzista Then
          lConto = NTSCInt(dtrMMPadre(0)!ec_contocontr)
        Else
          lConto = NTSCInt(dtrL!lce_contocontr)
        End If

        If lConto = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277364429902344, "ATTENZIONE: il documento contiene delle lavorazioni da rilevare in CA ma nella tabella delle contropartite vendite, per il codice |" & nCodcove.ToString & "| non è indicata la contropartita di CA da utilizzare")))
          Return False
        End If
        If dttAnagca.Rows.Count = 0 Then
          oCldBoll.ValCodiceDb(lConto.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca)
        Else
          If NTSCInt(dttAnagca.Rows(0)!ac_conto) <> lConto Then
            oCldBoll.ValCodiceDb(lConto.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca)
          End If
        End If

        '-------------------------
        'cerco il conto contropartita da utilizzare per la seconda riga di ca (quella per la quadratura). 
        'lo prendo da tabcove.tb_concovag
        lConto2 = NTSCInt(dsTabcove.Tables("TABCOVE").Select("tb_codcove = " & nCodcove.ToString)(0)!tb_concovag)
        If lConto2 = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277426017880859, "ATTENZIONE!" & vbCrLf & _
            "Il documento contiene dei costi/ricavi da rilevare in CA ma, nella tabella delle contropartite vendite, per il codice |" & nCodcove.ToString & "| non è indicata la contropartita di 'giro' da utilizzare." & vbCrLf & _
            "Aggiornare la tabella delle contropartite e ricaricare il programma di Gestione Documenti.")))
          Return False
        End If
        If dttAnagca2.Rows.Count = 0 Then
          oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
        Else
          If NTSCInt(dttAnagca2.Rows(0)!ac_conto) <> lConto2 Then
            oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
          End If
        End If

        '-------------------------
        'messaggio di base
        strMsg = oApp.Tr(Me, 129271270978779297, "ATTENZIONE. Sulla riga di lavorazione |" & dtrL!lce_rigaa.ToString & "| collegata alla riga di carico |" & dtrL!lce_riga.ToString & "| per lavorazioni interne (oppure sulla riga della quantità prodotta per lavorazioni esterne) è richiesto dalla 'contabilità analitica duplice contabile' (causale |" & nCodcaca.ToString & "|, conto |" & lConto.ToString & "|, contropartita |" & lConto2.ToString & "|) l'indicazione")

        '-------------------------
        'INIZIO I TEST
        'gestione date competenza
        If NTSCInt(dtrT(0)!tb_concove) <> 0 Then
          If NTSCStr(dtrT(0)!xx_accperi).ToUpper <> dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper Or _
             NTSCStr(dtrT(0)!xx_accperi).ToUpper <> dttAnagca2.Rows(0)!ac_accperi.ToString.ToUpper Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272899189072265, " del 'RICHIEDI DATE' non è lo stesso sui conti coinvolti (conto CG |" & lContocg.ToString & "|).")))
            Return False
          End If
        End If
        Select Case dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper
          Case "S"  'periodo di competenza
            If NTSCDate(dtrMMPadre(0)!ec_datini).ToShortDateString = NTSCDate(dtrMMPadre(0)!ec_datfin).ToShortDateString Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272899369873047, " della data inizio competenza DEVE essere DIVERSA dalla data di fine competenza sulla riga di carico (i conti di CA sono gestiti a PERIODO di competenza economica).")))
              Return False
            End If
          Case "D"  'data competenza
          Case "N"  'date non gestite
            If NTSCDate(dtrMMPadre(0)!ec_datini).ToShortDateString <> NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272899354755859, " della data inizio competenza DEVE essere uguale alla data del documento sulla riga di carico (i conti di CA non gestiscono le date di competenza economica).")))
              Return False
            End If
        End Select

        If bTerzista Then
          'gestione centro
          If (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper = "S") And NTSCInt(dtrMMPadre(0)!ec_codcena) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 130554421772104307, " del centro di costo/ricavo (da indicare nella riga di carico prodotto).")))
            Return False
          End If
          nCentro = NTSCInt(dtrMMPadre(0)!ec_codcena)
          'gestione commessa
          If (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper = "S") And NTSCInt(dtrMMPadre(0)!ec_commeca) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 130554421792030174, " della commessa (da indicare nella riga di carico prodotto).")))
            Return False
          End If
          lCommeca = NTSCInt(dtrMMPadre(0)!ec_commeca)
          'gestione linea/famiglia
          If (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper = "S") And NTSCStr(dtrMMPadre(0)!ec_codcfam).Trim = "" Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 130554421811861778, " della linea/famiglia (da indicare nella riga di carico prodotto).")))
            Return False
          End If
          strCodcfam = NTSCStr(dtrMMPadre(0)!ec_codcfam).Trim
        Else
          'gestione centro
          If (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper = "S") And NTSCInt(dtrL!lce_codcena) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272899334677734, " del centro di costo/ricavo .")))
            Return False
          End If
          nCentro = NTSCInt(dtrL!lce_codcena)
          'gestione commessa
          If (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper = "S") And NTSCInt(dtrL!lce_commeca) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271271537568359, " della commessa.")))
            Return False
          End If
          lCommeca = NTSCInt(dtrL!lce_commeca)
          'gestione linea/famiglia
          If (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper = "S") And NTSCStr(dtrL!lce_codcfam).Trim = "" Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271271521406250, " della linea/famiglia.")))
            Return False
          End If
          strCodcfam = NTSCStr(dtrL!lce_codcfam).Trim
        End If    'If bTerzista Then

        'gestione divisione: la prendo dalla riga 'T'
        If (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper = "S") Then
          If NTSCInt(dtrMMPadre(0)!ec_coddivi) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271280809033203, " della divisione (da indicare nella riga di carico prodotto).")))
            Return False
          End If
        End If
        'gestione cliente
        If (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper = "S" Or dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_codcli) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129271271822451172, "ATTENZIONE. la gestione della 'contabilità analitica duplice contabile' richiede l'indicazione del cliente di CA in testata documento (il dato è richiesto dalla contropartita di CA indicata sulla riga |" & dtrL!lce_riga.ToString & "|.")))
          Return False
        End If
        'gestione stabilimento: prendo lo stabilimento dal magazzino di carico
        If dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper = "S" Or dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper = "S" Then
          'il magaz 1 deve sempre essere presente ...
          If Not dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMMPadre(0)!ec_magaz).ToString)(0)!tb_codstab.ToString <> "0" Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271328593291015, " dello stabilimento/filiale/negozio ma nella tabella dei magazzini, per i magazzini indicati nella riga in analisi, non è riportato tale dato.")))
            Return False
          End If
        End If
        'gestione articolo: non possibile: non posso salvare documenti senza articolo !!!!

        'se ho indicato un centro ed anche una linea/comm/stab/divi/arti/.... ed il dato è richiesto o facoltativo (diversamente non viene salvato) il centro deve essere principale!
        If nCentro <> 0 And (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper <> "N") Then
          If (lCommeca <> 0 And (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper <> "N")) Or _
             (strCodcfam.Trim <> "" And (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dtrMMPadre(0)!ec_coddivi) <> 0 And (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dttET.Rows(0)!et_codcli) <> 0 And (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMMPadre(0)!ec_magaz).ToString)(0)!tb_codstab) <> 0 And (dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper <> "N")) Or _
             ((dttAnagca.Rows(0)!ac_richarti.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richarti.ToString.ToUpper <> "N")) Then
            strTmp = oCldBoll.GetTipcenaCa2(strDittaCorrente, nCentro)
            If strTmp <> "P" And strTmp <> "*" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129350903763222657, _
                      "ATTENZIONE: Riga di lavorazione |" & dtrL!lce_rigaa.ToString & "| collegata alla riga di carico |" & _
                      dtrL!lce_riga.ToString & "| per lavorazioni interne (oppure sulla riga della quantità " & _
                      "prodotta per lavorazioni esterne):" & vbCrLf & "se si indica Commessa o Linea/famiglia o " & _
                      "Divisione o Stabilimento/filiale/negozio o Cliente o Articolo " & _
                      "(e tale dato risulta obbligatorio o facontativo nell'anagrafica del sottoconto di CA|" & _
                      dttAnagca.Rows(0)!ac_conto.ToString & "| / |" & dttAnagca2.Rows(0)!ac_conto.ToString & "|) " & _
                      "l'eventuale centro indicato deve essere di tipo 'Principale'")))
              Return False
            End If
          End If
        End If

SALTATEST_LAVORAZ:
      Next    'For Each dtrL As DataRow In dttLAVCENT.Select("", "lce_riga, lce_rigaa")



      '-------------------------------------
      'CONTROLLO QUANTITA' PRODOTTA SU CARICHI DA PRODUZIONE (prendo i dati dalla riga 'T')

      'determino la causale di CA
      dttAnagca.Clear()
      dttAnagca2.Clear()
      If NTSCInt(dttPecx.Rows(0)!tb_cauqtapro) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129271310695673828, "ATTENZIONE: il documento di produzione dovrà registrare la 'Contabilità analitica duplice contabile' ma in 'personalizzazione CA per ditta' non è indicata la causale da utilizzare per rilevare la quantità prodotta.")))
        Return False
      End If
      oCldBoll.ValCodiceDb(NTSCInt(dttPecx.Rows(0)!tb_cauqtapro).ToString, strDittaCorrente, "TABCACA", "N", "", dttAnagca)
      If NTSCStr(dttAnagca.Rows(0)!tb_dval).ToUpper <> "N" Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129271311904072265, "ATTENZIONE: il documento di produzione dovrà registrare la 'Contabilità analitica duplice contabile' e in 'personalizzazione CA per ditta' deve essere indicata una causale da utilizzare per rilevare la quantità prodotta che non movimenta il VALORE.")))
        Return False
      End If
      If NTSCStr(dttAnagca.Rows(0)!tb_dqtapr).ToUpper <> "S" Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129272852645185547, "ATTENZIONE: il documento di produzione dovrà registrare la 'Contabilità analitica duplice contabile' e in 'personalizzazione CA per ditta' deve essere indicata una causale da utilizzare per rilevare la quantità prodotta che ha spuntato 'Richiesta quantità prodotto'.")))
        Return False
      End If
      dttAnagca.Clear()

      '-------------------------
      'LOOP sulle righe T
      dtrMm = dttEC.Select("xxo_esist <> 0 AND ec_quant <> 0", "ec_riga")
      For i = 0 To dtrMm.Length - 1
        If NTSCDec(dtrMm(i)!xxo_esist) = 0 Then GoTo SALTATEST_QTAPROD
        nCodcove = NTSCInt(dtrMm(i)!ec_controp)
        lConto = 0    'NON SERVE: è l'unica regsitrazione in CA ad avere una sola riga !!!!!!!!!!

        'verifico se la riga ha un conto di CG collegato a tabcove con contocg gestito a ca: se contocg = 0 è come se fosse gestito in CA
        dtrT = dsTabcove.Tables("TABCOVE").Select("tb_codcove = " & nCodcove.ToString)
        If NTSCStr(dtrT(0)!xx_flci).Trim = "" And NTSCInt(dtrT(0)!tb_concova2) = 0 Then GoTo SALTATEST_QTAPROD 'il conto CG non gestisce la CA
        lContocg = NTSCInt(dtrT(0)!tb_concove)

        '-------------------------
        'cerco il conto contropartita da utilizzare
        'lo prendo da tabcove.tb_concovag
        lConto2 = NTSCInt(dtrT(0)!tb_concova2)
        If lConto2 = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129271302611542968, "ATTENZIONE: il carico da produzione deve rilevare in CA la quantità prodotta ma nella tabella delle contropartite vendite, per il codice |" & nCodcove.ToString & "| non è indicata la contropartita '2' da utilizzare")))
          Return False
        End If
        If dttAnagca2.Rows.Count = 0 Then
          oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
        Else
          If NTSCInt(dttAnagca2.Rows(0)!ac_conto) <> lConto2 Then
            oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
          End If
        End If

        '---------------------
        'messaggio di base
        strMsg = oApp.Tr(Me, 129271343103164062, "ATTENZIONE. Sulla riga |" & dtrMm(i)!ec_riga.ToString & "|, per la rilevazione della quantità prodotta sul conto |" & lConto2.ToString & "|, è richiesto dalla 'contabilità analitica duplice contabile' l'indicazione")

        '---------------------
        'INIZIO I TEST

        'gestione date competenza
        Select Case dttAnagca2.Rows(0)!ac_accperi.ToString.ToUpper
          Case "S"  'periodo di competenza
            If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString = NTSCDate(dtrMm(i)!ec_datfin).ToShortDateString Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272909602275390, " che la data inizio competenza sia DIVERSA dalla data di fine competenza sulla riga di carico (il conto di CA è gestito a PERIODO di competenza economica).")))
              Return False
            End If
          Case "D"  'data competenza
          Case "N"  'date non gestite
            If NTSCDate(dtrMm(i)!ec_datini).ToShortDateString <> NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString Then
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129272909585556640, " che la data inizio competenza sia UGUALE alla data del documento sulla riga di carico (il conto di CA non è gestito a data di competenza economica).")))
              Return False
            End If
        End Select

        'gestione centro
        If dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper = "S" And NTSCInt(dtrMm(i)!ec_codcena) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271341656464843, " del centro di costo/ricavo.")))
          Return False
        End If
        'gestione commessa
        If dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper = "S" And NTSCInt(dtrMm(i)!ec_commeca) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271341640703125, " della commessa.")))
          Return False
        End If
        'gestione linea/famiglia
        If dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper = "S" And NTSCStr(dtrMm(i)!ec_codcfam).Trim = "" Then
          ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271341624296875, " della linea/famiglia.")))
          Return False
        End If
        'gestione divisione: la prendo dalla riga 'T'
        If dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper = "S" And NTSCInt(dtrMm(i)!ec_coddivi) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271341685263672, " della divisione.")))
          Return False
        End If
        'gestione cliente
        If dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper = "S" And NTSCInt(dttET.Rows(0)!et_codcli) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129271341712861328, "ATTENZIONE. la gestione della 'contabilità analitica duplice contabile' richiede l'indicazione del cliente di CA in testata documento (il dato è richiesto dalla contropartita di CA indicata sulla riga |" & dtrMm(i)!ec_riga.ToString & "|).")))
          Return False
        End If
        'gestione stabilimento: prendo lo stabilimento dal magazzino di carico
        If dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper = "S" Then
          'il magaz 1 deve sempre essere presente ...
          If Not dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMm(i)!ec_magaz).ToString)(0)!tb_codstab.ToString <> "0" Then
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & oApp.Tr(Me, 129271341737255859, " dello stabilimento/filiale/negozio ma nella tabella dei magazzini, per i magazzini indicati nella riga in analisi, non è riportato tale dato.")))
            Return False
          End If
        End If
        'gestione articolo: non possibile: non posso salvare documenti senza articolo !!!!

        'se ho indicato un centro ed anche una linea/comm/stab/divi/arti/.... ed il dato è richiesto o facoltativo (diversamente non viene salvato) il centro deve essere principale!
        If NTSCInt(dtrMm(i)!ec_codcena) <> 0 And dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper <> "N" Then
          If (NTSCInt(dtrMm(i)!ec_commeca) <> 0 And dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper <> "N") Or _
             (NTSCStr(dtrMm(i)!ec_codcfam).Trim <> "" And dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper <> "N") Or _
             (NTSCInt(dtrMm(i)!ec_coddivi) <> 0 And dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper <> "N") Or _
             (NTSCInt(dttET.Rows(0)!et_codcli) <> 0 And dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper <> "N") Or _
             (NTSCInt(dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dtrMm(i)!ec_magaz).ToString)(0)!tb_codstab) <> 0 And dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper <> "N") Or _
             (dttAnagca2.Rows(0)!ac_richarti.ToString.ToUpper <> "N") Then
            strTmp = oCldBoll.GetTipcenaCa2(strDittaCorrente, NTSCInt(dtrMm(i)!ec_codcena))
            If strTmp <> "P" And strTmp <> "*" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129351479827119140, _
                      "ATTENZIONE (riga |" & dtrMm(i)!ec_riga.ToString & "| relativa a quantità prodotta): se si indica Commessa o Linea/famiglia o " & _
                      "Divisione o Stabilimento/filiale/negozio o Cliente o Articolo " & _
                      "(e tale dato risulta obbligatorio o facontativo nell'anagrafica del sottoconto di CA|" & _
                      dttAnagca2.Rows(0)!ac_conto.ToString & "|) " & _
                      "l'eventuale centro indicato deve essere di tipo 'Principale'")))
              Return False
            End If
          End If
        End If

SALTATEST_QTAPROD:
      Next    'For i = 0 To dtrMm.Length - 1

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttAnagca.Clear()
      dttAnagca2.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckCa2_SpesePiede() As Boolean
    Dim dttPeve As New DataTable
    Dim dttPeac As New DataTable
    Dim dttTmp As New DataTable

    Dim dttAnagca As New DataTable
    Dim dttAnagca2 As New DataTable

    Dim nItem As Integer = 0

    Dim strMsg As String = ""
    Dim dImp As Decimal = 0
    Dim lContocg As Integer = 0

    Dim nCodcaca As Integer = 0
    Dim nCodcove As Integer = 0
    Dim lConto As Integer = 0
    Dim lConto2 As Integer = 0

    Dim dtrT() As DataRow = Nothing
    Dim strTmp As String = ""

    Try

      '----------------------------
      'CONTROLLO SPESE DI PIEDE
      oCldBoll.ValCodiceDb("1", strDittaCorrente, "TABPEVE", "N", "", dttPeve)
      oCldBoll.ValCodiceDb("1", strDittaCorrente, "TABPEAC", "N", "", dttPeac)

      'per le spese di piede verifico se centro/linea/commessa/.... sono presenti in base a quanto richiesto dai conti di CA
      nCodcaca = -1
      For nItem = 0 To 9
        Select Case nItem
          Case 0
            strMsg = oApp.Tr(Me, 129270495053027343, "sono indicate delle spese di trasporto")
            dImp = NTSCDec(dttET.Rows(0)!et_speacc)
            If bDocEmesso Then
              nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrriac))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrriac))
            End If
          Case 1
            strMsg = oApp.Tr(Me, 129270495075419922, "sono indicate delle spese di incasso")
            dImp = NTSCDec(dttET.Rows(0)!et_speinc)
            If bDocEmesso Then
              nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrriin))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrriin))
            End If
          Case 2
            strMsg = oApp.Tr(Me, 129270469335175781, "sono indicate delle spese di imballo")
            dImp = NTSCDec(dttET.Rows(0)!et_speimb)
            If bDocEmesso Then
              nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrimba))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrimba))
            End If
          Case 3
            strMsg = oApp.Tr(Me, 129276530325173125, "sono presenti degli omaggi")
            dImp = NTSCDec(dttET.Rows(0)!et_totomag)
            If bDocEmesso Then
              nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contromag))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontromag))
            End If
          Case 4
            strMsg = oApp.Tr(Me, 129277439002314453, "sono presenti degli abbuoni")
            dImp = NTSCDec(dttET.Rows(0)!et_abbuono)
            If dImp > 0 Then
              If bDocEmesso Then
                nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrabat))
              Else
                nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrabpa))
              End If
            Else
              If bDocEmesso Then
                nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrabpa))
              Else
                nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrabat))
              End If
            End If
          Case 5
            strMsg = oApp.Tr(Me, 129276530294372344, "è indicato un incasso/pagamento")
            dImp = NTSCDec(dttET.Rows(0)!et_pagato)
            oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_codpaga).ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
            If dttTmp.Rows.Count > 0 Then
              nCodcove = CoveAggControp(NTSCInt(dttTmp.Rows(0)!tb_concassp))
            End If
            If nCodcove = 0 Then
              If bDocEmesso Then
                nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrcas))
              Else
                nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrcas))
              End If
            End If
          Case 6
            strMsg = oApp.Tr(Me, 129276531971471953, "è indicato un conto cliente/fornitore generico")
            dImp = NTSCDec(dttET.Rows(0)!et_totdoc)
            If dttET.Rows(0)!xx_tipo.ToString <> "F" Then
              nCodcove = CoveAggControp(NTSCInt(dttPecx.Rows(0)!tb_contrclistd))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPecx.Rows(0)!tb_contrfornstd))
            End If
            If nCodcove = 0 Then GoTo SALTATEST 'non intendo gestire l'analitica per clienti/fornitori
          Case 7
            strMsg = oApp.Tr(Me, 129277439230312500, "sono presenti dei bolli")
            dImp = NTSCDec(dttET.Rows(0)!et_bolli)
            If bDocEmesso Then
              nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrribo))
            Else
              nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrribo))
            End If
            If nCodcove = 0 Then GoTo SALTATEST 'non intendo gestire l'analitica per clienti/fornitori
          Case 8 ' Secondo tipo di pagamento
            strMsg = oApp.Tr(Me, 129717926942540762, "è indicato un incasso/pagamento")
            dImp = NTSCDec(dttET.Rows(0)!et_pagato2)
            oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_codpaga2).ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
            If dttTmp.Rows.Count > 0 Then
              nCodcove = CoveAggControp(NTSCInt(dttTmp.Rows(0)!tb_concassp))
            End If
            If nCodcove = 0 Then
              If bDocEmesso Then
                nCodcove = CoveAggControp(NTSCInt(dttPeve.Rows(0)!tb_contrcas))
              Else
                nCodcove = CoveAggControp(NTSCInt(dttPeac.Rows(0)!tb_acontrcas))
              End If
            End If
        End Select

        If dImp = 0 Then GoTo SALTATEST

        If nCodcove = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277385105439453, "Nel documento |" & strMsg & "| ma in personalizzazione acquisti e/o vendite non è indicata la contropartita ditta da utilizzare (con la CA attivata per questa spesa non è possibile utilizzare direttamente il sottoconto)")))
          Return False
        End If


        dtrT = dsTabcove.Tables("TABCOVE").Select("tb_codcove = " & nCodcove.ToString)
        If dtrT.Length = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129278035547041015, "Nel documento |" & strMsg & "| ma in personalizzazione acquisti e/o vendite è indicata una contropartita (|" & nCodcove.ToString & "|) non presente nella tabella delle 'Contropartite ditta'")))
          Return False
        End If
        If NTSCStr(dtrT(0)!xx_flci).Trim = "" Then GoTo SALTATEST 'il conto di cg non è gestito a ca
        If NTSCInt(dtrT(0)!tb_concove) = 0 And NTSCInt(dtrT(0)!tb_concova) = 0 Then GoTo SALTATEST 'se non c'è ne conto cg ne conto ca salto
        lContocg = NTSCInt(dtrT(0)!tb_concove)

        'se sono arrivato qui c'è qualche cosa da scrivere in ca ...

        '------------------------------
        'verifico la causale di CA (la prendo dal tipobf)
        If nCodcaca = -1 Then
          oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_tipobf).ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
          nCodcaca = NTSCInt(dttTmp.Rows(0)!tb_codcacadd)
          dttTmp.Clear()
          If nCodcaca = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129276581815524688, "ATTENZIONE: il documento contiene delle spese di piede da rilevare in CA ma nell'anagrafica del tipo bolla/fattura non è stata indicata la causale di CA da utilizzare")))
            Return False
          End If
        End If

        '------------------------------
        'cerco conto e contropartita
        lConto = NTSCInt(dtrT(0)!tb_concova)
        If lConto = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277401522333984, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica ma in 'Contropartite ditta', per il codice |" & nCodcove.ToString & "|, non è stato indicato il conto CA da utilizzare")))
          Return False
        End If
        oCldBoll.ValCodiceDb(lConto.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca)

        Select Case nItem
          'per le spese che non devono essere rilevate in priana2 direttamente da movmag il conto di giro non serve
          Case 3, 4, 5, 6
            lConto2 = lConto
            dttAnagca2 = dttAnagca
          Case Else
            lConto2 = NTSCInt(dtrT(0)!tb_concovag)
            If lConto2 = 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129277401589609375, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica ma in 'Contropartite ditta', per il codice |" & nCodcove.ToString & "|, non è stato indicato il conto di 'giro' da utilizzare")))
              Return False
            End If
            oCldBoll.ValCodiceDb(lConto2.ToString, strDittaCorrente, "ANAGCA", "N", "", dttAnagca2)
        End Select

        'gestione date competenza
        If dttAnagca.Rows(0)!ac_accperi.ToString.ToUpper <> dttAnagca2.Rows(0)!ac_accperi.ToString.ToUpper Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129273902500107421, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) ma sui conti il campo 'Richiedi date' non hanno la stessa impostazione, oppure sono settati a 'Periodo competenza economica'")))
          Return False
        End If
        'gestione centro
        If (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_codcena) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270466593515625, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione del centro di costo/ricavo, ma nella testata del documento non è stato indicato nessun centro di CA.")))
          Return False
        End If
        'gestione commessa
        If (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_commeca) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270467749023437, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione della commessa, ma nella testata del documento non è stata indicata nessuna commessa di CA.")))
          Return False
        End If
        'gestione linea/famiglia
        If (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper = "S") And NTSCStr(dttET.Rows(0)!et_codcfam).Trim = "" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270478624580078, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione della linea/famiglia, ma nella testata del documento non è stata indicata nessuna linea/famiglia di CA.")))
          Return False
        End If
        'gestione divisione
        If (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_coddivi) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270478593066406, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione della divisione, ma nella testata del documento non è stata indicata nessuna divisione di CA.")))
          Return False
        End If
        'gestione cliente
        If (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper = "S") And NTSCInt(dttET.Rows(0)!et_codcli) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270478578027343, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione del cliente, ma nella testata del documento non è stato indicato nessun cliente di CA.")))
          Return False
        End If
        'gestione stabilimento: prendo lo stabilimento dal magazzino 1 (SEMPRE)
        If dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper = "S" Then
          If NTSCInt(dttET.Rows(0)!et_magaz) = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270495146621093, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione dello stabilimento/filiale/negozio, ma nella testata del documento non è stato indicato il magazzino principale / magazzino di carico da cui prelevare tale informazione.")))
            Return False
          Else
            If dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dttET.Rows(0)!et_magaz).ToString)(0)!tb_codstab.ToString = "0" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270477078359375, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione dello stabilimento/filiale/negozio, ma nella testata del documento, sul magazzino principale (|" & dttET.Rows(0)!et_magaz.ToString & "|) non è stato indicato nessuno stabilimento/filiale/negozio di CA.")))
              Return False
            End If
          End If
        End If
        'gestione articolo: non possibile
        If dttAnagca.Rows(0)!ac_richarti.ToString.ToUpper = "S" Or dttAnagca2.Rows(0)!ac_richarti.ToString.ToUpper = "S" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129270478559462890, "ATTENZIONE. Nel documento |" & strMsg & "| da rilevare in contabilità analitica (conto |" & lConto & "|, contropartita |" & lConto2.ToString & "|) è richiesta l'indicazione dell'articolo, ma negli importi di piede non è possibile utilizzare conti che richiedono tale informazione.")))
          Return False
        End If

        'se ho indicato un centro ed anche una linea/comm/stab/divi/arti/.... ed il dato è richiesto o facoltativo (diversamente non viene salvato) il centro deve essere principale!
        If NTSCInt(dttET.Rows(0)!et_codcena) <> 0 And (dttAnagca.Rows(0)!ac_richcena.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcena.ToString.ToUpper <> "N") Then
          If (NTSCInt(dttET.Rows(0)!et_commeca) <> 0 And (dttAnagca.Rows(0)!ac_richcomm.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcomm.ToString.ToUpper <> "N")) Or _
             (NTSCStr(dttET.Rows(0)!et_codcfam).Trim <> "" And (dttAnagca.Rows(0)!ac_richcfam.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcfam.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dttET.Rows(0)!et_coddivi) <> 0 And (dttAnagca.Rows(0)!ac_richdivi.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richdivi.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dttET.Rows(0)!et_magaz).ToString)(0)!tb_codstab) <> 0 And (dttAnagca.Rows(0)!ac_richstab.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richstab.ToString.ToUpper <> "N")) Or _
             (NTSCInt(dttET.Rows(0)!et_codcli) <> 0 And (dttAnagca.Rows(0)!ac_richcli.ToString.ToUpper <> "N" Or dttAnagca2.Rows(0)!ac_richcli.ToString.ToUpper <> "N")) Then
            strTmp = oCldBoll.GetTipcenaCa2(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_codcena))
            If strTmp <> "P" And strTmp <> "*" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129351482687187500, "ATTENZIONE. Nel documento |" & strMsg & _
                          "| da rilevare in contabilità analitica: se si indica Commessa o Linea/famiglia o " & _
                          "Divisione o Stabilimento/filiale/negozio o Cliente o Articolo " & _
                          "(e tale dato risulta obbligatorio o facontativo nell'anagrafica del sottoconto di CA |" & _
                          dttAnagca.Rows(0)!ac_conto.ToString & "| / |" & dttAnagca2.Rows(0)!ac_conto.ToString & "|) " & _
                          "l'eventuale centro indicato deve essere di tipo 'Principale'")))
              Return False
            End If
          End If
        End If
SALTATEST:
      Next    'For nItem = 0 To 6

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
      dttPeve.Clear()
      dttPeac.Clear()
      dttAnagca.Clear()
      dttAnagca2.Clear()
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckCollaudi() As Boolean
    'gestione qualità: per ogni riga devo verificare se devo generare un collaudo oppure no
    Dim nCodtcon As Integer = 0
    Dim nCodpcam As Integer = 0
    Dim nCodclaq As Integer = 0
    Dim nCodlivq As Integer = 0

    Try
      If CBool(lModuliDittaDitt And bsModSQ) = False Then Return True 'se non ho il modulo qualità ...

      If Not oCldBoll.CheckRkinTabtcon(strDittaCorrente) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129394988289531250, "Gestione collaudi: nella tabella dei tipi di controlli non sono presenti record. Non verranno generate le eventuali schede collaudo.")))
        Return True
      End If

      For Each dtrT As DataRow In dttEC.Rows
        If oCldBoll.CercaContrda(strDittaCorrente, "BSVEBOLL", dttET.Rows(0)!et_tipork.ToString, _
                                 NTSCInt(dttET.Rows(0)!et_magimp), NTSCInt(dttET.Rows(0)!et_conto), _
                                 0, NTSCStr(dtrT!ec_codart), NTSCInt(dtrT!ec_causale), NTSCInt(dtrT!ec_fase), _
                                 NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString, bCollaudiSuDocEmessi, _
                                 nCodtcon, nCodpcam, nCodclaq, nCodlivq) Then
          'se restituisce true devo generare la scheda collaudo
          dtrT!ec_flcom = "S"
          With dttET.Rows(0)
            If (nMagAccettazione <> 0) And (!et_tipork.ToString <> "A" And !et_tipork.ToString <> "B") Then
              dtrT!ec_magaz = nMagAccettazione
            End If
          End With
        Else
          dtrT!ec_flcom = "N"
        End If
        dtrT.AcceptChanges()
      Next

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckEvasioneSaldoTC() As Boolean
    Dim dttGr As New DataTable
    Dim dttTmp As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Dim strTmp As String = ""
    Dim strTmp1 As String = ""
    Dim i As Integer = 0
    Dim dtrT1() As DataRow = Nothing
    Dim dQuaevaTmp(25) As Decimal
    Dim dQta As Decimal = 0

    Try
      '--------------------------------------------------------------------------------------------------------------------------
      'Controlla che una riga d'ordine sia evasa a saldo quando la quantità evasa indicata un una taglia supera quella ordinata per la specifica taglia
      '--------------------------------------------------------------------------------------------------------------------------
      'ottengo le righe di ordine collegate ad articoli TCO
      If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga, MAX(ec_salcon) as ec_salcon", _
                               "ec_ornum > 0 AND xxo_codtagl <> 0", _
                               "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga") Then Return False
      If dttGr.Rows.Count = 0 Then Return True

      For i = 1 To 24
        dttGr.Columns.Add("QuaEva" & i.ToString("00"), GetType(Double))
        dttGr.Columns.Add("QuaDiff" & i.ToString("00"), GetType(Double))
        strTmp1 += "SUM(ec_quant" & i.ToString("00") & ") as QuaEva" & i.ToString("00") & ", "
      Next
      dttGr.AcceptChanges()
      strTmp1 = strTmp1.Substring(0, strTmp1.Length - 2)

      'su ogni riga di articolo TCO, carico le quantità evase con questo documento
      For Each dtrT As DataRow In dttGr.Rows
        strTmp = ""
        dtrT1 = dttEC.Select("ec_ortipo = " & CStrSQL(dtrT!ec_ortipo) & _
                             " AND ec_oranno = " & dtrT!ec_oranno.ToString & _
                             " AND ec_orserie = " & CStrSQL(dtrT!ec_orserie) & _
                             " AND ec_ornum = " & dtrT!ec_ornum.ToString & _
                             " AND ec_orriga = " & dtrT!ec_orriga.ToString)
        For i = 0 To dtrT1.Length - 1
          strTmp += dtrT1(i)!ec_riga.ToString & ", "
        Next
        If strTmp.Length > 0 Then strTmp = strTmp.Substring(0, strTmp.Length - 2)
        If Not oDttgr.NTSGroupBy(dttECTC, dttTmp, strTmp1, _
                                 "ec_riga IN (" & strTmp & ")", _
                                 "") Then Return False
        For i = 1 To 24
          dtrT("QuaEva" & i.ToString("00")) = dttTmp.Rows(0)("QuaEva" & i.ToString("00"))
        Next
        dttTmp.Clear()

        'prendo la quantità residua da evadere dagli ordini e, se il documento era aperto, 
        'quanto era stato evaso con il documento salvato in precedenza
        If Not oCldBoll.GetQuaevaORDtc(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                                       dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), NTSCStr(dtrT!ec_ortipo), _
                                       NTSCInt(dtrT!ec_oranno), NTSCStr(dtrT!ec_orserie), NTSCInt(dtrT!ec_ornum), _
                                       NTSCInt(dtrT!ec_orriga), dQuaevaTmp, dttTmp) Then Return False
        If dttTmp.Rows.Count > 0 Then
          For i = 1 To 24
            dtrT("QuaDiff" & i.ToString("00")) = dttTmp.Rows(0)("QuaDiff" & i.ToString("00"))
          Next
        End If

        'ora il test
        For i = 1 To 24
          dQta = NTSCDec(dtrT("QuaDiff" & i.ToString("00"))) - NTSCDec(dtrT("QuaEva" & i.ToString("00"))) + dQuaevaTmp(i)

          If dQta < 0 And NTSCStr(dtrT!ec_salcon) = "C" Then
            If dttET.Rows(0)!et_tipork.ToString = "W" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129560829164482422, "E' obbligatorio prenotare a saldo la riga | " & dtrT!ec_orriga.ToString & "| del |" & DescrTiporkOr(dtrT!ec_ortipo.ToString) & "| n° |" & dtrT!ec_ornum.ToString & "| in quanto la quantità evasa, meno la prenotata, della taglia di indice |" & i.ToString & "| supera la quantità originariamente ordinata di tale taglia (differenza |" & (dQta * -1).ToString(oApp.FormatImporti) & "|)")))
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129560826879599609, "E' obbligatorio evadere a saldo la riga | " & dtrT!ec_orriga.ToString & "| del |" & DescrTiporkOr(dtrT!ec_ortipo.ToString) & "| n° |" & dtrT!ec_ornum.ToString & "| in quanto la quantità evasa della taglia di indice |" & i.ToString & "| supera la quantità originariamente ordinata di tale taglia (differenza |" & (dQta * -1).ToString(oApp.FormatImporti) & "|)")))
            End If
            Return False
          End If
        Next
      Next

      '--------------------------------------------------------------------------------------------------------------------------
      'Controlla che una riga di nota sia evasa a saldo la quantità evasa indicata un una taglia supera quella prenotata per la specifica taglia
      '--------------------------------------------------------------------------------------------------------------------------
      'ottengo le righe di ordine collegate ad articoli TCO
      dttGr.Clear()
      dttTmp.Clear()
      strTmp = ""
      strTmp1 = ""
      i = 0
      dQta = 0
      If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_nptipo, ec_npanno, ec_npserie, ec_npnum, ec_npriga, MAX(ec_npsalcon) as ec_npsalcon", _
                               "ec_npnum > 0 AND xxo_codtagl <> 0", _
                               "ec_nptipo, ec_npanno, ec_npserie, ec_npnum, ec_npriga") Then Return False
      If dttGr.Rows.Count = 0 Then Return True

      For i = 1 To 24
        dttGr.Columns.Add("QuaEva" & i.ToString("00"), GetType(Double))
        dttGr.Columns.Add("QuaDiff" & i.ToString("00"), GetType(Double))
        strTmp1 += "SUM(ec_quant" & i.ToString("00") & ") as QuaEva" & i.ToString("00") & ", "
      Next
      dttGr.AcceptChanges()
      strTmp1 = strTmp1.Substring(0, strTmp1.Length - 2)

      'su ogni riga di articolo TCO, carico le quantità evase con questo documento
      For Each dtrT As DataRow In dttGr.Rows
        strTmp = ""
        dtrT1 = dttEC.Select("ec_nptipo = " & CStrSQL(dtrT!ec_nptipo) & _
                             " AND ec_npanno = " & dtrT!ec_npanno.ToString & _
                             " AND ec_npserie = " & CStrSQL(dtrT!ec_npserie) & _
                             " AND ec_npnum = " & dtrT!ec_npnum.ToString & _
                             " AND ec_npriga = " & dtrT!ec_npriga.ToString)
        For i = 0 To dtrT1.Length - 1
          strTmp += dtrT1(i)!ec_riga.ToString & ", "
        Next
        If strTmp.Length > 0 Then strTmp = strTmp.Substring(0, strTmp.Length - 2)
        If Not oDttgr.NTSGroupBy(dttECTC, dttTmp, strTmp1, _
                                 "ec_riga IN (" & strTmp & ")", _
                                 "") Then Return False
        For i = 1 To 24
          dtrT("QuaEva" & i.ToString("00")) = dttTmp.Rows(0)("QuaEva" & i.ToString("00"))
        Next
        dttTmp.Clear()

        'prendo la quantità residua da evadere dagli ordini e, se il documento era aperto, 
        'quanto era stato evaso con il documento salvato in precedenza
        If Not oCldBoll.GetQuaevaNOTAtc(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                                       dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), NTSCStr(dtrT!ec_nptipo), _
                                       NTSCInt(dtrT!ec_npanno), NTSCStr(dtrT!ec_npserie), NTSCInt(dtrT!ec_npnum), _
                                       NTSCInt(dtrT!ec_npriga), dQuaevaTmp, dttTmp) Then Return False
        If dttTmp.Rows.Count > 0 Then
          For i = 1 To 24
            dtrT("QuaDiff" & i.ToString("00")) = dttTmp.Rows(0)("QuaDiff" & i.ToString("00"))
          Next
        End If

        'ora il test
        For i = 1 To 24
          dQta = NTSCDec(dtrT("QuaDiff" & i.ToString("00"))) - NTSCDec(dtrT("QuaEva" & i.ToString("00"))) + dQuaevaTmp(i)
          If dQta < 0 And NTSCStr(dtrT!ec_npsalcon) = "C" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129560836798134766, "E' obbligatorio evadere a saldo la riga | " & dtrT!ec_npriga.ToString & "| della NOTA DI PRELIEVO n° |" & dtrT!ec_npnum.ToString & "| in quanto la quantità evasa della taglia di indice |" & i.ToString & "| supera la quantità originariamente prenotata di tale taglia (differenza |" & (dQta * -1).ToString(oApp.FormatImporti) & "|)")))
            Return False
          End If
        Next
      Next

      '-----------------------------------------------------------------------
      ' X CARICHI DI PRODUZIONE
      '-----------------------------------------------------------------------
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'Per i carichi di produzione non serve fare questo controlli xchè trattandosi sempre di righe con indicata SOLO UNA quantità
        'taglia (sulle 24) agiscono i meccanismi di controllo saldo complessivi della riga CheclkEvasioneSaldo
      End If 'If strTmTipoRk = "T" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckRighePrezzoAZero() As Boolean
    Dim strSQL As String = ""
    Dim dtrT() As DataRow = Nothing
    Dim evnt As NTSEventArgs = Nothing

    Try
      '-------------------------------------------------------------------------------------------------------------
      '--- Controllo attivo solo se:
      '--- BSVEBOLL/OPZIONI/DisabilitaMsgPrezzoZero NON è attiva
      '--- BSVEBOLL/OPZIONI/bMsgPrezzoZeroFinale è attiva
      '--- (cioè, se il messaggio, al salvataggio di ogni riga, con prezzo a zero, è attivato
      '--- e il controllo sulle stesse righe, al salvataggio finale del documento, è attivo)
      '-------------------------------------------------------------------------------------------------------------
      If (bMsgPrezzoZeroFinale = False) Or (bDisabilitaMsgPrezzoZero = True) Then Return True
      '-------------------------------------------------------------------------------------------------------------
      '--- Il controllo non viene fatto su documenti di tipo:
      '--- Carico da Produzione
      '--- Scarico a Produzione
      '-------------------------------------------------------------------------------------------------------------
      Select Case dttET.Rows(0)!et_tipork.ToString
        Case "T", "U" : Return True
      End Select
      '-------------------------------------------------------------------------------------------------------------
      '--- Come nella validazione di riga, il controllo viene fatto sulle righe con:
      '--- Prezzo a zero
      '--- Articolo NON descrittivo (diverso da 'D')
      '--- Tipo Stampa diverso da: 'B'(Solo in bolla); 'D'(Solo in fattura); 'N'(No);
      '--- Tipo KIT diverso da: 'A'(Analitico); 'T'(Comp. sintetica)
      '-------------------------------------------------------------------------------------------------------------
      strSQL = "ec_prezzo = 0" & _
        " AND ec_codart <> 'D'" & _
        " AND ec_stasino NOT IN ('B', 'D', 'N')" & _
        " AND ec_flkit NOT IN ('A', 'T')"
      dtrT = dttEC.Select(strSQL)
      If dtrT.Length = 0 Then Return True
      '-------------------------------------------------------------------------------------------------------------
      '--- Se sono state trovate righe con le caratteristiche richieste, prepara l'elenco contenente Riga/Articolo
      '-------------------------------------------------------------------------------------------------------------
      strSQL = oApp.Tr(Me, 130108419666424199, "Attenzione!" & vbCrLf & _
        "Le seguenti righe del documento che si intende salvare, posseggono il prezzo a zero:")
      For i As Integer = 0 To (dtrT.Length - 1)
        With dtrT(i)
          strSQL += oApp.Tr(Me, 130108420452460241, vbCrLf & " . Riga --> '|" & NTSCStr(!ec_riga) & "|' - Articolo '|" & NTSCStr(!ec_codart) & "|'")
        End With
      Next
      strSQL += oApp.Tr(Me, 130108422286671297, vbCrLf & "Confermare ugualmente?")
      evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strSQL)
      ThrowRemoteEvent(evnt)
      If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
      '-------------------------------------------------------------------------------------------------------------
      Return True
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function
  Public Overridable Function TestPreSalvaTestmag_CheckContoVisione() As Boolean
    Dim dtrT() As DataRow = Nothing

    Try
      '--------------------------------------------------------------------------------------------------------------
      If dttET.Rows(0)!et_tipork.ToString = "W" Then Return True
      '--------------------------------------------------------------------------------------------------------------
      '--- Controllo sulla presenza dei campi C/to visione
      '--------------------------------------------------------------------------------------------------------------
      dtrT = dttEC.Select("(xxo_tipcaum = 'U') AND ec_cvnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734888425063840, "Attenzione!" & vbCrLf & _
          "Mancano i riferimenti alla Bolla di carico in conto visione per la riga |" & dtrT(0)!ec_riga.ToString & "|;" & vbCrLf & _
          "il tipo di causale di magazzino li richiede.")))
        Return False
      End If
      '--------------------------------------------------------------------------------------------------------------
      '--- Su causale 2
      '--------------------------------------------------------------------------------------------------------------
      dtrT = dttEC.Select("xxo_tipcaum2 = 'U' AND ec_cvnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M'")
      If dtrT.Length > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130985539595801450, "Attenzione!" & vbCrLf & _
          "Mancano i riferimenti alla Bolla di carico in conto visione per la riga |" & dtrT(0)!ec_riga.ToString & "|;" & vbCrLf & _
          "il tipo di causale di magazzino li richiede.")))
        Return False
      End If
      '--------------------------------------------------------------------------------------------------------------
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        '------------------------------------------------------------------------------------------------------------
        '--- Sul magazzino degli Impegni per i Carichi di Produzione
        '------------------------------------------------------------------------------------------------------------
        dtrT = dttECIMP.Select("xxo_tipcaum = 'U' AND ec_cvnum = 0 AND ec_codart <> 'D' AND ec_codart <> 'M' AND ec_fase = 0")
        If dtrT.Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129082824525634767, "Attenzione!" & vbCrLf & _
            "Mancano i riferimenti alla Bolla di carico in conto visione per la riga |" & dtrT(0)!ec_riga.ToString & "|;" & vbCrLf & _
            "dello Scarico di Produzione (associata alla riga |" & dtrT(0)!ec_prriga.ToString & "| del carico);" & vbCrLf & _
            "il tipo di causale di magazzino li richiede.")))
          Return False
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      Return True
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function

  Public Overridable Function TestPreCancellaTestmag() As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim evnt As NTSEventArgs = Nothing
    Try
      '--------------------------
      'test sulle note di prelievo
      'Prima di cancellare controlla che la nota non contenga righe evase
      If NTSCStr(dttET.Rows(0)!et_tipork) = "W" Then
        If dttEC.Select("ec_nprquaeva <> 0").Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661129794531250, "Impossibile eliminare la Nota di prelievo in quanto possiede una o più righe con quantità evasa diversa da 0")))
          Return False
        End If
      End If

      '--------------------------
      'Controlla se RF cancellabile
      If NTSCStr(dttET.Rows(0)!et_tipork) = "F" And IsRFsalvabile() = False And bNew = False Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661130532812500, "Impossibile eliminare la Ricevuta fiscale in quanto è stata parzialmente o totalmente riemessa. E' possibile solo ripristinare")))
        Return False
      End If

      '--------------------------
      'Controlla relativi a documento bloccato
      If bDocNonModificabile Then
        If bNonModificabileperPicking Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661132793125000, "Impossibile eliminare il documento in quanto collegato ad un file di picking.")))
          Return False
        End If
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661133309843750, "Impossibile eliminare il documento per blocco con password nell'apertura.")))
        Return False
      End If

      '--------------------------------------------------------------------------------------------------------------
      '--- Se si tratta di una Nota di Prelievo ed è attiva l'opzione di registro che ne consente l'operazione di
      '--- Inserimento/Modifica/Cancellazione, salta il test/blocco/messaggio relativi
      '--------------------------------------------------------------------------------------------------------------
      If (dttET.Rows(0)!et_tipork.ToString = "W") And (bConsModifNoteAnteChiusuraMag = True) Then GoTo SaltaBlocco
      '--------------------------------------------------------------------------------------------------------------

      '--------------------------
      'Non cancella un doc. con data < a data ultimo agg. progressivi
      If bNew = False Then
        If NTSCDate(dttET.Rows(0)("et_datdoc", DataRowVersion.Original)) <= dtUlap Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128661141092656250, "Impossibile cancellare il documento in quanto la data del documento è precedente o uguale alla data ultimo aggiornamento progressivi di magazzino; è consentito solo ripristinare")))
          Return False
        End If
      End If

SaltaBlocco:

      '--------------------------
      If Not Accconf_CheckSalvaCancella("CANC") Then Return False

      '--------------------------
      'Controlla prima che sia già stato utilizzato in conto lavoro in documenti di scarico
      If Not CheckCancelDocRiga(dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc)) Then
        'Ha già dato il messaggio
        Return False
      End If

      If Not TestPreCancellaTestmag_CheckCa2(False, False, False) Then Return False

      If Not testPreCancellaTestmag_GPV() Then Return False

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreCancellaTestmag_CheckCa2(ByVal bModifica As Boolean) As Boolean
    Try
      'obsoleta
      Return TestPreCancellaTestmag_CheckCa2(bModifica, False, False)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreCancellaTestmag_CheckCa2(ByVal bModifica As Boolean, ByVal bInApriDoc As Boolean, ByRef bBloccoxCg As Boolean) As Boolean
    Try
      '----------------
      'per compatibilità con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {bModifica, bInApriDoc, bBloccoxCg})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then
        bBloccoxCg = CBool(oIn(2))        'alla funzione è passato ByRef !!!!
        Return CBool(oOut)
      End If
      '----------------

      bBloccoxCg = False
      '----------------------------
      'se non è attivo il modulo della CA2 esco
      If CBool(lModuliSupDittaDitt And bsModSupCAE) = False Then Return True
      If Not oCldBoll.CheckEsercizioInCa2(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString) Then Return True

      Select Case NTSCStr(dttET.Rows(0)!et_tipork).ToUpper
        Case "B", "M", "Z", "T"
          'unici tipi gestiti dalla CA2
        Case Else
          Return True
      End Select

      '----------------------------
      'se il documento no è collegato alla CA2 esco
      If dttEC.Select("xxo_codcacadd <> 0").Length = 0 And dttEC.Select("xxo_codcacadd2 <> 0").Length = 0 And _
         dttEC.Select("xxo_codcacalv <> 0").Length = 0 And dttECIMP.Select("xxo_codcacadd <> 0").Length = 0 Then Return True

      '----------------------------
      'non posso modificare/cancellare se in tabanaz la data congelamento CA è successiva alla data del documento
      If NTSCDate(dttAnaz.Rows(0)!tb_dtulaca) >= NTSCDate(dttET.Rows(0)!et_datdoc) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129272025934716796, "Documento non modificabile/cancellabile: contiene dei collegamenti alla Contabilità analitica 'Duplice contabile' e la data del documento non è successiva alla data ultimo aggiornamento contabilità analitica indicata in anagrafica ditta (|" & NTSCDate(dttAnaz.Rows(0)!tb_dtulaca).ToShortDateString & "|)")))
        Return False
      End If

      '----------------------------
      'non posso modificare/cancellare se le righe di priana2 collegate al documento sono già collegate anche a registraz. CG
      'se fatturato ma non portati in CG posso modificarlo, altrimenti da fattura diff non potrei entrare nel ddt, modificarlo e rialborare la fattura. l'unica cosa è che se è fatturanon non devo rigenerare priana2, perchè precedentemente cancellata da fadi/fdin
      'If NTSCStr(dttET.Rows(0)!et_flfatt).ToUpper = "S" Then
      '  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129272033251162109, "Documento non modificabile/cancellabile: contiene dei collegamenti (tramite le causali di magazzino) alla Contabilità analitica 'Duplice contabile' ed il documento risulta essere già fatturato")))
      '  Return False
      'End If
      If bModifica = False And bInApriDoc = False Then
        If oCldBoll.TestCa2InCG(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc)) Then
          bBloccoxCg = True
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129272042813750000, "Documento non cancellabile: contiene dei collegamenti (tramite le causali di magazzino) alla Contabilità analitica 'Duplice contabile' ed il documento risulta essere già contabilizzato")))
          Return False
        End If
      End If
      If bInApriDoc Then
        If oCldBoll.TestCa2InCG(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc)) Then
          bBloccoxCg = True
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129762967646749300, "Documento non cancellabile e modificabile solo per tutto ciò che non fa variare le dimensioni di CA, quantità, prezzi, valore e date di competenza: contiene dei collegamenti (tramite le causali di magazzino) alla Contabilità analitica 'Duplice contabile' ed il documento risulta essere già contabilizzato")))
          Return False
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function TestPreCancellaTestmag_GPV() As Boolean
    Try
      If bDocDaRetail Then Return True

      If NTSCStr(dttETC.Rows(0)!tm_retail) = "S" Then
        If Not oCldBoll.VerificaMovimentoGiftCard(NTSCStr(dttET.Rows(0)!codditt), NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc)) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130124073031409419, "Nel documento è stata rilevata una Gift Card. Per procedere alla sua cancellazione è necessario usare il programma 'Gestione Punto Vendita'.")))
          Return False
        End If

        If Not oCldBoll.VerificaMovimentoPunti(NTSCStr(dttET.Rows(0)!codditt), NTSCStr(dttET.Rows(0)!et_tipork), NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc)) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130124087643524037, "Il documento movimenta dei punti. Per procedere alla sua cancellazione è necessario usare il programma 'Gestione Punto Vendita'.")))
          Return False
        End If
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function


  Public Overridable Function AggDisimpegno(ByVal strTipork As String, ByRef dttIn As DataTable) As Boolean
    Dim dtrTmp() As DataRow = Nothing
    Dim i As Integer = 0
    Dim u As Integer = 0
    Dim dttMo As New DataTable
    Dim dQta As Decimal = 0
    Dim dCol As Decimal = 0
    Dim dVal As Decimal = 0
    Dim QuaEvasa As Decimal = 0
    Dim QuaDisEvasa As Decimal = 0
    Dim ColDisEvasa As Decimal = 0
    Dim ValDisEvasa As Decimal = 0
    Dim strFlevas As String = ""

    Dim dQtaOrig As Decimal = 0
    Dim dValoreOrig As Decimal = 0

    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Try
      '----------------------------
      'Tratta il disimpegnato in conto sugli ORDINI
      dtrTmp = dttIn.Select("ec_salcon = 'C' AND ec_ornum > 0 AND (ec_qtadisimp > 0 or ec_quant > 0)")
      For i = 0 To dtrTmp.Length - 1
        With dtrTmp(i)
          If (NTSCDec(!ec_valdisimp) = 0 And NTSCDec(!ec_qtadisimp) <> 0) Or NTSCDec(!ec_qtadisimp) = 0 Then
            'se ho fatto un ddt emesso che evade ordine con qta = 0, poi riapro ddt emesso per indicare qta
            'il valore disimpegnato è sempre = 0... lo ricalcolo dall'ordine
            'attenzione: ec_valdisimp viene utilizzato per aggiornare mo_valore
            'per gli OP mo_valore contiene sempre e solo il costo della lavorazione, e non lavorazione + materiali consumati!!!
            oCldBoll.GetMovordValoremmQuant(strDittaCorrente, !ec_ortipo.ToString, NTSCInt(!ec_oranno), !ec_orserie.ToString, NTSCInt(!ec_ornum), NTSCInt(!ec_orriga), dQtaOrig, 0, "", dValoreOrig)
            If dQtaOrig <> 0 Then
              If oCldBoll.TrovaNdec(0) = 0 Then
                !ec_valdisimp = Fix(dValoreOrig / dQtaOrig) * NTSCDec(!ec_quant)
              Else
                !ec_valdisimp = Fix(dValoreOrig / dQtaOrig * 100 * NTSCDec(!ec_quant)) / 100
              End If
            Else
              !ec_valdisimp = 0
            End If
          Else
            'caso standard: ddt emesso che evade ordine con qta diversa da 0
            If NTSCDec(!ec_qtadisimp) <> 0 Then
              If oCldBoll.TrovaNdec(0) = 0 Then
                !ec_valdisimp = Fix(NTSCDec(!ec_valdisimp) / NTSCDec(!ec_qtadisimp)) * NTSCDec(!ec_quant)
              Else
                !ec_valdisimp = Fix(NTSCDec(!ec_valdisimp) / NTSCDec(!ec_qtadisimp) * 100 * NTSCDec(!ec_quant)) / 100
              End If
            Else
              !ec_valdisimp = 0
            End If
          End If
          !ec_qtadisimp = NTSCDec(!ec_quant)
          !ec_coldisimp = NTSCDec(!ec_colli)
        End With
      Next

      '----------------------------
      'Tratta il disimpegnato a saldo sugli ORDINI
      'ordini/impegni: devo aggiornare il disimpegno 
      'prendo qta,colli e valore da Documento aperto, aggiungo quanto evaso in precedenza da me se documento aperto 
        dtrTmp = dttIn.Select("ec_salcon = 'S' AND ec_ornum > 0", "ec_riga")
        For i = 0 To dtrTmp.Length - 1
        With dtrTmp(i)
          If Not oCldBoll.GetQuaevaORD(strDittaCorrente, strTipork, _
                             NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                             NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                             !ec_ortipo.ToString, NTSCInt(!ec_oranno), _
                             !ec_orserie.ToString, NTSCInt(!ec_ornum), _
                             NTSCInt(!ec_orriga), QuaEvasa, QuaDisEvasa, ColDisEvasa, ValDisEvasa, dttMo) Then Return False

          If dttMo.Rows.Count > 0 Then
            strFlevas = NTSCStr(dttMo.Rows(0)!mo_flevas).ToUpper
            dQta = NTSCDec(dttMo.Rows(0)!QuaDiff)
            dCol = NTSCDec(dttMo.Rows(0)!ColDiff)
            dVal = NTSCDec(dttMo.Rows(0)!mo_valore)
            If dQta < 0 Or strFlevas = "S" Then dQta = 0
            If dCol < 0 Or strFlevas = "S" Then dCol = 0
            'If dVal < 0 Or strFlevas = "S" Then dVal = 0
            'Se vi erano valori da evadere negativi non lo stornava correttamente
            'in MOVORD/ARTPRO
            If strFlevas = "S" Then dVal = 0
            'Considera eventualmente il doc. aperto consolidato
            If bNew = False Then
              dQta = dQta + QuaDisEvasa
              dCol = dCol + ColDisEvasa
              dVal = dVal + ValDisEvasa
            End If
            'Considera il doc. sul temporaneo
            dttGr.Clear()
            If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Sum(ec_qtadisimp) AS QuaEvasa, Sum(ec_coldisimp) AS ColEvasa, Sum(ec_valdisimp) AS ValEvasa", _
                                    "ec_ortipo = " & CStrSQL(dtrTmp(i)!ec_ortipo) & " AND ec_oranno = " & dtrTmp(i)!ec_oranno.ToString & _
                                    " AND ec_orserie = " & CStrSQL(dtrTmp(i)!ec_orserie) & " AND ec_ornum = " & dtrTmp(i)!ec_ornum.ToString & _
                                    " AND ec_orriga = " & dtrTmp(i)!ec_orriga.ToString & " AND ec_salcon = 'C'", _
                                    "") Then
              Return False
            End If
            If dttGr.Rows.Count > 0 Then
              dQta = dQta - NTSCDec(dttGr.Rows(0)!QuaEvasa)
              dCol = dCol - NTSCDec(dttGr.Rows(0)!ColEvasa)
              dVal = dVal - NTSCDec(dttGr.Rows(0)!ValEvasa)
            End If

            'aggiorno la riga in analisi
            dtrTmp(i)!ec_qtadisimp = dQta
            dtrTmp(i)!ec_coldisimp = dCol
            dtrTmp(i)!ec_valdisimp = dVal

            End If    'If dttMo.Rows.Count > 0 Then
        End With    'With dtrTmp(i)
      Next    'For i = 0 To dtrTmp.Length - 1

      '------------------------------------
      If strTipork <> "W" Then
        'Tratta il disimpegnato in conto sulle NOTE
        dtrTmp = dttIn.Select("ec_npsalcon = 'C' AND ec_npnum > 0 AND ec_npqtadis > 0")
        For i = 0 To dtrTmp.Length - 1
          If NTSCDec(dtrTmp(i)!ec_npqtadis) <> 0 Then
            If oCldBoll.TrovaNdec(0) = 0 Then
              dtrTmp(i)!ec_npvaldis = Fix(NTSCDec(dtrTmp(i)!ec_npvaldis) / NTSCDec(dtrTmp(i)!ec_npqtadis)) * NTSCDec(dtrTmp(i)!ec_quant)
            Else
              dtrTmp(i)!ec_npvaldis = ArrDbl(NTSCDec(dtrTmp(i)!ec_npvaldis) / NTSCDec(dtrTmp(i)!ec_npqtadis) * NTSCDec(dtrTmp(i)!ec_quant), oCldBoll.TrovaNdec(0))
            End If
          Else
            dtrTmp(i)!ec_npvaldis = 0
          End If
          dtrTmp(i)!ec_npcoldis = NTSCDec(dtrTmp(i)!ec_colli)
          dtrTmp(i)!ec_npqtadis = NTSCDec(dtrTmp(i)!ec_quant)
        Next

        'Tratta il disimpegnato a saldo sulle NOTE
        dtrTmp = dttIn.Select("ec_npsalcon = 'S' AND ec_npnum > 0", "ec_riga")
        For i = 0 To dtrTmp.Length - 1
          With dtrTmp(i)
            If Not oCldBoll.GetQuaevaNOTA(strDittaCorrente, strTipork, _
                               NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                               NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                               !ec_nptipo.ToString, NTSCInt(!ec_npanno), _
                               !ec_npserie.ToString, NTSCInt(!ec_npnum), _
                               NTSCInt(!ec_npriga), QuaEvasa, QuaDisEvasa, ColDisEvasa, ValDisEvasa, dttMo) Then Return False
            If dttMo.Rows.Count > 0 Then
              strFlevas = NTSCStr(dttMo.Rows(0)!mm_nprflevas).ToUpper
              dQta = NTSCDec(dttMo.Rows(0)!QuaDiff)
              dCol = NTSCDec(dttMo.Rows(0)!ColDiff)
              dVal = NTSCDec(dttMo.Rows(0)!mm_nprvalore)
              If dQta < 0 Or strFlevas = "S" Then dQta = 0
              If dCol < 0 Or strFlevas = "S" Then dCol = 0
              'If dVal < 0 Or strFlevas = "S" Then dVal = 0
              'Se vi erano valori da evadere negativi non lo stornava correttamente
              'in MOVORD/ARTPRO
              If strFlevas = "S" Then dVal = 0
              If bNew = False Then
                dQta = dQta + QuaDisEvasa
                dCol = dCol + ColDisEvasa
                dVal = dVal + ValDisEvasa
              End If
              'Considera il doc. sul temporaneo
              dttGr.Clear()
              If Not oDttgr.NTSGroupBy(dttIn, dttGr, "Sum(ec_npqtadis) AS QuaEvasa, Sum(ec_npcoldis) AS ColEvasa, Sum(ec_npvaldis) AS ValEvasa", _
                                      "ec_nptipo = " & CStrSQL(dtrTmp(i)!ec_nptipo) & " AND ec_npanno = " & dtrTmp(i)!ec_npanno.ToString & _
                                      " AND ec_npserie = " & CStrSQL(dtrTmp(i)!ec_npserie) & " AND ec_npnum = " & dtrTmp(i)!ec_npnum.ToString & _
                                      " AND ec_npriga = " & dtrTmp(i)!ec_npriga.ToString & " AND ec_npsalcon = 'C'", _
                                      "") Then
                Return False
              End If
              If dttGr.Rows.Count > 0 Then
                dQta = dQta - NTSCDec(dttGr.Rows(0)!QuaEvasa)
                dCol = dCol - NTSCDec(dttGr.Rows(0)!ColEvasa)
                dVal = dVal - NTSCDec(dttGr.Rows(0)!ValEvasa)
              End If

              'aggiorno la riga in analisi
              dtrTmp(i)!ec_npqtadis = dQta
              dtrTmp(i)!ec_npcoldis = dCol
              dtrTmp(i)!ec_npvaldis = dVal

            End If    'If dttMo.Rows.Count > 0 Then
          End With    'With dtrTmp(i)
        Next    'For i = 0 To dtrTmp.Length - 1
      End If    'If strTipork <> "W" Then

      '------------------------------------
      If strTipork = "T" Then

        'Per ogni record di MMLAVCE agg. il disimpegno in CONTO
        dtrTmp = dttLAVCENT.Select("lce_flevas = 'C' AND lce_ornum <> 0", "lce_orriga, lce_orfase")
        For i = 0 To dtrTmp.Length - 1
          dtrTmp(i)!lce_qtadisimp = NTSCDec(dtrTmp(i)!lce_qtaes) + NTSCDec(dtrTmp(i)!lce_qtascart)
        Next    'For i = 0 To dtrTmp.Length - 1

        'Aggiorna il diseimpegnato a saldo
        dtrTmp = dttLAVCENT.Select("lce_flevas = 'S' AND lce_ornum > 0")
        For i = 0 To dtrTmp.Length - 1
          With dtrTmp(i)
            If Not oCldBoll.GetQuaevaAttivit(strDittaCorrente, strTipork, _
                                         NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                         NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                                         !lce_ortipo.ToString, NTSCInt(!lce_oranno), _
                                         !lce_orserie.ToString, NTSCInt(!lce_ornum), _
                                         NTSCInt(!lce_orriga), NTSCInt(!lce_orfase), QuaEvasa, QuaDisEvasa, dttMo) Then Return False
            If dttMo.Rows.Count > 0 Then
              dQta = NTSCDec(dttMo.Rows(0)!QuantDiff)
              'dTatt = !TempattDiff
              'dTese = !TempeseDiff
              If dQta < 0 Or NTSCStr(dttMo.Rows(0)!at_flevas).ToUpper = "S" Then dQta = 0
              'Considera eventualmente il doc. aperto consolidato
              If bNew = False Then
                'dTatt = dTatt + ConvNullDbl(snaAgg2!TempatteEvasa)
                'dTese = dTese + ConvNullDbl(snaAgg2!TempeseEvasa)
                dQta = dQta + QuaDisEvasa
              End If
              'Considera il doc. sul temporaneo
              dttGr.Clear()
              If Not oDttgr.NTSGroupBy(dttLAVCENT, dttGr, "Sum(lce_qtadisimp) AS QuantEva", _
                                      "lce_ortipo = " & CStrSQL(dtrTmp(i)!lce_ortipo) & " AND lce_oranno = " & dtrTmp(i)!lce_oranno.ToString & _
                                      " AND lce_orserie = " & CStrSQL(dtrTmp(i)!lce_orserie) & " AND lce_ornum = " & dtrTmp(i)!lce_ornum.ToString & _
                                      " AND lce_orriga = " & dtrTmp(i)!lce_orriga.ToString & _
                                      " AND lce_orfase = " & dtrTmp(i)!lce_orfase.ToString & " AND lce_flevas = 'C'", _
                                      "") Then
                Return False
              End If
              If dttGr.Rows.Count > 0 Then
                'dTatt = dTatt - ConvNullDbl(snaAgg2!TempatteEva)
                'dTese = dTese - ConvNullDbl(snaAgg2!TempeseEva)
                dQta = dQta - NTSCDec(dttGr.Rows(0)!QuantEva)
              End If

              'aggiorno la riga in analisi
              dtrTmp(i)!lce_qtadisimp = dQta
            End If    'If dttMo.Rows.Count > 0 Then
          End With
        Next     'For i = 0 To dtrTmp.Length - 1
      End If    'If strTipork = "T" Then
      '--------------------------------------------------------------------------------------------------------------
      'If strTipork = "U" Then
      '  dttGr.Clear()
      '  dttGr.Dispose()
      '  If oDttgr.NTSGroupBy(dttIn, dttGr, "MIN(ec_riga) AS RIGAU", _
      '    "ec_salcon = 'S' AND ec_ornum > 0", _
      '    "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga") = True Then
      '    For i = 0 To (dttGr.Rows.Count - 1)
      '      dtrTmp = dttIn.Select("ec_riga <> " & NTSCInt(dttGr.Rows(i)!RIGAU), "")
      '      For u = 0 To (dtrTmp.Length - 1)
      '        dtrTmp(u)!ec_salcon = "C"
      '      Next u
      '    Next i
      '  End If
      '  dttGr.Clear()
      '  dttGr.Dispose()
      'End If
      '--------------------------------------------------------------------------------------------------------------
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMo.Clear()
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function AggDisimpegnoTc(ByVal strTipork As String, ByRef dttIn As DataTable, ByRef dttInTC As DataTable) As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dtrT2() As DataRow = Nothing
    Dim dtrTtc() As DataRow = Nothing
    Dim l As Integer = 0
    Dim i As Integer = 0
    Dim n As Integer = 0
    Dim dttMo As New DataTable
    Dim dQta(25) As Decimal
    Dim QuaEvasa(25) As Decimal
    Dim strFlevas As String = ""

    Try
      '--------------------------------
      'Tratta il disimpegnato in conto sugli ORDINI
      'su tco la quantità disimpegnata è semre uguale alla quantità (non posso evadere quantità superiori al residuo ordinato)
      dtrT = dttIn.Select("xxo_codtagl <> 0 AND ec_salcon = 'C' AND ec_ornum > 0 AND ec_qtadisimp > 0")
      For l = 0 To dtrT.Length - 1
        With dtrT(l)
          dtrTtc = dttInTC.Select("ec_riga = " & !ec_riga.ToString)
          If dtrTtc.Length > 0 Then
            For i = 1 To 24
              dtrTtc(0)("ec_qtadis" & i.ToString("00")) = NTSCDec(dtrTtc(0)("ec_quant" & i.ToString("00")))
            Next
          End If
        End With    'With dtrT(i)
      Next    'For l = 0 To dtrT.Length - 1

      '--------------------------------
      'Tratta il disimpegnato a saldo sugli ORDINI
      dtrT = dttIn.Select("xxo_codtagl <> 0 AND ec_salcon = 'S' AND ec_ornum > 0", "ec_riga")
      For i = 0 To dtrT.Length - 1
        With dtrT(i)
          If Not oCldBoll.GetQuaevaORDtc(strDittaCorrente, strTipork, _
                             NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                             NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                             !ec_ortipo.ToString, NTSCInt(!ec_oranno), _
                             !ec_orserie.ToString, NTSCInt(!ec_ornum), _
                             NTSCInt(!ec_orriga), QuaEvasa, dttMo) Then Return False

          If dttMo.Rows.Count > 0 Then
            strFlevas = NTSCStr(dttMo.Rows(0)!FLEVAS).ToUpper
            For l = 1 To 24
              dQta(l) = NTSCDec(dttMo.Rows(0)("QuaDiff" & l.ToString("00")))
              If (dQta(l) < 0) Or (strFlevas = "S") Then dQta(l) = 0
            Next
            'Se vi erano valori da evadere negativi non lo stornava correttamente
            'in MOVORD/ARTPRO
            'Considera eventualmente il doc. aperto consolidato
            If bNew = False Then
              For l = 1 To 24
                dQta(l) = dQta(l) + QuaEvasa(l)
              Next
            End If
            'Considera il doc. sul temporaneo
            dtrT2 = dttIn.Select("ec_ortipo = " & CStrSQL(dtrT(i)!ec_ortipo) & " AND ec_oranno = " & dtrT(i)!ec_oranno.ToString & _
                                " AND ec_orserie = " & CStrSQL(dtrT(i)!ec_orserie) & " AND ec_ornum = " & dtrT(i)!ec_ornum.ToString & _
                                " AND ec_orriga = " & dtrT(i)!ec_orriga.ToString & " AND ec_salcon = 'C'")
            For n = 0 To dtrT2.Length - 1
              dtrTtc = dttInTC.Select("ec_riga = " & dtrT2(n)!ec_riga.ToString)
              For l = 1 To 24
                dQta(l) = dQta(l) - NTSCDec(dtrTtc(0)("ec_qtadis" & l.ToString("00")))
              Next
            Next

            'aggiorno la riga in analisi
            dtrTtc = dttInTC.Select("ec_riga = " & dtrT(i)!ec_riga.ToString)
            If dtrTtc.Length > 0 Then
              For l = 1 To 24
                dtrTtc(0)("ec_qtadis" & l.ToString("00")) = dQta(l)
              Next
            End If
          End If    'If dttMo.Rows.Count > 0 Then
        End With    'With dtrT(i)
      Next    'For i = 0 To dtrT.Length - 1

      If strTipork <> "W" Then
        '--------------------------------
        'Tratta il disimpegnato in conto sulle NOTE
        'su tco la quantità disimpegnata è semre uguale alla quantità (non posso evadere quantità superiori al residuo ordinato)
        dtrT = dttIn.Select("xxo_codtagl <> 0 AND ec_npsalcon = 'C' AND ec_npnum > 0 AND ec_npqtadis > 0")
        For l = 0 To dtrT.Length - 1
          With dtrT(l)
            dtrTtc = dttInTC.Select("ec_riga = " & !ec_riga.ToString)
            If dtrTtc.Length > 0 Then
              For i = 1 To 24
                dtrTtc(0)("ec_npqtadis" & i.ToString("00")) = NTSCDec(dtrTtc(0)("ec_quant" & i.ToString("00")))
              Next i
            End If
          End With    'With dtrT(i)
        Next    'For l = 0 To dtrT.Length - 1

        '--------------------------------
        'Tratta il disimpegnato a saldo sulle NOTE
        dtrT = dttIn.Select("xxo_codtagl <> 0 AND ec_npsalcon = 'S' AND ec_npnum > 0", "ec_riga")
        For i = 0 To dtrT.Length - 1
          With dtrT(i)
            If Not oCldBoll.GetQuaevaNOTAtc(strDittaCorrente, strTipork, _
                               NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                               NTSCInt(IIf(bNew, 0, dttET.Rows(0)!et_numdoc)), _
                               !ec_nptipo.ToString, NTSCInt(!ec_npanno), _
                               !ec_npserie.ToString, NTSCInt(!ec_npnum), _
                               NTSCInt(!ec_npriga), QuaEvasa, dttMo) Then Return False

            If dttMo.Rows.Count > 0 Then
              strFlevas = NTSCStr(dttMo.Rows(0)!mm_nprflevas).ToUpper
              For l = 1 To 24
                dQta(l) = NTSCDec(dttMo.Rows(0)("QuaDiff" & l.ToString("00")))
                If (dQta(l) < 0) Or (strFlevas = "S") Then dQta(l) = 0
              Next
              'Se vi erano valori da evadere negativi non lo stornava correttamente
              'in MOVORD/ARTPRO
              'Considera eventualmente il doc. aperto consolidato
              If bNew = False Then
                For l = 1 To 24
                  dQta(l) = dQta(l) + QuaEvasa(l)
                Next
              End If
              'Considera il doc. sul temporaneo
              dtrT2 = dttIn.Select("ec_nptipo = " & CStrSQL(dtrT(i)!ec_ortipo) & " AND ec_npanno = " & dtrT(i)!ec_oranno.ToString & _
                                  " AND ec_npserie = " & CStrSQL(dtrT(i)!ec_orserie) & " AND ec_npnum = " & dtrT(i)!ec_ornum.ToString & _
                                  " AND ec_npriga = " & dtrT(i)!ec_orriga.ToString & " AND ec_npsalcon = 'C'")
              For n = 0 To dtrT2.Length - 1
                dtrTtc = dttInTC.Select("ec_riga = " & dtrT2(n)!ec_riga.ToString)
                For l = 1 To 24
                  dQta(l) = dQta(l) - NTSCDec(dtrTtc(0)("ec_npqtadis" & l.ToString("00")))
                Next
              Next

              'aggiorno la riga in analisi
              dtrTtc = dttInTC.Select("ec_riga = " & dtrT(i)!ec_riga.ToString)
              If dtrTtc.Length > 0 Then
                For l = 1 To 24
                  dtrTtc(0)("ec_npqtadis" & l.ToString("00")) = dQta(l)
                Next
              End If
            End If    'If dttMo.Rows.Count > 0 Then
          End With    'With dtrT(i)
        Next    'For i = 0 To dtrT.Length - 1
      End If    'If strTipork <> "W" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMo.Clear()
    End Try
  End Function
  Public Overridable Function AggSpeaccRiga() As Boolean
    '---------------------------------
    'Ripartisce in mm_numpac le spese come indicato in opzione
    ' rip. anche le spese di imballo !!!!
    Dim dSpeacc As Decimal = 0
    Dim dResid As Decimal = 0
    Dim dQuota As Decimal = 0
    Dim dTotmerce As Decimal = 0
    Dim dSpeacc2 As Decimal = 0
    Dim dResid2 As Decimal = 0
    Dim dQuota2 As Decimal = 0
    Dim dSpeaccv As Decimal = 0
    Dim dTotmercev As Decimal = 0
    Dim dQuotav As Decimal = 0
    Dim dResidv As Decimal = 0
    Dim dAcconti As Decimal = 0
    Dim dAccontiv As Decimal = 0
    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Dim dtrT() As DataRow = Nothing
    Dim i As Integer = 0
    Try
      With dttET.Rows(0)

        If nSpeseDaRipartire = 0 Then
          dSpeacc = 0
        Else
          If nSpeseDaRipartire = 1 Then
            dSpeacc = NTSCDec(!et_speacc) + NTSCDec(!et_speimb)
            If NTSCInt(!et_valuta) <> 0 Then dSpeaccv = NTSCDec(!et_speaccv) + NTSCDec(!et_speimbv)
          Else
            dSpeacc = NTSCDec(!et_speacc) + NTSCDec(!et_speimb) + NTSCDec(!et_speinc) + NTSCDec(!et_bolli)
            If NTSCInt(!et_valuta) <> 0 Then dSpeaccv = NTSCDec(!et_speaccv) + NTSCDec(!et_speimbv) + NTSCDec(!et_speincv) + NTSCDec(!et_bolliv)
          End If
        End If
        dSpeacc2 = NTSCDec(!et_cosdog) + NTSCDec(!et_costrasp) + NTSCDec(!et_cosvar1) + NTSCDec(!et_cosvar2) + NTSCDec(!et_cosvar3)

        '-------------------------
        dTotmerce = NTSCDec(!et_totmerce)
        If NTSCInt(!et_valuta) <> 0 Then dTotmercev = NTSCDec(!et_totmercev)
        'Nei carichi di produzione non può utilizzare il TotaleMerce per il fatto che
        'non rappresenta la sommatoria dei valori di riga ma solo quant x prezzo, prezzo
        'che nei carichi di produzione non tiene conto dei costi del materiali.
        If !et_tipork.ToString = "T" Then
          If Not oDttgr.NTSGroupBy(dttEC, dttGr, "Sum(ec_valore) AS Valore, Sum(ec_valorev) AS Valorev", "", "") Then Return False
          If dttGr.Rows.Count > 0 Then
            dTotmerce = NTSCDec(dttGr.Rows(0)!Valore)
            If NTSCInt(!et_valuta) <> 0 Then dTotmercev = NTSCDec(dttGr.Rows(0)!Valorev)
          End If
          dttGr.Clear()
        End If

        '-------------------------
        'Determina, relativamente a totmerce, la parte relativa agli acconti
        If Not oDttgr.NTSGroupBy(dttEC, dttGr, " Sum(ec_valore) AS Acconti, Sum(ec_valorev) AS Accontiv", "ec_acnum <> 0", "") Then Return False
        If dttGr.Rows.Count > 0 Then
          dAcconti = NTSCDec(dttGr.Rows(0)!Acconti)
          If NTSCInt(!et_valuta) <> 0 Then dAccontiv = NTSCDec(dttGr.Rows(0)!Accontiv)
        End If
        dttGr.Clear()

        dTotmerce = ArrDbl(dTotmerce - dAcconti, oCldBoll.TrovaNdec(0))
        If NTSCInt(!et_valuta) <> 0 Then dTotmercev = ArrDbl(dTotmercev - dAccontiv, oCldBoll.TrovaNdec(NTSCInt(!et_valuta)))

        '-------------------------
        'Inizia la ripartizione
        If dSpeacc = 0 And dSpeacc2 = 0 Then
          For Each dtrTmp As DataRow In dttEC.Rows
            dtrTmp!ec_numpac = 0
            dtrTmp!ec_numpex = 0
            dtrTmp!ec_numpacv = 0
          Next
        Else
          'Mette a posto numpac e numpex
          'Non ripartisce nulla sulle righe che
          dtrT = dttEC.Select("ec_acnum = 0 AND ec_valore <> 0", "ec_riga")
          dResid = dSpeacc
          dResid2 = dSpeacc2
          dResidv = dSpeaccv
          For i = 0 To dtrT.Length - 1
            'Determina la quota delle riga corrente
            If dTotmerce <> 0 Then
              dQuota = ArrDbl((NTSCDec(dtrT(i)!ec_valore) * dSpeacc) / dTotmerce, oCldBoll.TrovaNdec(0))
              dQuota2 = ArrDbl((NTSCDec(dtrT(i)!ec_valore) * dSpeacc2) / dTotmerce, oCldBoll.TrovaNdec(0))
            Else
              dQuota = 0
              dQuota2 = 0
            End If
            If NTSCInt(!et_valuta) <> 0 Then
              If dTotmercev <> 0 Then
                dQuotav = ArrDbl((NTSCDec(dtrT(i)!ec_valorev) * dSpeaccv) / dTotmercev, oCldBoll.TrovaNdec(NTSCInt(!et_valuta)))
              Else
                dQuotav = 0
              End If
            End If
            dtrT(i)!ec_numpac = dQuota
            dtrT(i)!ec_numpex = dQuota2
            If strRipartiSpeaccSuValstat = "S" Then dtrT(i)!ec_valstat = DeterminaValoreStatistico(dtrT(i), NTSCDec(dtrT(i)!ec_numpac))
            If NTSCInt(!et_valuta) <> 0 Then dtrT(i)!ec_numpacv = dQuotav
            dResid = ArrDbl(dResid - dQuota, oCldBoll.TrovaNdec(0))
            dResid2 = ArrDbl(dResid2 - dQuota2, oCldBoll.TrovaNdec(0))
            If NTSCInt(!et_valuta) <> 0 Then dResidv = ArrDbl(dResidv - dQuotav, oCldBoll.TrovaNdec(NTSCInt(!et_valuta)))
            If i = dtrT.Length - 1 Then
              'Sull'ultimo record
              If dResid <> 0 Or dResid2 <> 0 Or dResidv <> 0 Then
                dtrT(i)!ec_numpac = NTSCDec(dtrT(i)!ec_numpac) + dResid
                dtrT(i)!ec_numpex = NTSCDec(dtrT(i)!ec_numpex) + dResid2
                'Corregge valstat se richiesto
                If strRipartiSpeaccSuValstat = "S" Then dtrT(i)!ec_valstat = DeterminaValoreStatistico(dtrT(i), NTSCDec(dtrT(i)!ec_numpac))
                If NTSCInt(!et_valuta) <> 0 Then dtrT(i)!ec_numpacv = NTSCDec(dtrT(i)!ec_numpacv) + dResidv
              End If
            End If    'If i = dtrT.Length - 1 Then  
          Next    'For i = 0 To dtrT.Length - 1
        End If    'If dSpeacc = 0 And dSpeacc2 = 0 Then
      End With    'With dttET.Rows(0)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function AggMovcla(ByVal strTipo As String, ByVal nAnno As Integer, ByVal strSerie As String, _
                                        ByVal lNumdoc As Integer, _
                                        ByVal bInsNoteInMovcla As Boolean, ByVal dtDatdoc As Date, ByVal lConto As Integer) As Boolean
    Dim dQuantNeces As Decimal = 0 'Quantità necessaria del figlio per soddisfare questa consegna al cliente
    Dim dQuantResid As Decimal = 0 'Quantità residua da consumare per l'articolo figlio
    Dim dCoeffCons As Decimal = 0, dOuQuant As Decimal = 0, bTrovCar As Boolean = False, dQuantGiaResa As Decimal = 0
    Dim lRigaPrev As Integer = 0, strMsg As String = ""
    Dim dQuantResidScarico As Decimal = 0
    Dim dtrPrincipale() As DataRow = Nothing
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim dttGr1 As New DataTable
    Dim dttM1 As New DataTable
    Dim dttM2 As New DataTable
    Dim dttM3 As New DataTable
    Dim evnt As NTSEventArgs = Nothing
    Dim nRow2 As Integer = 0
    Dim nRow3 As Integer = 0
    Dim i As Integer = 0
    Dim l As Integer = 0

    Try
      If strTipo = "W" Then Return True

      '------------------------------
      'Rimuove il contenuto del temporaneo TTMOVCLA (e lo ricrea sempre che serva)
      dttMOVCLA.Clear()

      '------------------------------
      'Controlla se deve eseguire operazioni su movcla
      If dttEC.Select("(xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND (xxo_tipcaum = 'E' OR xxo_tipcaum = 'K' OR xxo_tipcaum = 'F')").Length = 0 Then
        Return True
      End If

      '------------------------------
      'Crea le righe in MOVCLA per i movimenti E = Reso lavorato con distinta
      'Articoli NON GESTITI A FASE
      If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_riga, Min(ec_codart) AS CodartB, Min(ec_quant) AS QuantB, " & _
                                " Min(ec_ccriga) AS RigaT, Min(ec_cctipo) AS TipoT, Min(ec_ccanno) AS AnnoT, " & _
                                " Min(ec_ccserie) AS SerieT, Min(ec_ccnum) AS NumeroT", _
                                "xxo_flclavo = 'C' AND xxo_tipcaum = 'E'", "ec_riga") Then Return False
      dtrPrincipale = dttGr.Select("", "ec_riga")
      For Each dtrMain As DataRow In dtrPrincipale
        lRigaPrev = 0
        '------------------
        'per ogni riga di documento (as esempio tipork 'B', ottengo l'elenco dei carichi da produzione 'T' e relative righe di scarico 'U'
        'raggruppate per riga di scarico)
        If Not oCldBoll.AggMovcla1(strDittaCorrente, dtrMain!TipoT.ToString, NTSCInt(dtrMain!AnnoT), dtrMain!SerieT.ToString, _
                                   NTSCInt(dtrMain!NumeroT), NTSCInt(dtrMain!RigaT), dttM1) Then Return False
        '------------------
        'da usarsi congiuntamente dtrMain e dtrM1, in VB6 erano una query unica tra mmtrans e movmagT, movmagU, ...
        '------------------
        For Each dtrM1 As DataRow In dttM1.Rows
          'Segnalo una situazione anomala dove il cod. articolo RESO <> dall'articolo refenziato nel carico di produzione
          'Lo fa solo ad ogni riga resa
          If lRigaPrev <> NTSCInt(dtrMain!ec_riga) Then
            If dtrMain!CodartB.ToString.ToUpper <> dtrM1!CodartT.ToString.ToUpper Then
              If bRendiBloccantiAlertCLavoro Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128673515839375000, "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: l'articolo reso '|" & dtrMain!CodartB.ToString.ToUpper & "|', riga documento |" & dtrMain!ec_riga.ToString & "|, non concide con l'articolo indicato nel carico di produzione a cui quetsa riga è riferita: |" & dtrM1!CodartT.ToString.ToUpper & "|. Salvataggio del documento non consentito.")))
                Return False
              Else
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128734888489335839, _
                                        "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: l'articolo reso '|" & dtrMain!CodartB.ToString.ToUpper & "|', riga documento |" & dtrMain!ec_riga.ToString & "|, non concide con l'articolo indicato nel carico di produzione a cui quetsa riga è riferita: |" & dtrM1!CodartT.ToString.ToUpper & "|. Procedere comunque al salvataggio del documento?"))
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
              End If
            End If
          End If
          lRigaPrev = NTSCInt(dtrMain!ec_riga)
          'Calcolo del coefficiente di consumo
          If NTSCDec(dtrM1!QuantT) <> 0 Then
            dCoeffCons = ArrDbl(NTSCDec(dtrM1!SommaQuantU) / NTSCDec(dtrM1!QuantT), 8)
          Else
            dCoeffCons = 0
          End If
          'Calcolo della quantità di materiale consumata proporz.
          If ArrDbl(NTSCDec(dtrM1!QuantT), 3) = ArrDbl(NTSCDec(dtrMain!quantB), 3) Then
            dQuantNeces = NTSCDec(dtrM1!SommaQuantU)
          Else
            dQuantNeces = ArrDbl(NTSCDec(dtrMain!quantB) * dCoeffCons, 3)
          End If
          'Se dQuantNeces = 0 allora non fa nulla
          If dQuantNeces = 0 Then
            GoTo SkipMovcla
          End If
          'Ora apre lo scarico di prod. per vedere in dettaglio i riferimenti
          'alle bolle di carico (mm_cl ...)
          If Not oCldBoll.AggMovcla2(strDittaCorrente, dtrMain!TipoT.ToString, NTSCInt(dtrMain!AnnoT), _
                                    dtrMain!serieT.ToString, NTSCInt(dtrMain!NumeroT), NTSCInt(dtrMain!RigaT), _
                                    dtrM1!CodartU.ToString, dttM2) Then Return False
          nRow2 = 0
          Do While Not nRow2 = dttM2.Rows.Count And dQuantNeces <> 0
            'Per ogni riga di scarico di prod. verifica la bolla di carico agganciata
            'Determina la parte già consumata sia sul residente (meno il doc. aperto)
            dQuantResid = 0
            dQuantResidScarico = ArrDbl(NTSCDec(dttM2.Rows(nRow2)!mm_quant), 3)
            With dttM2.Rows(nRow2)
              If Not oCldBoll.AggMovcla3(strDittaCorrente, strTipo, nAnno, strSerie, lNumdoc, !mm_cltipo.ToString, NTSCInt(!mm_clanno), _
                                        !mm_clserie.ToString, NTSCInt(!mm_clnum), NTSCInt(!mm_clriga), bNew, dttM3) Then Return False
            End With
            If dttM3.Rows.Count > 0 Then
              dQuantResid = ArrDbl(NTSCDec(dttM3.Rows(0)!QuantCla), 3)
            End If
            dttM3.Clear()

            'Determina la parte già consumata sia sul temporaneo TTMOVCLA
            With dttM2.Rows(nRow2)
              dtrT = dttMOVCLA.Select("mc_intipo = '" & !mm_cltipo.ToString & "' AND mc_inanno = " & _
                                      !mm_clanno.ToString & " AND mc_inserie = '" & !mm_clserie.ToString & _
                                      "' AND mc_innum = " & !mm_clnum.ToString & " AND mc_inriga = " & !mm_clriga.ToString)
              For i = 0 To dtrT.Length - 1
                dQuantResid += ArrDbl(NTSCDec(dtrT(i)!mc_inquant) * NTSCDec(dtrT(i)!mc_carscar), 3)
              Next
            End With

            '--------------------------------
            'Da dQuantResidScarico devo andare a stornare quanto ho già assegnato nelle righe
            'soprastanti di questo reso RIFERITE allo carico/scarico di produzione (esempio
            'quando rendo 2 righe con lo stesso ARTICOLO, referenziato alla stessa riga di CARICO DI
            'PRODUZIONE
            dtrT = dttEC.Select("ec_tipork = '" & strTipo & "' " & _
                                " AND ec_cctipo = '" & dtrMain!TipoT.ToString & _
                                "' AND ec_ccanno = " & dtrMain!AnnoT.ToString & _
                                " AND ec_ccserie = '" & dtrMain!serieT.ToString & _
                                "' AND ec_ccnum = " & dtrMain!NumeroT.ToString & _
                                " AND ec_ccriga = " & dtrMain!RigaT.ToString)
            For i = 0 To dtrT.Length - 1
              With dttM2.Rows(nRow2)
                dtrT1 = dttMOVCLA.Select("mc_intipo = '" & !mm_cltipo.ToString & "' AND mc_inanno = " & !mm_clanno.ToString & _
                                      " AND mc_inserie = '" & !mm_clserie.ToString & "' AND mc_innum = " & !mm_clnum.ToString & _
                                      " AND mc_inriga = " & !mm_clriga.ToString & " AND mc_ouriga = " & dtrT(i)!ec_riga.ToString)
                For l = 0 To dtrT1.Length - 1
                  dQuantResidScarico += ArrDbl(NTSCDec(dtrT1(l)!mc_inquant) * NTSCDec(dtrT1(l)!mc_carscar), 3)
                Next
              End With
            Next    'For i = 0 To dtrT.Length - 1

            '--------------------------------
            'Passa a quello successivo se il reisduo è <=0
            If dQuantResid <= 0 Then
              GoTo SkipRigaCarico
            End If
            'Se il residuo di quella bolla di carico supera la quantità consumata
            'in questa riga di scarico lo riduce
            If dQuantResid > dQuantResidScarico Then dQuantResid = dQuantResidScarico
            'Se la quantità occorrente è coperta da questa riga di carico...
            If dQuantNeces <= dQuantResid Then
              'Calcola la q.tà ouquant
              If dCoeffCons = 0 Then
                dOuQuant = 0
              Else
                dOuQuant = ArrDbl(dQuantNeces / dCoeffCons, 3)
              End If
              '---------------------
              'Scrive sul temporaneo TTMOVCLA
              dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
              With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
                !codditt = strDittaCorrente
                !mc_outipo = strTipo
                !mc_ouanno = nAnno
                !mc_ouserie = strSerie
                !mc_ounum = lNumdoc
                !mc_intipo = dttM2.Rows(nRow2)!mm_cltipo.ToString
                !mc_inanno = NTSCInt(dttM2.Rows(nRow2)!mm_clanno)
                !mc_inserie = dttM2.Rows(nRow2)!mm_clserie.ToString
                !mc_innum = NTSCInt(dttM2.Rows(nRow2)!mm_clnum)
                !mc_inriga = NTSCInt(dttM2.Rows(nRow2)!mm_clriga)
                !mc_ouriga = NTSCInt(dtrMain!ec_riga)
                !mc_carscar = -1
                !mc_incodart = dtrM1!CodartU
                !mc_inquant = dQuantNeces
                !mc_incolli = 0
                !mc_oucodart = dtrMain!CodartB
                !mc_ouquant = dOuQuant
                !mc_oucolli = 0
                !mc_coefcons = dCoeffCons
                !mc_note = IIf(bInsNoteInMovcla, dttM2.Rows(nRow2)!mm_note, DBNull.Value)
              End With
              'Esce da questo loop
              dttM2.Clear()
              GoTo SkipMovcla
            Else
              'La quantità reisdua non copre quella occorrente
              'Calcola la q.tà ouquant
              If dCoeffCons = 0 Then
                dOuQuant = 0
              Else
                dOuQuant = ArrDbl(dQuantResid / dCoeffCons, 3)
              End If
              'Scrive per il residuo in TTMOVCLA
              dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
              With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
                !codditt = strDittaCorrente
                !mc_outipo = strTipo
                !mc_ouanno = nAnno
                !mc_ouserie = strSerie
                !mc_ounum = lNumdoc
                !mc_intipo = dttM2.Rows(nRow2)!mm_cltipo.ToString
                !mc_inanno = NTSCInt(dttM2.Rows(nRow2)!mm_clanno)
                !mc_inserie = dttM2.Rows(nRow2)!mm_clserie.ToString
                !mc_innum = NTSCInt(dttM2.Rows(nRow2)!mm_clnum)
                !mc_inriga = NTSCInt(dttM2.Rows(nRow2)!mm_clriga)
                !mc_ouriga = NTSCInt(dtrMain!ec_riga)
                !mc_carscar = -1
                !mc_incodart = dtrM1!CodartU
                !mc_inquant = dQuantResid
                !mc_incolli = 0
                !mc_oucodart = dtrMain!CodartB
                !mc_ouquant = dOuQuant
                !mc_oucolli = 0
                !mc_coefcons = dCoeffCons
                !mc_note = IIf(bInsNoteInMovcla, dttM2.Rows(nRow2)!mm_note, DBNull.Value)
              End With
              'Decrementa la q.tà necessaria e continua a loppare
              dQuantNeces = ArrDbl(dQuantNeces - dQuantResid, 3)
            End If
SkipRigaCarico:
            nRow2 += 1
          Loop    'Do While Not nRow2 = dttM2.Rows.Count And dQuantNeces <> 0
          dttM2.Clear()

          'Se esistono ancora delle quantità da ripartire segnala con un messaggio
          If dQuantNeces > 0.001 Then 'tolleranza
            If bRendiBloccantiAlertCLavoro Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128674037495308750, "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: per l'articolo reso '|" & NTSCStr(dtrMain!CodartB) & "|', riga documento |" & dtrMain!ec_riga.ToString & "|, non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato dell'articolo '|" & NTSCStr(dtrM1!CodartU) & "|'. Quantità mancante |" & dQuantNeces.ToString(oApp.FormatQta) & "|. Salvataggio del documento non consentito.")))
              Return False
            Else
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128673517368906250, _
                                       "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: per l'articolo reso '|" & NTSCStr(dtrMain!CodartB) & "|', riga documento |" & dtrMain!ec_riga.ToString & "|, non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato dell'articolo '|" & NTSCStr(dtrM1!CodartU) & "|'. Quantità mancante |" & dQuantNeces.ToString(oApp.FormatQta) & "|. Procedere comunque al salvataggio del documento?"))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
            End If
          End If
SkipMovcla:
        Next    'For Each dtrM1 As DataRow In dttM1.Rows
      Next    'For Each dtrMain As DataRow In dtrPrincipale
      dttGr.Clear()
      dttGr1.Clear()
      dttM1.Clear()
      dttM2.Clear()
      dttM3.Clear()

      '-----------------------------
      'Crea le righe in MOVCLA per i movimenti E = Reso lavorato con distinta
      'Articoli GESTITI A FASE
      '1)Loppa sulle righe di MMTRANS
      dtrPrincipale = dttEC.Select("ec_tipork = '" & strTipo & "' AND ec_fase <> 0  AND (xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND xxo_tipcaum = 'E'")
      For Each dtrMain As DataRow In dtrPrincipale
        'Per ogni riga di bolla/fattura apre i carichi di produzione precedenti
        '(stesso articolo/commessa) raggruppando per articolo/fase
        bTrovCar = False
        If Not oCldBoll.AggMovcla4(strDittaCorrente, dtrMain!ec_codart.ToString, NTSCInt(dtrMain!ec_fase), _
                                   NTSCInt(dtrMain!ec_commeca), dttM1) Then Return False
        For Each dtrM1 As DataRow In dttM1.Rows
          '--------------------------
          'Aggiunto controllo per verificare se la quantità caricata (car prod.) è sufficiente
          'ovviamente sulla fase resa al cliente
          If NTSCInt(dtrM1!mm_fase) = NTSCInt(dtrMain!ec_fase) Then
            bTrovCar = True
            dQuantGiaResa = 0
            'per controllare se i carichi di produzione sono sufficienti va tolto da
            'dtrM1!QuantT la quantità già 'rese' in precedenti documenti di reso
            'tenendo conto del fatto che un documento può essere aperto in modifica
            If Not oCldBoll.AggMovcla5(strDittaCorrente, strTipo, nAnno, strSerie, lNumdoc, _
                                      dtrMain!ec_codart.ToString, NTSCInt(dtrMain!ec_fase), _
                                      NTSCInt(dtrMain!ec_commeca), bNew, dttM2) Then Return False
            If dttM2.Rows.Count > 0 Then
              dQuantGiaResa = ArrDbl(NTSCDec(dttM2.Rows(0)!QtaGiaResa), 3)
            End If
            dttM2.Clear()
            '-----------------------
            'Poi deve tenere conto delle righe, presente nel transitorio MMTRANS (diverse dalla corente)
            'per tenere conto delle eventuali righe (stesso articolo/fase/commessa) inserite
            If Not oDttgr.NTSGroupBy(dttEC, dttGr, "Sum(ec_quant) AS QtaGiaResa", _
                                       "ec_tipork = '" & strTipo & _
                                       "' AND (xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND xxo_tipcaum = 'E' " & _
                                       "AND ec_riga <> " & dtrMain!ec_riga.ToString & " " & _
                                       "AND ec_codart = " & CStrSQL(dtrMain!ec_codart) & " " & _
                                       "AND ec_fase = " & dtrMain!ec_fase.ToString & " " & _
                                       "AND ec_commeca = " & dtrMain!ec_commeca.ToString, _
                                       "") Then Return False
            If dttGr.Rows.Count > 0 Then
              dQuantGiaResa = ArrDbl(dQuantGiaResa + NTSCDec(dttGr.Rows(0)!QtaGiaResa), 3)
            End If
            dttGr.Clear()

            If ArrDbl(NTSCDec(dtrM1!QuantT) - ArrDbl(dQuantGiaResa, 3), 3) < ArrDbl(NTSCDec(dtrMain!ec_quant), 3) Then
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128674094480308750, _
                           "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: " & _
                           "per l'articolo A FASE reso '|" & NTSCStr(dtrMain!ec_codart) & "|', fase |" & _
                           dtrMain!ec_fase.ToString & "|, riga documento |" & dtrMain!ec_riga.ToString & _
                           "|, non ci sono sufficienti carichi di produzione. Quantità resa sulla riga corrente |" & _
                           ArrDbl(NTSCDec(dtrMain!ec_quant), 3).ToString(oApp.FormatQta) & "|, quantità caricata |" & _
                           ArrDbl(NTSCDec(dtrM1!QuantT), 3).ToString(oApp.FormatQta) & "|, quantità già resa |" & _
                           ArrDbl(dQuantGiaResa, 3).ToString(oApp.FormatQta) & "|. Procedere comunque al salvataggio del documento?"))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
            End If
          End If
          '-----------------------------
          'Ora determina il consumo dei figli (non a fasi) x ciascuna fase
          If Not oCldBoll.AggMovcla6(strDittaCorrente, dtrMain!ec_codart.ToString, NTSCInt(dtrM1!mm_fase), _
                                     NTSCInt(dtrMain!ec_commeca), dttM2) Then Return False
          For Each dtrM2 As DataRow In dttM2.Rows
            'Calcolo del coefficiente di consumo
            If NTSCDec(dtrM1!QuantT) <> 0 Then
              dCoeffCons = ArrDbl(NTSCDec(dtrM2!QuantU) / NTSCDec(dtrM1!QuantT), 8)
            Else
              dCoeffCons = 0
            End If
            'Calcolo della quantità di materiale consumata proporz.
            If ArrDbl(NTSCDec(dtrM1!QuantT), 3) = ArrDbl(NTSCDec(dtrMain!ec_quant), 3) Then
              dQuantNeces = ArrDbl(NTSCDec(dtrM2!QuantU), 3)
            Else
              dQuantNeces = ArrDbl(NTSCDec(dtrMain!ec_quant) * dCoeffCons, 3)
            End If
            'Se dQuantNeces = 0 allora non fa nulla
            If dQuantNeces = 0 Then
              GoTo SkipRigaCorrente
            End If
            'Ora seleziona gli articoli 'aperti' in MOVCLA, scartando
            'l'eventuale documento aperto,
            If Not oCldBoll.AggMovcla7(strDittaCorrente, strTipo, nAnno, strSerie, lNumdoc, _
                                      dtrM2!mm_codart.ToString, NTSCInt(dtrMain!ec_commeca), _
                                      NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString, _
                                      bAggMovClaFasiPerCommessa, bNew, dttM3, _
                                      bAggMovClaFasiFiltroCliente, lConto) Then Return False
            nRow3 = 0
            Do While Not nRow3 = dttM3.Rows.Count And dQuantNeces <> 0
              'Q.tà residua della bolla di carico corrente
              dQuantResid = ArrDbl(NTSCDec(dttM3.Rows(nRow3)!QuantCar), 3)
              'Storna la parte già eventualmente consumata sul temporaneo TTMOVCLA
              'relativa a quella riga di carico
              With dttM3.Rows(nRow3)
                dtrT = dttMOVCLA.Select("mc_intipo = '" & !mc_intipo.ToString & "' AND mc_inanno = " & _
                            !mc_inanno.ToString & " AND mc_inserie = '" & !mc_inserie.ToString & _
                            "' AND mc_innum = " & !mc_innum.ToString & " AND mc_inriga = " & !mc_inriga.ToString)
              End With
              For i = 0 To dtrT.Length - 1
                dQuantResid = ArrDbl(dQuantResid + (NTSCDec(dtrT(0)!mc_inquant) * NTSCDec(dtrT(0)!mc_carscar)), 3)
              Next
              'Passa a quello successivo se il reisduo è <=0
              If dQuantResid <= 0 Then
                GoTo SkipRigaCarico2
              End If
              'Se la quantità occorrente è coperta da questa riga di carico...
              If dQuantNeces <= dQuantResid Then
                'Calcola la q.tà ouquant
                If dCoeffCons = 0 Then
                  dOuQuant = 0
                Else
                  dOuQuant = ArrDbl(dQuantNeces / dCoeffCons, 3)
                End If
                'Scrive sul temporaneo TTMOVCLA
                dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
                With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
                  !codditt = strDittaCorrente
                  !mc_outipo = strTipo
                  !mc_ouanno = nAnno
                  !mc_ouserie = strSerie
                  !mc_ounum = lNumdoc
                  !mc_intipo = dttM3.Rows(nRow3)!mc_intipo.ToString
                  !mc_inanno = NTSCInt(dttM3.Rows(nRow3)!mc_inanno)
                  !mc_inserie = dttM3.Rows(nRow3)!mc_inserie.ToString
                  !mc_innum = NTSCInt(dttM3.Rows(nRow3)!mc_innum)
                  !mc_inriga = NTSCInt(dttM3.Rows(nRow3)!mc_inriga)
                  !mc_ouriga = NTSCInt(dtrMain!ec_riga)
                  !mc_carscar = -1
                  !mc_incodart = dtrM2!mm_codart
                  !mc_inquant = dQuantNeces
                  !mc_incolli = 0
                  !mc_oucodart = dtrMain!ec_codart
                  !mc_ouquant = dOuQuant
                  !mc_oucolli = 0
                  !mc_coefcons = dCoeffCons
                  !mc_note = DBNull.Value
                End With
                'Esce da questo loop
                dttM3.Clear()
                GoTo SkipRigaCorrente
              Else
                'La quantità reisdua non copre quella occorrente
                'Calcola la q.tà ouquant
                If dCoeffCons = 0 Then
                  dOuQuant = 0
                Else
                  dOuQuant = ArrDbl(dQuantResid / dCoeffCons, 3)
                End If
                'Scrive per il residuo in TTMOVCLA
                dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
                With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
                  !codditt = strDittaCorrente
                  !mc_outipo = strTipo
                  !mc_ouanno = nAnno
                  !mc_ouserie = strSerie
                  !mc_ounum = lNumdoc
                  !mc_intipo = dttM3.Rows(nRow3)!mc_intipo.ToString
                  !mc_inanno = NTSCInt(dttM3.Rows(nRow3)!mc_inanno)
                  !mc_inserie = dttM3.Rows(nRow3)!mc_inserie.ToString
                  !mc_innum = NTSCInt(dttM3.Rows(nRow3)!mc_innum)
                  !mc_inriga = NTSCInt(dttM3.Rows(nRow3)!mc_inriga)
                  !mc_ouriga = NTSCInt(dtrMain!ec_riga)
                  !mc_carscar = -1
                  !mc_incodart = dtrM2!mm_codart
                  !mc_inquant = dQuantResid
                  !mc_incolli = 0
                  !mc_oucodart = dtrMain!ec_codart
                  !mc_ouquant = dOuQuant
                  !mc_oucolli = 0
                  !mc_coefcons = dCoeffCons
                  !mc_note = DBNull.Value
                End With
                'Decrementa la q.tà necessaria e continua a loppare
                dQuantNeces = ArrDbl(dQuantNeces - dQuantResid, 3)
              End If
SkipRigaCarico2:
              nRow3 += 1
            Loop    'Do While Not nRow3 = dttM3.Rows.Count And dQuantNeces <> 0
            dttM3.Clear()

            'Se esistono ancora delle quantità da ripartire segnala con un messaggio
            If dQuantNeces > 0.001 Then 'tolleranza
              If bRendiBloccantiAlertCLavoro Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128674099323277500, _
                                "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: " & _
                                "per l'articolo A FASE reso '|" & NTSCStr(dtrMain!ec_codart) & _
                                "|', riga documento |" & dtrMain!ec_riga.ToString & _
                                "|, non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato " & _
                                "dell'articolo '|" & NTSCStr(dtrM2!mm_codart) & "|'. Quantità mancante |" & _
                                dQuantNeces.ToString(oApp.FormatQta) & "|. Salvataggio del documento non consentito.")))
                Return False
              Else
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128674100195465000, _
                                "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: " & _
                                "per l'articolo A FASE reso '|" & NTSCStr(dtrMain!ec_codart) & _
                                "|', riga documento |" & dtrMain!ec_riga.ToString & _
                                "|, non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato " & _
                                "dell'articolo '|" & NTSCStr(dtrM2!mm_codart) & "|'. Quantità mancante |" & _
                                dQuantNeces.ToString(oApp.FormatQta) & "|. Procedere comunque al salvataggio del documento?"))
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
              End If
            End If
SkipRigaCorrente:
          Next    'For Each dtrM2 As DataRow In dttM2.Rows
          dttM2.Clear()
        Next    'For Each dtrM1 As DataRow In dttM1.Rows
        dttM1.Clear()

        '--------------------------
        'Se non ha trovato carichi di prod. sulla fase resa lo segnala
        If Not bTrovCar Then
          If bRendiBloccantiAlertCLavoro Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128674087436402500, _
                                "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: " & _
                                "per l'articolo A FASE reso '|" & NTSCStr(dtrMain!ec_codart) & _
                                "|', fase |" & dtrMain!ec_fase.ToString & "|, riga documento |" & dtrMain!ec_riga.ToString & _
                                "|, non sono stati trovati carichi di produzione. Quantità resa |" & _
                                NTSCDec(dtrMain!ec_quant).ToString(oApp.FormatQta) & "|, quantità caricata |" & _
                                0.ToString(oApp.FormatQta) & "|. Salvataggio del documento non consentito.")))
            Return False
          Else
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128674087451715000, _
                         "Determinazione dei riferimenti alle bolle di carico in conto lavoro attivo: " & _
                                "per l'articolo A FASE reso '|" & NTSCStr(dtrMain!ec_codart) & _
                                "|', fase |" & dtrMain!ec_fase.ToString & "|, riga documento |" & dtrMain!ec_riga.ToString & _
                                "|, non sono stati trovati carichi di produzione. Quantità resa |" & _
                                NTSCDec(dtrMain!ec_quant).ToString(oApp.FormatQta) & "|, quantità caricata |" & _
                                0.ToString(oApp.FormatQta) & "|. Procedere comunque al salvataggio del documento?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
        'Passa alla RIGA di bolla successiva
      Next    'For Each dtrMain As DataRow In dtrPrincipale

      '--------------------------------
      'Crea le righe in MOVCLA per i movimenti K = Carico materiali in c/lavoro attivo
      dtrT = dttEC.Select("ec_tipork = '" & strTipo & "' AND (xxo_flclavo = 'C' OR xxo_flclavo = 'X')  AND xxo_tipcaum = 'K'")
      For i = 0 To dtrT.Length - 1
        dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
        With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
          !codditt = strDittaCorrente
          !mc_outipo = strTipo
          !mc_ouanno = nAnno
          !mc_ouserie = strSerie
          !mc_ounum = lNumdoc
          !mc_intipo = strTipo
          !mc_inanno = nAnno
          !mc_inserie = strSerie
          !mc_innum = lNumdoc
          !mc_inriga = NTSCInt(dtrT(i)!ec_riga)
          !mc_ouriga = NTSCInt(dtrT(i)!ec_riga)
          !mc_carscar = 1
          !mc_incodart = NTSCStr(dtrT(i)!ec_codart)
          !mc_inquant = NTSCDec(dtrT(i)!ec_quant)
          !mc_incolli = NTSCDec(dtrT(i)!ec_colli)
          !mc_oucodart = NTSCStr(dtrT(i)!ec_codart)
          !mc_ouquant = NTSCDec(dtrT(i)!ec_quant)
          !mc_oucolli = NTSCDec(dtrT(i)!ec_colli)
          !mc_coefcons = 1
          !mc_note = DBNull.Value
        End With
      Next    'For i = 0 To dtrT.Length - 1

      '--------------------------------
      'Crea le righe in MOVCLA per i movimenti F = Reso lavorato (non lavorato) senza distinta
      dtrT = dttEC.Select("ec_tipork = '" & strTipo & "' AND (xxo_flclavo = 'C' OR xxo_flclavo = 'X') AND xxo_tipcaum = 'F' AND ec_clnum <> 0")
      For i = 0 To dtrT.Length - 1
        dttMOVCLA.Rows.Add(dttMOVCLA.NewRow)
        With dttMOVCLA.Rows(dttMOVCLA.Rows.Count - 1)
          !codditt = strDittaCorrente
          !mc_outipo = strTipo
          !mc_ouanno = nAnno
          !mc_ouserie = strSerie
          !mc_ounum = lNumdoc
          !mc_intipo = NTSCStr(dtrT(i)!ec_cltipo)
          !mc_inanno = NTSCInt(dtrT(i)!ec_clanno)
          !mc_inserie = NTSCStr(dtrT(i)!ec_clserie)
          !mc_innum = NTSCInt(dtrT(i)!ec_clnum)
          !mc_inriga = NTSCInt(dtrT(i)!ec_clriga)
          !mc_ouriga = NTSCInt(dtrT(i)!ec_riga)
          !mc_carscar = -1
          !mc_incodart = NTSCStr(dtrT(i)!ec_codart)
          !mc_inquant = NTSCDec(dtrT(i)!ec_quant)
          !mc_incolli = NTSCDec(dtrT(i)!ec_colli)
          !mc_oucodart = NTSCStr(dtrT(i)!ec_codart)
          !mc_ouquant = NTSCDec(dtrT(i)!ec_quant)
          !mc_oucolli = NTSCDec(dtrT(i)!ec_colli)
          !mc_coefcons = 1
          !mc_note = DBNull.Value
        End With
      Next    'For i = 0 To dtrT.Length - 1

      dttMOVCLA.AcceptChanges()
      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
      dttGr1.Clear()
      dttM1.Clear()
      dttM2.Clear()
      dttM3.Clear()
    End Try
  End Function

  Public Overridable Function DocStornaImportExport(ByVal strDitta As String, ByVal strTipoRk As String, _
                                                    ByVal nAnno As Integer, ByVal strSerie As String, _
                                                    ByVal lNumdoc As Integer, ByVal bMsg As Boolean) As Boolean
    'utlizzato dall'import/export per cancellare keymag, artpro, artproc, lotcpro, priana2, pria2comp
    'correggere movord come se si stesse cancellando il documento
    Dim strMsg, strInizioEsercizio As String
    Dim strDestipork As String = ""
    Dim bPM, bModTCO, bGestPVR, bDocEmesso As Boolean
    Dim dttTmp As New DataTable
    Try
      '-----------------------------------------------------------------------------------------
      '--- Se non riesce ad aprire il file di LOG esce dall'elaborazione
      '-----------------------------------------------------------------------------------------
      If Not LogStart("DocStorna") Then Return False
      '-----------------------------------------------------------------------------------------
      '--- LOG di descrizione parametri
      '-----------------------------------------------------------------------------------------
      LogWrite("--> " & Now.ToShortDateString & " " & Now.ToShortTimeString & oApp.Tr(Me, 129381073609807094, " chiamata metodo DocStorna: operazione di storno documenti di magazzino"), False)
      Dim strTmp1 As String = oApp.Tr(Me, 129381074197226550, "vero")
      Dim strTmp2 As String = oApp.Tr(Me, 129381074262221558, "falso")
      Dim strIIf1 As String = NTSCStr(IIf(bMsg = True, strTmp1, strTmp2))
      strMsg = oApp.Tr(Me, 129381073739630900, "Lo storno è stato lanciato con i seguenti parametri:" & vbCrLf & _
               "     . Tipo record: '|" & strTipoRk & "|'" & vbCrLf & _
               "     . anno: |" & CStr(nAnno) & vbCrLf & _
               "|     . serie: '|" & strSerie & "|'" & vbCrLf & _
               "     . numero: |" & CStr(lNumdoc) & vbCrLf & _
               "|     . flag messaggi: |" & strIIf1 & "|")
      LogWrite(strMsg, False)
      '-----------------------------------------------------------------------------------------
      '--- Scrive nel file di LOG gli estremi del documento da ricalcolare
      '-----------------------------------------------------------------------------------------
      Select Case strTipoRk
        Case "A" : strDestipork = oApp.Tr(Me, 129381074501578174, "Fattura immediata emessa")
        Case "B" : strDestipork = oApp.Tr(Me, 129381074913734018, "D.D.T. emesso")
        Case "C" : strDestipork = oApp.Tr(Me, 129381074923420774, "Corrispettivo emesso")
        Case "D" : strDestipork = oApp.Tr(Me, 129381074932638816, "Fattura differita emessa")
        Case "E" : strDestipork = oApp.Tr(Me, 129381074939513288, "Note di addebito emessa")
        Case "F" : strDestipork = oApp.Tr(Me, 129381074949356282, "Ricevuta fiscale emessa")
        Case "I" : strDestipork = oApp.Tr(Me, 129381074969042270, "Riemissione ricevuta fiscale")
        Case "J" : strDestipork = oApp.Tr(Me, 129381074959199276, "Nota di accredito ricevuta")
        Case "K" : strDestipork = oApp.Tr(Me, 129381074977635360, "Fattura differita ricevuta")
        Case "L" : strDestipork = oApp.Tr(Me, 129381074984353594, "Fattura immediata ricevuta")
        Case "M" : strDestipork = oApp.Tr(Me, 129381074992477970, "D.D.T. ricevuto")
        Case "N" : strDestipork = oApp.Tr(Me, 129381075000289870, "Nota di accredito emessa")
        Case "P" : strDestipork = oApp.Tr(Me, 129381075009195436, "Fattura/ricevuta fiscale differita")
        Case "S" : strDestipork = oApp.Tr(Me, 129381075016069908, "Fattura/ricevuta fiscale emessa")
        Case "T" : strDestipork = oApp.Tr(Me, 129381075022944380, "Carico da produzione")
        Case "U" : strDestipork = oApp.Tr(Me, 129381075029662614, "Scarico a produzione")
        Case "W" : strDestipork = oApp.Tr(Me, 129381075037630752, "Nota di prelievo")
        Case "Z" : strDestipork = oApp.Tr(Me, 129381075044973938, "Bolla di movimentazione interna")
      End Select
      '-----------------------------------------------------------------------------------------
      strMsg = ""

      '-----------------------------------------------------------------------------------------
      '--- Se il documento è di tipo 'Carico da produzione' (strTipork = 'T')
      '--- lo scrive nel file di LOG (ed eventualmente dà il messaggio) e salta l'elaborazione
      '-----------------------------------------------------------------------------------------
      If strTipoRk = "T" Then
        strMsg = oApp.Tr(Me, 129381076029907490, "Il documento è di tipo '|" & strDestipork & "|' quindi non stornabile." & vbCrLf & _
                                                 "    Elaborazione non effettuata.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Se il documento è di tipo 'Scarico a produzione' (strTipork = 'U')
      '--- lo scrive nel file di LOG (ed eventualmente dà il messaggio) e salta l'elaborazione
      '-----------------------------------------------------------------------------------------
      If strTipoRk = "U" Then
        strMsg = oApp.Tr(Me, 129381077144679890, "Il documento è di tipo '|" & strDestipork & "|' quindi non stornabile." & vbCrLf & _
                 "    Elaborazione non effettuata.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      'If bPrimaVolta Then
      '-----------------------------------------------------------------------------------------
      '--- Modulo Project Management
      '-----------------------------------------------------------------------------------------
      If CBool(ModuliDittaDitt(strDittaCorrente) And bsModPM) Then
        bPM = True
      Else
        bPM = False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Modulo TCO
      '-----------------------------------------------------------------------------------------
      If CBool(ModuliExtDittaDitt(strDittaCorrente) And bsModExtTCO) Then
        bModTCO = True
      Else
        bModTCO = False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Modulo RSM
      '-----------------------------------------------------------------------------------------
      If CBool(ModuliDittaDitt(strDittaCorrente) And bsModSM) Then
        bModRSM = True
      Else
        bModRSM = False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Legge le impostazioni di registro utilizzate da BSVEBOLL
      '-----------------------------------------------------------------------------------------
      bGestPVR = CBool(oCldBoll.GetSettingBus("OPZIONI", ".", ".", "GestPVR", "0", " ", "0"))
      '-----------------------------------------------------------------------------------------
      '--- Calcola la data di inizio esercizio da passare alla StoredProcedure
      '--- per l'eventuale aggiornamento di KEYMAG, MOVORD, ARTPRO (in SQLServer)
      '-----------------------------------------------------------------------------------------
      If Not oCldBoll.DataInizioEsercizio(strDitta, dttTmp) Then Return False

      strInizioEsercizio = NTSCDate(dttTmp.Rows(0)!tb_dtineser).AddDays(-1).ToShortDateString
      'bPrimaVolta = False
      'End If
      '-----------------------------------------------------------------------------------------
      '--- Se esiste almeno una riga in MOVMAG mm_pmtaskid diversa da zero avvisa ed esce
      '--- (se esiste il modulo del Project Management)
      '-----------------------------------------------------------------------------------------
      If bPM Then
        oCldBoll.CheckPM(strDittaCorrente, strTipoRk, nAnno, strSerie, lNumdoc, dttTmp)

        If NTSCInt(dttTmp.Rows(0)!Records) <> 0 Then
          strMsg = oApp.Tr(Me, 129381089331714163, "Questo documento di tipo '|" & strDestipork & "|'" & vbCrLf & _
                                                   "    movimenta attività del Project Management" & vbCrLf & _
                                                   "    pertanto non è possibile effettuare lo storno.")
          LogWrite(strMsg, True)
          If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
          Return False
        End If
      End If
      '-----------------------------------------------------------------------------------------
      '--- Determina dal tipo se è un documento emesso o ricevuto
      '-----------------------------------------------------------------------------------------
      Select Case strTipoRk
        Case "A", "B", "C", "D", "E", "F", "I", "N", "S", "W", "Z" : bDocEmesso = True
        Case Else : bDocEmesso = False
      End Select
      If bGestPVR = True Then
        strMsg = oApp.Tr(Me, 129381092887850363, "E' stata indicata l'opzione globale di registro 'GestPVR'." & vbCrLf & _
                         "    Non è possibile effettuare il ricalcolo del documento di tipo '|" & strDestipork & "|'" & vbCrLf & _
                         "    anno: |" & nAnno & "|, numero: |" & NTSCStr(IIf(strSerie <> " ", strSerie & "/", "")) & lNumdoc & "|.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If

      '-----------------------------------------------------------------------------------------
      '--- Apre uno Snapshot su TESTMAG/TESTPRB
      '--- (controlla anche che esista...)
      '-----------------------------------------------------------------------------------------
      If Not ApriDoc(strDittaCorrente, False, strTipoRk, nAnno, strSerie, lNumdoc, dsShared) Then Return False

      If dttET.Rows.Count = 0 Then
        strMsg = oApp.Tr(Me, 129381100492607003, "Documento di tipo '|" & strDestipork & "|'" & vbCrLf & _
                 "    anno: |" & nAnno & "|, numero: |" & NTSCStr(IIf(strSerie <> " ", strSerie & "/", "")) & lNumdoc & "| inesistente." & vbCrLf & _
                 "    Elaborazione non effettuata.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If

      'Set dynCl = snaMovmag.Clone
      If dttEC.Rows.Count = 0 Then
        '---------------------------------------------------------------------------------------
        '--- Se MOVMAG è vuoto dà messaggio ed esce (non dovrebbe mai accadere...)
        '---------------------------------------------------------------------------------------
        strMsg = oApp.Tr(Me, 129381105354482668, "Questo documento di tipo '|" & strDestipork & "|'" & vbCrLf & _
                                                 "    non possiede righe nel corpo." & vbCrLf & _
                                                 "    Elaborazione non effettuata.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Se il tipo documento da rielaborare è di tipo.
      '--- "Nota di accredito ricevuta" (J) o
      '--- "Fattura immediata ricevuta" (L)
      '--- e il campo "Sblocca castelletti" è settato (tm_flscdb = "S")
      '--- allora non effettua l'elaborazione
      '-----------------------------------------------------------------------------------------
      If (strTipoRk = "L" Or strTipoRk = "J") And NTSCStr(dttET.Rows(0)!et_flscdb) = "S" Then
        strMsg = "Questo documento ricevuto di tipo '|" & strDestipork & "'" & vbCrLf & _
          "    anno: " & CStr(nAnno) & ", numero: " & NTSCStr(IIf(strSerie <> " ", strSerie & "/", "")) & CStr(lNumdoc) & vbCrLf & _
          "    possiede il flag 'Sblocca castelletti' abilitato." & vbCrLf & _
          "    Elaborazione non effettuata."
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      '-----------------------------------------------------------------------------------------
      '--- Controllo correttezza tipobf
      '-----------------------------------------------------------------------------------------
      If Not (NTSCInt(dttET.Rows(0)!et_tipobf) >= 1 And NTSCInt(dttET.Rows(0)!et_tipobf) <= 9999) Then
        strMsg = oApp.Tr(Me, 129381102489886838, "Il documento di tipo '|" & strDestipork & "|'" & vbCrLf & _
                 "    anno: |" & nAnno & "|, numero: |" & NTSCStr(IIf(strSerie <> " ", strSerie & "/", "")) & lNumdoc & vbCrLf & _
                 "|    possiede un tipo bolla/fattura non valido." & vbCrLf & _
                 "    Elaborazione non effettuata.")
        LogWrite(strMsg, True)
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If

      '-----------------------------------------------------------------------------------------
      '--- Inizia l'elaborazione
      '-----------------------------------------------------------------------------------------
      If Not oCldBoll.DocStornaImportExport(strDittaCorrente, bModTCO, strInizioEsercizio, strTipoRk, nAnno, strSerie, lNumdoc, strMsg) Then
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        LogWrite(strMsg, False)
        Return False
      Else
        strMsg = "Storno documento di tipo '" & strDestipork & "'" & vbCrLf & _
                 "    anno: " & CStr(nAnno) & ", numero: " & NTSCStr(IIf(strSerie <> " ", strSerie & "/", "")) & CStr(lNumdoc) & vbCrLf & _
                 "    effettuato regolarmente."
        If bMsg Then ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        LogWrite(strMsg, False)
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      '-----------------------------------------------------------------------------------------
      '--- Se si sono verificati degli errori chiede se visualizzare il file di LOG
      '-----------------------------------------------------------------------------------------
      LogStop()
      If nCountLog > 0 Then
        '-----------------------------------------------------------------------------------------
        '--- Chiude il file di LOG
        '-----------------------------------------------------------------------------------------
        If bMsg Then
          strMsg = oApp.Tr(Me, 129381095913691033, "Esistono dei messaggi nel file di log dello storno documenti." & vbCrLf & _
                                                   "Visualizzare il file?")

          Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, strMsg)
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = ThMsg.RETVALUE_YES Then
            Shell("notepad.exe """ & Me.GetType.Name & "_" & oApp.User.Nome & ".log""", vbNormalFocus)
          End If
        End If
      End If
    End Try
  End Function
#End Region

  Public Overridable Function ControllaCastelletti(ByVal dTotImpIVA As Decimal, ByVal dTotImpCont As Decimal, ByVal dTotImpIVAval As Decimal, ByVal dTotImpContval As Decimal) As Boolean
    Dim evnt As NTSEventArgs = Nothing
    Dim dDiff As Decimal = 0
    Dim dMerce As Decimal = 0
    Dim i As Integer = 0

    Dim dSpeinc As Decimal = 0
    Dim dSpeacc As Decimal = 0
    Dim dSpeimb As Decimal = 0

    Dim dSpeincv As Decimal = 0
    Dim dSpeaccv As Decimal = 0
    Dim dSpeimbv As Decimal = 0

    Try
      ' tot impon. iva con totale controp + spese
      With dttET.Rows(0)
        dSpeinc = NTSCDec(!et_speinc)
        dSpeacc = NTSCDec(!et_speacc)
        dSpeimb = NTSCDec(!et_speimb)

        If NTSCStr(!et_scorpo) = "S" AndAlso oApp.oGvar.bSpesePiedeIvateDocScorporo Then
          'Calcola l'imponibile delle spese di piede, se devo scorporare in base alle opzioni di registro
          Dim dIva As Decimal = 0
          Dim nCodIva15 As Integer = 0
          Dim nCodiva As Integer = 0
          Dim nCodivaInc As Integer = 0
          If bDocEmesso Then
            nCodIva15 = nPeveIva15
            nCodiva = nPeveIvaInc
            If NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeveIvaInc3Fine) Then
              nCodiva = nPeveIvaInc3
            ElseIf NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeveIvaInc2Fine) Then
              nCodiva = nPeveIvaInc2
            Else
              nCodiva = nPeveIvaInc
            End If
          Else
            nCodIva15 = nPeacIva15
            nCodiva = nPeacIvainc
            If NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeacIvaInc3Fine) Then
              nCodiva = nPeacIvaInc3
            ElseIf NTSCDate(dttET.Rows(0)!et_datdoc) < NTSCDate(strPeacIvaInc2Fine) Then
              nCodiva = nPeacIvaInc2
            Else
              nCodiva = nPeacIvainc
            End If
          End If
          nCodivaInc = nCodiva
          If oApp.oGvar.bIvaSpeseIncassoDaImponibMaggiore Then
            'copiata da BELBMENU.DeterminaIvaSpeseIncasso
            Dim oDttgr As New CLEGROUPBY
            Dim dttGr As New DataTable
            If oDttgr.NTSGroupBy(dttEC, dttGr, "ec_codiva AS CODIVA, SUM(ec_valore) AS IMPONIBILE", "", "ec_codiva") Then
              For Each dtrIva As DataRow In dttGr.Select("", "IMPONIBILE DESC")
                'Se il codice iva non ha una aliquota associata (esempio esenzione) lo ignora e passa al successivo
                If oCldBoll.AliquotaIva(NTSCInt(dtrIva!CODIVA)) = 0 Then Continue For

                nCodivaInc = NTSCInt(dtrIva!CODIVA)
                Exit For
              Next
            End If
          End If
          oCldBoll.Scorporo(dSpeacc, nCodiva, dSpeacc, dIva)
          oCldBoll.Scorporo(dSpeimb, nCodiva, dSpeimb, dIva)
          oCldBoll.Scorporo(dSpeinc, nCodivaInc, dSpeinc, dIva)
        End If

        dSpeincv = NTSCDec(!et_speincv)
        dSpeaccv = NTSCDec(!et_speaccv)
        dSpeimbv = NTSCDec(!et_speimbv)

        If ArrDbl(dTotImpIVA, oCldBoll.TrovaNdec(0)) <> ArrDbl((dTotImpCont + dSpeinc + dSpeacc + NTSCDec(!et_bolli) + dSpeimb), oCldBoll.TrovaNdec(0)) Then
          dDiff = ArrDbl(ArrDbl(dTotImpIVA, oCldBoll.TrovaNdec(0)) - ArrDbl((dTotImpCont + dSpeinc + dSpeacc + NTSCDec(!et_bolli) + dSpeimb), oCldBoll.TrovaNdec(0)), oCldBoll.TrovaNdec(0))

          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128666546457343750, _
                              "La somma degli imponibili IVA (|" & dTotImpIVA.ToString(oApp.FormatImporti) & _
                              "|) è diversa dalla somma tra gli importi delle contropartite (|" & dTotImpCont.ToString(oApp.FormatImporti) & _
                              "|) + spese trasporti (|" & dSpeacc.ToString(oApp.FormatImporti) & _
                              "|) + spese incasso (|" & dSpeinc.ToString(oApp.FormatImporti) & _
                              "|) + spese bolli (|" & NTSCDec(!et_bolli).ToString(oApp.FormatImporti) & _
                              "|) + spese imballi (|" & dSpeimb.ToString(oApp.FormatImporti) & _
                              "|)." & vbCrLf & vbCrLf & "La differenza è di |" & dDiff.ToString(oApp.FormatImporti) & _
                              "|." & vbCrLf & vbCrLf & "Procedere ugualmente?"))
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
        End If

        If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
          If ArrDbl(dTotImpIVAval, oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta))) <> ArrDbl((dTotImpContval + dSpeincv + dSpeaccv + NTSCDec(!et_bolliv) + dSpeimbv), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta))) Then
            dDiff = ArrDbl(dTotImpIVAval, oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta))) - ArrDbl((dTotImpContval + dSpeincv + dSpeaccv + NTSCDec(!et_bolliv) + dSpeimbv), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta)))

            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128666549587968750, _
                    "La somma degli imponibili IVA (|" & dTotImpIVAval.ToString(oApp.FormatImpVal) & _
                    "|) è diversa dalla somma tra gli importi delle contropartite (|" & dTotImpContval.ToString(oApp.FormatImpVal) & _
                    "|) + spese trasporti (|" & dSpeaccv.ToString(oApp.FormatImpVal) & _
                    "|) + spese incasso (|" & dSpeincv.ToString(oApp.FormatImpVal) & _
                    "|) + spese bolli (|" & NTSCDec(!et_bolliv).ToString(oApp.FormatImpVal) & _
                    "|) + spese imballi (|" & dSpeimbv.ToString(oApp.FormatImpVal) & _
                    "|)." & vbCrLf & vbCrLf & "La differenza è di |" & dDiff.ToString(oApp.FormatImpVal) & _
                    "|." & vbCrLf & vbCrLf & "Procedere ugualmente?"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      End With


      'Controllo righe
      If dttET.Rows(0)!et_tipork.ToString <> "T" Then
        'Questo controllo non è da fare per i carichi di produzione
        'If NTSCdec(edScopag.Text) = 0 Then ' non lo faccio se sconto pag. <> 0 perchè ....
        dMerce = 0
        For i = 0 To dttEC.Rows.Count - 1
          dMerce = dMerce + NTSCDec(dttEC.Rows(i)!ec_valore)
        Next

        If ArrDbl(dMerce, oCldBoll.TrovaNdec(0)) <> ArrDbl(dTotImpCont, oCldBoll.TrovaNdec(0)) Then
          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128666550970468750, _
                    "La somma del valore delle righe (|" & dMerce.ToString(oApp.FormatImporti) & _
                    "|) è diverso dalla somma degli importi delle contropartite (|" & dTotImpCont.ToString(oApp.FormatImporti) & _
                    "|)." & vbCrLf & vbCrLf & "Procedere ugualmente?"))
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False

        End If
        'End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function SpeseIncSoloSuPrimaFatt() As Boolean
    'Solo per le fatture immediate
    'se è abilitata l'opzione di registro relaktiva
    'esistono altre fatture immediate nello stesso mese per lo stesso conto
    'è selezionato il flag relativo a 'Addebita spese di incasso'
    Dim dttTmp As New DataTable
    Dim strDatini As String = ""
    Dim strDatfin As String = ""
    Try
      If dttET.Rows(0)!et_flspinc.ToString = "S" And bSpeseIncSoloSuPrimaFatt = True And dttET.Rows(0)!et_tipork.ToString = "A" And bNew Then
        '-------------------------------
        'Se il tipo pagamento NON è RB o Tratta, esce
        oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_codpaga).ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
        If dttTmp.Rows.Count = 0 Then Return False
        If NTSCInt(dttTmp.Rows(0)!tb_tippaga) <> 1 And NTSCInt(dttTmp.Rows(0)!tb_tippaga) <> 2 Then Return False
        dttTmp.Clear()

        '-------------------------------
        'Determina l'inizio e la fine del mese dalla data del documento
        strDatini = IntSetDate("01/" & NTSCDate(dttET.Rows(0)!et_datdoc).ToString("MM/yy"))
        strDatfin = FineMese(NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)

        '-------------------------------
        'Cerca altri documenti per il mese corrente
        If oCldBoll.CheckAltriDocNelMese_SpeseIncSoloSuPrimaFatt(strDittaCorrente, lContoCF, strDatini, strDatfin) Then Return True
      End If

      Return False

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function CheckTimeStamp(ByVal strState As String) As Boolean
    Dim dttTmp As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim strTipodoc As String = ""
    Try
      If Not bNew Then
        'se è un documento aperto controllo se è stato modificato
        If NTSCDate(dttET.Rows(0)!et_ultagg) <> oCldBoll.GetTimeStampTestmag(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), _
                                                                NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), _
                                                                NTSCInt(dttET.Rows(0)!et_numdoc)) Then
          If strState = "D" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523808025230000, "Il documento che si cerca di eliminare è stato modificato da un altro utente o sessione. E' possibile solo ripristinare.")))
          Else
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523810613114000, "Il documento che si cerca di salvare è stato modificato da un altro utente o sessione. E' possibile solo ripristinare.")))
          End If
          Return False
        End If

        If NTSCStr(dttET.Rows(0)!et_tipork) = "T" Then
          If dtTimeStampDocU <> oCldBoll.GetTimeStampTestmag(strDittaCorrente, "U", _
                                           NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), _
                                           NTSCInt(dttET.Rows(0)!et_numdoc)) Then
            If strState = "D" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523811414174000, "Il documento (SCARICO A PRODUZIONE) che si cerca di eliminare è stato modificato da un altro utente o sessione. E' possibile solo ripristinare.")))
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128523811401070000, "Il documento (SCARICO A PRODUZIONE) che si cerca di salvare è stato modificato da un altro utente o sessione. E' possibile solo ripristinare.")))
            End If
            Return False
          End If
        End If
      End If
      '------------------------------------
      'Controlla che le righe originarie di ordini/note non siano
      'nel frattempo state modificate!
      'non eseguo il controllo sulle fatture proforma aperte: questo perchè il controllo viene fatto tra mo_ultagg e mm_orultagg:
      'se la fattura proforma è stata già evasa con una fattura defintiva, mo_ultagg sarà uguale a mm_orultagg della definitiva, non della proforma
      'If Not (fOpen And ckProforma.Value = vbChecked) Then
      'No, viene eseguito sempre il controllo
      If dttEC.Select("ec_ornum > 0").Length > 0 Then
        If Not oCldBoll.GetTimeStampTestmagOrdin(strDittaCorrente, dttEC, dttTmp) = False Then
          If dttTmp.Rows.Count > 0 Then
            dtrT = dttEC.Select("ec_ortipo = " & CStrSQL(dttTmp.Rows(0)!mo_tipork.ToString) & _
                                " AND ec_oranno = " & dttTmp.Rows(0)!mo_anno.ToString & _
                                " AND ec_orserie = " & CStrSQL(dttTmp.Rows(0)!mo_serie.ToString) & _
                                " AND ec_ornum = " & dttTmp.Rows(0)!mo_numord.ToString & _
                                " AND ec_orriga = " & dttTmp.Rows(0)!mo_riga.ToString)
            If bNew = True Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668279728125000, _
                "La riga |" & dtrT(0)!ec_orriga.ToString & "| dell'|" & DescrTiporkOr(dtrT(0)!ec_ortipo.ToString) & _
                "| n° |" & IIf(dtrT(0)!ec_orserie.ToString = " ", dtrT(0)!ec_ornum.ToString, dtrT(0)!ec_ornum.ToString & "/" & dtrT(0)!ec_orserie.ToString).ToString & "|" & vbCrLf & _
                "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                "Eliminarla e riselezionarla.")))
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129670513651826689, _
                "La riga |" & dtrT(0)!ec_orriga.ToString & "| dell'|" & DescrTiporkOr(dtrT(0)!ec_ortipo.ToString) & _
                "| n° |" & IIf(dtrT(0)!ec_orserie.ToString = " ", dtrT(0)!ec_ornum.ToString, dtrT(0)!ec_ornum.ToString & "/" & dtrT(0)!ec_orserie.ToString).ToString & "|" & vbCrLf & _
                "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                "Eliminarla e riselezionarla oppure riaprire il documento.")))
            End If
            Return False
          End If
          End If
        End If    'If dttEC.Select("ec_ornum > 0").Length > 0 Then

        '---------------
        'stessa cosa per gli scarichi a produzione
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          If dttECIMP.Select("ec_ornum > 0").Length > 0 Then
            If Not oCldBoll.GetTimeStampTestmagOrdin(strDittaCorrente, dttECIMP, dttTmp) = False Then
              If dttTmp.Rows.Count > 0 Then
              dtrT = dttECIMP.Select("ec_ortipo = " & CStrSQL(dttTmp.Rows(0)!mo_tipork.ToString) & _
                                  " AND ec_oranno = " & dttTmp.Rows(0)!mo_anno.ToString & _
                                  " AND ec_orserie = " & CStrSQL(dttTmp.Rows(0)!mo_serie.ToString) & _
                                  " AND ec_ornum = " & dttTmp.Rows(0)!mo_numord.ToString & _
                                  " AND ec_orriga = " & dttTmp.Rows(0)!mo_riga.ToString)
              If bNew = False Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668311053437500, _
                  "La riga |" & dtrT(0)!ec_orriga.ToString & "| dell'|" & DescrTiporkOr(dtrT(0)!ec_ortipo.ToString) & _
                  "| n° |" & IIf(dtrT(0)!ec_orserie.ToString = " ", dtrT(0)!ec_ornum.ToString, dtrT(0)!ec_ornum.ToString & "/" & dtrT(0)!ec_orserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| degli Scarichi a produzione" & vbCrLf & _
                  "collegata alla riga n° |" & dtrT(0)!ec_prriga.ToString & "| del Carico a produzione)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla.")))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129670531366466489, _
                  "La riga |" & dtrT(0)!ec_orriga.ToString & "| dell'|" & DescrTiporkOr(dtrT(0)!ec_ortipo.ToString) & _
                  "| n° |" & IIf(dtrT(0)!ec_orserie.ToString = " ", dtrT(0)!ec_ornum.ToString, dtrT(0)!ec_ornum.ToString & "/" & dtrT(0)!ec_orserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| degli Scarichi a produzione" & vbCrLf & _
                  "collegata alla riga n° |" & dtrT(0)!ec_prriga.ToString & "| del Carico a produzione)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla oppure riaprire il documento.")))
              End If
              Return False
            End If
            End If
          End If
        End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then

        '---------------
        'stessa cosa per le note di prelievo
        If dttEC.Select("ec_npnum > 0").Length > 0 Then
          If Not oCldBoll.GetTimeStampTestmagNotePrel(strDittaCorrente, dttEC, dttTmp) = False Then
            If dttTmp.Rows.Count > 0 Then
              dtrT = dttEC.Select("ec_nptipo = " & CStrSQL(dttTmp.Rows(0)!mm_tipork.ToString) & _
                                  " AND ec_npanno = " & dttTmp.Rows(0)!mm_anno.ToString & _
                                  " AND ec_npserie = " & CStrSQL(dttTmp.Rows(0)!mm_serie.ToString) & _
                                  " AND ec_npnum = " & dttTmp.Rows(0)!mm_numdoc.ToString & _
                                  " AND ec_npriga = " & dttTmp.Rows(0)!mm_riga.ToString)
              If bNew = False Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668311027031250, _
                  "La riga |" & dtrT(0)!ec_npriga.ToString & "| della Nota di prelievo" & _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla.")))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129670518290194490, _
                  "La riga |" & dtrT(0)!ec_npriga.ToString & "| della Nota di prelievo" & _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla oppure riaprire il documento.")))
              End If
              Return False
            End If
          End If
        End If    'If dttEC.Select("ec_npnum > 0").Length > 0 Then

        '---------------
        'stessa cosa per gli scarichi a produzione - note di prelievo
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          If dttECIMP.Select("ec_npnum > 0").Length > 0 Then
            If Not oCldBoll.GetTimeStampTestmagNotePrel(strDittaCorrente, dttECIMP, dttTmp) = False Then
              If dttTmp.Rows.Count > 0 Then
                dtrT = dttECIMP.Select("ec_nptipo = " & CStrSQL(dttTmp.Rows(0)!mm_tipork.ToString) & _
                                    " AND ec_npanno = " & dttTmp.Rows(0)!mm_anno.ToString & _
                                    " AND ec_npserie = " & CStrSQL(dttTmp.Rows(0)!mm_serie.ToString) & _
                                    " AND ec_npnum = " & dttTmp.Rows(0)!mm_numdoc.ToString & _
                                    " AND ec_npriga = " & dttTmp.Rows(0)!mm_riga.ToString)
              If bNew = False Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128668321151562500, _
                  "La riga |" & dtrT(0)!ec_npriga.ToString & "| della Nota di prelievo" & _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| degli Scarichi a produzione" & vbCrLf & _
                  "collegata alla riga n° |" & dtrT(0)!ec_prriga.ToString & "| del Carico a produzione)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla.")))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129670532535251603, _
                  "La riga |" & dtrT(0)!ec_npriga.ToString & "| della Nota di prelievo" & _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| degli Scarichi a produzione" & vbCrLf & _
                  "collegata alla riga n° |" & dtrT(0)!ec_prriga.ToString & "| del Carico a produzione)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla oppure riaprire il documento.")))
              End If
              Return False
            End If
            End If
          End If
        End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then

        '---------------
        'stessa cosa le riemissioni di ricevute fiscali che evadono ricevute fiscali
        'Controlla che le righe originarie di Ricevute fiscalie non siano
        'nel frattempo state modificate!
        If dttET.Rows(0)!et_tipork.ToString = "I" Then
          If dttEC.Select("ec_prnum > 0").Length > 0 Then
            If Not oCldBoll.GetTimeStampTestmagRicFisc(strDittaCorrente, dttEC, dttTmp) = False Then
              If dttTmp.Rows.Count > 0 Then
                dtrT = dttEC.Select("ec_prtipo = " & CStrSQL(dttTmp.Rows(0)!tm_tipork.ToString) & _
                                    " AND ec_pranno = " & dttTmp.Rows(0)!tm_anno.ToString & _
                                    " AND ec_prserie = " & CStrSQL(dttTmp.Rows(0)!tm_serie.ToString) & _
                                    " AND ec_prnum = " & dttTmp.Rows(0)!tm_numdoc.ToString)
                Select Case dtrT(0)!ec_prtipo.ToString
                  Case "F" : strTipodoc = oApp.Tr(Me, 128668321839062500, "La RICEVUTA FISCALE")
                  Case "S" : strTipodoc = oApp.Tr(Me, 128668321923593750, "La FATT. RICEVUTA FISCALE")
              End Select
              If bNew = False Then
                ThrowRemoteEvent(New NTSEventArgs("", strTipodoc & oApp.Tr(Me, 128668321125937500, _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla.")))
              Else
                ThrowRemoteEvent(New NTSEventArgs("", strTipodoc & oApp.Tr(Me, 129670533282096687, _
                  " n° |" & IIf(dtrT(0)!ec_npserie.ToString = " ", dtrT(0)!ec_npnum.ToString, dtrT(0)!ec_npnum.ToString & "/" & dtrT(0)!ec_npserie.ToString).ToString & "|" & vbCrLf & _
                  "(nella riga n° |" & dtrT(0)!ec_riga.ToString & "| del corpo)" & vbCrLf & _
                  "è stata modificata da un'altra sessione o utente." & vbCrLf & _
                  "Eliminarla e riselezionarla oppure riaprire il documento.")))
              End If
              Return False
            End If
            End If
          End If
        End If    'If dttET.Rows(0)!et_tipork.ToString = "I" Then

        Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function CheckCancelDocRiga(ByVal strTipo As String, ByVal nAnno As Integer, _
                                                ByVal strSerie As String, ByVal lNumdoc As Integer, _
                                                Optional ByVal lRiga As Integer = 0) As Boolean
    'CONTROLLA SE IL DOCUMENTO (o la RIGA) E' CANCELLABILE PER IL C/LAVORO
    Dim dttMcla As New DataTable
    Dim dttTmp As New DataTable
    Dim dttTmpT As New DataTable
    Dim evnt As NTSEventArgs = Nothing
    Dim strMsg As String = ""
    Try
      If Not oCldBoll.CheckCancelDocRiga_Ctolavoro(strDittaCorrente, strTipo, nAnno, strSerie, lNumdoc, lRiga, dttMcla, dttTmp, dttTmpT) Then Return False

      '------------------------------
      'Controlla che non sia già usato su qualche documento di scarico (in MOVCLA)
      If dttMcla.Rows.Count > 0 Then
        strMsg = oApp.Tr(Me, 128661150023593750, "Attenzione!" & vbCrLf & vbCrLf & "Questo documento/riga di carico in conto/lavoro ATTIVO è già utilizzato in altri documenti di scarico (primo documento rilevato da MOVCLA: tipo |" & dttMcla.Rows(0)!mc_outipo.ToString & "|, anno |" & dttMcla.Rows(0)!mc_ouanno.ToString & "|, serie '|" & dttMcla.Rows(0)!mc_ouserie.ToString & "|', numero |" & dttMcla.Rows(0)!mc_ounum.ToString & "|, riga |" & dttMcla.Rows(0)!mc_ouriga.ToString & "|).")
        If bRendiBloccantiAlertCLavoro Then
          strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128734888552827839, "Impossibile procedere alla cancellazione.")
          ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Else
          strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128661151011718750, "Procedere ugualmente alla cancellazione?")
          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg)
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
        End If
      End If    'If dttMcla.Rows.Count > 0 Then


      '------------------------------
      'Controlla che non sia già usato su qualche documento di scarico (campo mm_cl*)
      If dttTmp.Rows.Count > 0 Then
        strMsg = oApp.Tr(Me, 128661151991250000, "Attenzione!" & vbCrLf & vbCrLf & "Questo documento/riga di carico in conto/lavoro è già utilizzato in altri documenti di scarico (primo documento rilevato: tipo |" & dttTmp.Rows(0)!mm_tipork.ToString & "|, anno |" & dttTmp.Rows(0)!mm_anno.ToString & "|, serie '|" & dttTmp.Rows(0)!mm_serie.ToString & "|', numero |" & dttTmp.Rows(0)!mm_numdoc.ToString & "|, riga |" & dttTmp.Rows(0)!mm_riga.ToString & "|).")
        If bRendiBloccantiAlertCLavoro Then
          strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128734888616631839, "Impossibile procedere alla cancellazione.")
          ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Else
          strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128734888694943839, "Procedere ugualmente alla cancellazione?")
          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg)
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
        End If
      End If

      '------------------------------------------------------------------------------------
      'Se trattasi di una carico di produzione controlla che non sia già usato su qualche
      'documento (campo mm_cc*)
      If strTipo = "T" Then
        If dttTmpT.Rows.Count > 0 Then
          strMsg = oApp.Tr(Me, 128661156083906250, "Questo documento/riga di carico (produzione) in conto/lavoro è già utilizzato in altri documenti di scarico (primo documento rilevato: tipo |" & dttTmpT.Rows(0)!mm_tipork.ToString & "|, anno |" & dttTmpT.Rows(0)!mm_anno.ToString & "|, serie '|" & dttTmpT.Rows(0)!mm_serie.ToString & "|', numero |" & dttTmpT.Rows(0)!mm_numdoc.ToString & "|, riga |" & dttTmpT.Rows(0)!mm_riga.ToString & "|).")
          If bRendiBloccantiAlertCLavoro Then
            strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128661150871562500, "Impossibile procedere alla cancellazione.")
            ThrowRemoteEvent(New NTSEventArgs("", strMsg))
          Else
            strMsg = strMsg & vbCrLf & vbCrLf & oApp.Tr(Me, 128734888713663839, "Procedere ugualmente alla cancellazione?")
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, strMsg)
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return False
          End If
        End If
      End If    'If strTipo = "T" Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMcla.Clear()
      dttTmp.Clear()
      dttTmpT.Clear()
    End Try
  End Function

  Public Overridable Function InizProtocollo() As Boolean
    Dim strAlfp As String = ""
    Try

      If (dttET.Rows(0)!et_tipork.ToString = "L" Or dttET.Rows(0)!et_tipork.ToString = "J") And strAutoNumProt = "S" Then
        'Rileva il n. di registro
        nRegiva = oCldBoll.GetNregivaPerNumprot(strDittaCorrente, dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_anno), strAlfp)
        If nRegiva = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130631255784459802, "ATTENZIONE: nella tabella delle numerazioni ditta non è stato indicato il numero del reg. IVA da utilizzare per questo tipo di documento")))
        End If
        If strAlfp = "" Then strAlfp = " "
        'Rileva il n. di protocollo
        If nRegiva > 0 Then
          strAlfpro = strAlfp
          lNumprot = oCldBoll.LegNuma(strDittaCorrente, "P", "A" & strAlfpro & nRegiva.ToString("000"), NTSCInt(dttET.Rows(0)!et_anno), True)
        End If
        dttET.Rows(0)!et_nregiva = nRegiva
        dttET.Rows(0)!et_alfpro = strAlfpro
        dttET.Rows(0)!et_numprot = lNumprot
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function IsDocumentoEmesso(ByVal strTipoDoc As String, ByVal bPercontrop As Boolean) As Boolean
    Try
      'per compatibilità con veboll vb6: i movimenti interni di magazzino sono considerati documenti emessi, solo che devono utilizzare le contropartite acquisti!!!
      If strTipoDoc = "Z" And bPercontrop Then Return False

      Select Case strTipoDoc
        Case "A", "B", "C", "D", "N", "E", "W", "Z", "F", "I", "S" : Return True
      End Select
      Return False

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function CalcolaScontiTestata() As Boolean
    Dim dScont1 As Decimal = 0
    Dim dScont2 As Decimal = 0
    Dim dSommaQta As Decimal = 0
    Dim lClaSconCli As Integer = 0
    Dim i As Integer = 0
    Dim bTrovati As Boolean = False
    Try
      'da usare solo con fatture immediate, DDT emessi, corrispettivi emessi, note di prelievo
      If Not (dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_tipork.ToString = "B" Or _
              dttET.Rows(0)!et_tipork.ToString = "C" Or dttET.Rows(0)!et_tipork.ToString = "W") Then Return True

      'trovo la somma delle quantità
      For i = 0 To dttEC.Rows.Count - 1
        dSommaQta += NTSCDec(dttEC.Rows(i)!ec_quant)
      Next

      'cerco lo sconto per fasce di quantità nello specifico cliente - classe sconto articolo 999
      If lContoCF <> 0 Then
        If Not oCldBoll.CalcolaScontiTestataTrovaSconti(strDittaCorrente, lContoCF, _
                                            NTSCStr(dttET.Rows(0)!et_datdoc), dSommaQta, _
                                            dScont1, dScont2, NTSCInt(dttEt_conto.Rows(0)!an_clascon), _
                                            bTrovati) Then Return False

        If dScont1 > 0 Then dttET.Rows(0)!et_scont1 = dScont1
        If dScont2 > 0 Then dttET.Rows(0)!et_scont2 = dScont2
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function CalcolaArrotondamento(ByVal dPartedecimale As Decimal, ByRef dPrezzoarr As Decimal, ByRef dArrotondamento As Decimal) As Boolean
    'Arrotonda il totale documento ai 5 centesimi
    Dim dTmppartedecimale As Decimal = 0
    Try

      dArrotondamento = 0
      dTmppartedecimale = dPartedecimale * 10
      dTmppartedecimale = dTmppartedecimale - NTSCDec(Fix(dTmppartedecimale))
      If dTmppartedecimale > 0 And dTmppartedecimale <= NTSCDec(0.2) Then
        dTmppartedecimale = (0 - dTmppartedecimale) / 10
        dPrezzoarr = Fix(NTSCDec(dttET.Rows(0)!et_totdoc))
        dArrotondamento = dTmppartedecimale
        Return True
      End If
      If dTmppartedecimale > NTSCDec(0.2) And dTmppartedecimale <= NTSCDec(0.7) Then
        dTmppartedecimale = NTSCDec((0.5 - dTmppartedecimale) / 10)
        dPrezzoarr = NTSCDec(NTSCDec(dttET.Rows(0)!et_totdoc)) + dTmppartedecimale
        dArrotondamento = dTmppartedecimale
        Return True
      End If
      If dTmppartedecimale > NTSCDec(0.7) Then
        dTmppartedecimale = (1 - dTmppartedecimale) / 10
        dPrezzoarr = NTSCDec(Fix(NTSCDec(dttET.Rows(0)!et_totdoc)) + 1)
        dArrotondamento = dTmppartedecimale
        Return True
      End If
      If dTmppartedecimale = 0 Then dPrezzoarr = NTSCDec(dttET.Rows(0)!et_totdoc)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function AggiornaDisimpegno() As Boolean
    Try
      '-------------------------------------
      'calcolo i disimpegni
      If Not AggDisimpegno(dttET.Rows(0)!et_tipork.ToString, dttEC) Then Return False
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        If Not AggDisimpegno("U", dttECIMP) Then Return False
      End If
      If bModTCO Then
        If Not AggDisimpegnoTc(dttET.Rows(0)!et_tipork.ToString, dttEC, dttECTC) Then Return False
        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          If Not AggDisimpegnoTc("U", dttECIMP, dttECIMPTC) Then Return False
        End If
      End If
      dsShared.AcceptChanges()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function



  Public Overridable Function CalcolaStringaPVR() As String
    'calcola la striga per i PVR svizzeri
    'solo se:
    ' - opzione di registro abilitata
    ' - il cliente è gestito a scadenze
    ' - il tipo di pagamento è 'contanti' ed ha una sola rata
    'esempio
    'CalcolaStringaPVR = "0100000589650>090874010001450034999200111+ 010013534>"
    Dim strTmp As String
    Dim i As Integer
    Dim strNumcliPVR As String
    Dim strPrefixFreeStringPVR As String
    Dim strSerie As String
    Dim dttTmp As New DataTable

    Try
      CalcolaStringaPVR = ""
      'solo per fatture immediate emesse o ricevute
      If dttET.Rows(0)!et_tipork.ToString <> "A" And dttET.Rows(0)!et_tipork.ToString <> "L" Then Return ""

      If dttEt_conto.Rows(0)!an_scaden.ToString <> "S" Then Return ""

      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_codpaga).ToString, strDittaCorrente, "TABPAGA", "N", "", dttTmp)
      If NTSCInt(dttTmp.Rows(0)!tb_tippaga) <> 4 Or NTSCInt(dttTmp.Rows(0)!tb_numrate) <> 1 Then Return ""
      dttTmp.Clear()

      'per i documenti ricevuti occorre inserire la stringa tramite l'apposita voce di menu/file
      If dttET.Rows(0)!et_tipork.ToString = "L" Then
        Return dttET.Rows(0)!et_andescr2.ToString & dttET.Rows(0)!et_anindir.ToString
      End If

      strNumcliPVR = oCldBoll.GetSettingBusDitt(strDittaCorrente,"OPZIONI", ".", ".", "NsNumCliPVR", "", " ", "")                    ' NON DOCUMENTARE
      strPrefixFreeStringPVR = oCldBoll.GetSettingBusDitt(strDittaCorrente,"OPZIONI", ".", ".", "PrefixFreeStringPVR", "", " ", "")  ' NON DOCUMENTARE
      For i = 1 To (6 - Len(strNumcliPVR))
        strNumcliPVR = "0" & strNumcliPVR
      Next
      For i = 1 To (6 - Len(strPrefixFreeStringPVR))
        strPrefixFreeStringPVR = "0" & strPrefixFreeStringPVR
      Next

      'primi 2 caratteri: 03 = PVR in euro, 01 = PVR in CHF
      'per un fattore di velocità non testo la tabella valuta:
      'se sono in valuta presuppongo che sia l'unica ammessa
      If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Then
        CalcolaStringaPVR = IIf(oApp.ValutaCorrente = "EUR", "21", "01").ToString
        strNumcliPVR = IIf(oApp.ValutaCorrente = "EUR", "03", "01").ToString & strNumcliPVR
      Else
        CalcolaStringaPVR = IIf(oApp.ValutaCorrente = "EUR", "01", "21").ToString
        strNumcliPVR = IIf(oApp.ValutaCorrente = "EUR", "01", "03").ToString & strNumcliPVR
      End If
      strNumcliPVR = strNumcliPVR & calcolaPVRCheck(strNumcliPVR)

      '10 caratteri successivi: importo residuo da incassare (senza decimali:moltiplico per 100)
      With dttET.Rows(0)
        If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Then
          strTmp = (NTSCInt((NTSCDec(!et_totdoc) - NTSCDec(!et_pagato) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag)) * 100)).ToString
        Else
          strTmp = (NTSCInt((NTSCDec(!et_totdocv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov) - NTSCDec(!et_totomagv)) * 100)).ToString
        End If
      End With

      For i = 1 To 10 - Len(strTmp)
        strTmp = "0" & strTmp
      Next
      CalcolaStringaPVR = CalcolaStringaPVR & strTmp
      '1 carattere di controllo
      CalcolaStringaPVR = CalcolaStringaPVR & calcolaPVRCheck(CalcolaStringaPVR)
      '1 carattere fisso
      CalcolaStringaPVR = CalcolaStringaPVR & ">"
      '27 caratteri liberi per Business: di cui:
      '6 prefisso variabile da registro - 9 codice cliente - 2 anno - 2 serie - 5 numero documento - 2 numero di rata  (fisso 01)
      CalcolaStringaPVR = CalcolaStringaPVR & strPrefixFreeStringPVR & lContoCF.ToString("000000000") & NTSCDate(dttET.Rows(0)!et_datdoc).Year.ToString.Substring(2)
      If dttET.Rows(0)!et_serie.ToString = " " Then
        strSerie = "00"
      Else
        If Asc(dttET.Rows(0)!et_serie.ToString) <= 90 Then
          strSerie = Chr(Asc(dttET.Rows(0)!et_serie.ToString) - 65 + 48)
        Else
          strSerie = Chr(Asc(dttET.Rows(0)!et_serie.ToString) - 97 + 48)
        End If
      End If
      CalcolaStringaPVR = CalcolaStringaPVR & strSerie & NTSCInt(dttET.Rows(0)!et_numdoc).ToString("00000") & "01"
      '1 carattere di controllo
      CalcolaStringaPVR = CalcolaStringaPVR & calcolaPVRCheck(Mid(CalcolaStringaPVR, 15, 27))
      '2 caratteri fissi
      CalcolaStringaPVR = CalcolaStringaPVR & "+ "

      '9 codice PVR nostro (comprensivo di check digit
      CalcolaStringaPVR = CalcolaStringaPVR & strNumcliPVR

      '1 carattere fisso
      CalcolaStringaPVR = CalcolaStringaPVR & ">"

      Return CalcolaStringaPVR

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return ""
    End Try
  End Function

  '------------------------
  Public Overridable Function ImportaNote(ByRef dttNote As DataTable) As Boolean
    Dim evnt As NTSEventArgs = Nothing
    Dim dttTmp As New DataTable
    Dim dttMovprb As New DataTable
    Dim dttMovprbTc As New DataTable
    Dim strMess As String = ""
    Dim strHead As String = ""
    Dim i As Integer = 0
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim nMagazCLav As Integer = -1
    Dim bContoLavAtt As Boolean = False
    Dim bAltrui As Boolean = False

    Dim nMagazCLavLoc As Integer = 0
    Dim bContoLavAttLoc As Boolean = False
    Dim dtTSMovord As DateTime = Nothing

    Dim strMsg As String = ""

    Dim bEreditaDatiChiamata As Boolean = False

    Try
      '--------------------------------------------------------------------------------------------------------------
      'Resetta la variabile di controllo di importazione kit
      bKitDaOrdini = False

      '---------------------------------------------------------------------------
      'se non lo avevo fatto, inserisco il conto cli/forn
      If NTSCInt(dttET.Rows(0)!et_conto) = 0 And dttNote.Rows.Count > 1 Then
        For i = 1 To dttNote.Rows.Count - 1
          If NTSCInt(dttNote.Rows(i - 1)!tm_conto) <> NTSCInt(dttNote.Rows(i)!tm_conto) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129584719128984375, "Gli ordini selezionati non sono intestati tutti allo stesso cliente/fornitore. Operazione interrotta.")))
            Return False
          End If
        Next
      End If
      If NTSCInt(dttET.Rows(0)!et_conto) = 0 And dttNote.Rows.Count > 0 Then
        dttET.Rows(0)!et_conto = NTSCInt(dttNote.Rows(0)!tm_conto)
        dttET.Rows(0)!et_tipobf = NTSCInt(dttNote.Rows(0)!tm_tipobf)
        If Not OkTestata() Then Return False
      End If

      '---------------------------------------------------------------------------
      'verifico se alcune note sono in modifica tra quelli da importare
      For Each dtrT2 As DataRow In dttNote.Rows
        DocumentLockCheck(dtrT2!tm_tipork.ToString, NTSCInt(dtrT2!tm_anno), dtrT2!tm_serie.ToString, NTSCInt(dtrT2!tm_numdoc), 0, strMsg)
        If strMsg.Trim <> "" Then
          If nControllaConcorrenzaOggetti = -1 Then
            'avviso
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                              oApp.Tr(Me, 129179706622578125, "Potrebbe non essere possibile salvare il documento in apertura se " & _
                              "il primo operatore apporterà delle modifiche." & vbCrLf & _
                              "Diversamente se modifichiamo il documento sarà il primo operatore a perdere il lavoro svolto.")))
          End If
          If nControllaConcorrenzaOggetti = 1 Then
            'blocco
            bDocumentLockNoSave = True
            ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                              oApp.Tr(Me, 129179706605458984, "Importazione note di prelievo annullata.")))
            Return False
          End If
        End If
      Next
      '--------------------------------------------------------------------------------------------------------------
      If CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "EreditaRiferimentiChiamata", "0", " ", "0")) = True Then
        Dim nIndice As Integer = 0
        Dim dtrRigheOrdine() As DataRow = dttNote.Select("", "tm_tipork, tm_anno, tm_serie, tm_numdoc")
        bEreditaDatiChiamata = True
        If dtrRigheOrdine.Length > 1 Then
          For nIndice = 1 To (dtrRigheOrdine.Length - 1)
            If (dtrRigheOrdine(nIndice)!tm_tipork.ToString.ToUpper <> dtrRigheOrdine(0)!tm_tipork.ToString.ToUpper) Or _
               (dtrRigheOrdine(nIndice)!tm_anno.ToString <> dtrRigheOrdine(0)!tm_anno.ToString) Or _
               (dtrRigheOrdine(nIndice)!tm_serie.ToString.ToUpper <> dtrRigheOrdine(0)!tm_serie.ToString.ToUpper) Or _
               (dtrRigheOrdine(nIndice)!tm_numdoc.ToString <> dtrRigheOrdine(0)!tm_numdoc.ToString) Then
              bEreditaDatiChiamata = False
              Exit For
            End If
          Next
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      'Per ogni record di TTSELDOC inserische le righe in MOTRANS
      For Each dtrTm As DataRow In dttNote.Select("", "tm_tipork, tm_anno, tm_serie, tm_numdoc")

        '--------------------
        'Controlla la congruenza delle informazioni di testata e piede
        If dttEC.Rows.Count = 0 Then
          'Riporta i campi di testata e piede dalla 1a offerta
          With dtrTm
            '--------------------
            'Controlli iniziali (anche sul primo Documento)
            strHead = oApp.Tr(Me, 128734888842433839, "Attenzione! I seguenti campi della NOTA DI PRELIEVO serie '|" & _
                                              !tm_serie.ToString & "|' numero |" & !tm_numdoc.ToString & _
                                              "| differiscono dal documento " & _
                                              "corrente:" & vbCrLf & vbCrLf)
            strMess = ""
            If bRiportaCodeseInEvasione = False Then
              If NTSCInt(!tm_codese) <> NTSCInt(dttET.Rows(0)!et_codese) Then
                strMess = strMess & oApp.Tr(Me, 128734888923553839, "- Codice esenzione |" & NTSCInt(!tm_codese).ToString & "|" & vbCrLf)
              End If
              If strMess <> "" Then
                strMess = strHead & strMess & vbCrLf & oApp.Tr(Me, 128734889013565839, "Forzare l'inserimento della NOTA DI PRELIEVO?")
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMess)
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then
                  strMess = ""
                  GoTo Salta
                End If
              End If
            End If
            strMess = ""
            '---------------------
            If bRiportaCambio1Nota Then
              dttET.Rows(0)!et_cambio = !tm_cambio
            End If
            dttET.Rows(0)!et_tipobf = !tm_tipobf
            dttET.Rows(0)!et_scorpo = !tm_scorpo
            dttET.Rows(0)!et_flspinc = !tm_flspinc

            If NTSCInt(!tm_codpaga) > 0 And NTSCInt(!tm_conto) = NTSCInt(dttET.Rows(0)!et_conto) Then
              dttET.Rows(0)!et_codpaga = !tm_codpaga
              '----------------------
              'Se il pagamento è a 'data diversa' riporta la datapag del Documento
              dttET.Rows(0)!et_datapag = CalcolaDataScadenza(NTSCStr(dttET.Rows(0)!et_tipork), NTSCStr(dttET.Rows(0)!et_datpar), NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)
              oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_codpaga), strDittaCorrente, "TABPAGA", "N", , dttTmp)

              If dttTmp.Rows.Count > 0 Then
                If NTSCInt(dttTmp.Rows(0)!tb_decpaga) = 4 Then
                  dttET.Rows(0)!et_datapag = !tm_datapag
                End If
              End If
            End If

            dttET.Rows(0)!et_coddest = !tm_coddest  'prima di settare l'agente, altrimenti se indico un angete diverso sulla destinazione al cambio della destinazoine viene cambiato l'agente invece di mantenere quello dell'ordine
            If bNew Or (bNew = False And bBloccaAgente1 = False) Then dttET.Rows(0)!et_codagen = !tm_codagen

            dttET.Rows(0)!et_listino = !tm_listino
            dttET.Rows(0)!et_controp = !tm_controp
            dttET.Rows(0)!et_scont1 = !tm_scont1
            dttET.Rows(0)!et_scont2 = !tm_scont2
            dttET.Rows(0)!et_scopag = !tm_scopag
            '-------------------------------------------------------------------------------------------------------
            '--- Se l'opzione di registro BSVEBOLL/OPZIONI/bRiportaCodeseInEvasione è attiva e non ci sono righe
            '--- nel corpo del documento, setta un flag per NON controllare/segnalare la differenza fra:
            '--- Codice Esenzione dell'Ordine/Impegno che si sta evadendo e quello di testata del documento corrente
            '-------------------------------------------------------------------------------------------------------
            If bRiportaCodeseInEvasione = True Then dttET.Rows(0)!et_codese = !tm_codese
            '-------------------------------------------------------------------------------------------------------
            If bMantieniCausaliTestata1Nota Then
              dttET.Rows(0)!et_causale = !tm_causale  'deve validare la causale per ricalcolare i campi xxo_... 
            End If
            If Not bIgnoraMagTestata1Ordine Then
              dttET.Rows(0)!et_magaz = !tm_magaz
              dttET.Rows(0)!et_magaz2 = !tm_magaz2
            End If
            dttET.Rows(0)!et_magimp = !tm_magimp
            dttET.Rows(0)!et_speaccv = !tm_speaccv
            If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Or NTSCDec(dttET.Rows(0)!et_speaccv) = 0 Then dttET.Rows(0)!et_speacc = !tm_speacc
            dttET.Rows(0)!et_speimbv = !tm_speimbv
            If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Or NTSCDec(dttET.Rows(0)!et_speimbv) = 0 Then dttET.Rows(0)!et_speimb = !tm_speimb

            dttET.Rows(0)!et_pagatov = NTSCDec(IIf(bRiportaIncassato1Nota, !tm_pagatov, 0))
            dttET.Rows(0)!et_pagato = NTSCDec(IIf(bRiportaIncassato1Nota, !tm_pagato, 0))
            dttET.Rows(0)!et_abbuonov = NTSCDec(IIf(bRiportaAbbuono1Nota, !tm_abbuonov, 0))
            dttET.Rows(0)!et_abbuono = NTSCDec(IIf(bRiportaAbbuono1Nota, !tm_abbuono, 0))

            dttET.Rows(0)!et_vettor = !tm_vettor
            dttET.Rows(0)!et_vettor2 = !tm_vettor2
            dttET.Rows(0)!et_acuradi = !tm_acuradi
            dttET.Rows(0)!et_porto = !tm_porto
            dttET.Rows(0)!et_annotco = !tm_annotco
            dttET.Rows(0)!et_codstag = !tm_codstag
            dttET.Rows(0)!et_codcfam = !tm_codcfam
            dttET.Rows(0)!et_coddest2 = !tm_coddest2
            dttET.Rows(0)!et_codagen2 = !tm_codagen2
            'li riporta solo se sono vuoti
            If NTSCStr(dttET.Rows(0)!et_riferim).Trim = "" Then dttET.Rows(0)!et_riferim = NTSCStr(!tm_riferim)
            If NTSCStr(dttET.Rows(0)!et_note).Trim = "" Then dttET.Rows(0)!et_note = NTSCStr(!tm_note)

            dttET.Rows(0)!et_commeca = !tm_commeca
            dttET.Rows(0)!et_subcommeca = !tm_subcommeca
            dttET.Rows(0)!et_codaspe = !tm_codaspe
            dttET.Rows(0)!et_aspetto = !tm_aspetto
            dttET.Rows(0)!et_caustra = !tm_caustra
            dttET.Rows(0)!et_codcena = !tm_codcena
            dttET.Rows(0)!et_coddivi = !tm_coddivi
            dttET.Rows(0)!et_codcli = !tm_codcli

            If bNonRiportareAbiCabBancaInEvasione = False Then
              dttET.Rows(0)!et_abi = !tm_abi
              dttET.Rows(0)!et_cab = !tm_cab
              dttET.Rows(0)!et_banc1 = NTSCStr(!tm_banc1)
              dttET.Rows(0)!et_banc2 = NTSCStr(!tm_banc2)
              dttET.Rows(0)!et_codbanc = !tm_codbanc
            End If

            If bRiportaPesoColliNota Then
              dttET.Rows(0)!et_totcoll = NTSCDec(dttET.Rows(0)!et_totcoll) + NTSCDec(!tm_totcoll)
              dttET.Rows(0)!et_peso = NTSCDec(dttET.Rows(0)!et_peso) + NTSCDec(!tm_peso)
              dttET.Rows(0)!et_pesonetto = NTSCDec(dttET.Rows(0)!et_pesonetto) + NTSCDec(!tm_pesonetto)
              'Se deve riportare quelli della nota non deve ricarcolarli
              bCalcolaColli = False
              bCalcolaPesoLordo = False
              bCalcolaPesoNetto = False
            End If

            dttET.Rows(0)!et_contfatt = !tm_contfatt
            If bEreditaDatiChiamata = True Then dttET.Rows(0)!et_codchia = !tm_codchia

            dttET.Rows(0)!et_cup = !tm_cup
            dttET.Rows(0)!et_cig = !tm_cig
            dttET.Rows(0)!et_riferimpa = !tm_riferimpa
          End With    'With dtrTm

          If Not OkTestata() Then
            'se dopo aver cambiato la causale la testata non è ok esco
            Return False
          End If
        Else
          '---------------------
          'Segnala le differenze
          With dtrTm
            strHead = oApp.Tr(Me, 128581069784687500, "Attenzione! I seguenti campi della NOTA DI PRELIEVO serie '|" & _
                                              !tm_serie.ToString & "|' numero |" & !tm_numdoc.ToString & _
                                              "|, differiscono dal documento " & _
                                              "corrente:" & vbCrLf & vbCrLf)
            strMess = ""
            If NTSCInt(!tm_scont1) <> NTSCInt(dttET.Rows(0)!et_scont1) Then
              strMess = strMess & oApp.Tr(Me, 128734889140257839, "- Sconto 1 di testata |" & NTSCInt(!tm_scont1).ToString(oApp.FormatSconti) & "%|" & vbCrLf)
            End If
            If NTSCInt(!tm_scont2) <> NTSCInt(dttET.Rows(0)!et_scont2) Then
              strMess = strMess & oApp.Tr(Me, 128734889207025839, "- Sconto 2 di testata |" & NTSCInt(!tm_scont2).ToString(oApp.FormatSconti) & "%|" & vbCrLf)
            End If
            If NTSCInt(!tm_codpaga) <> NTSCInt(dttET.Rows(0)!et_codpaga) Then
              'Se il codice pagamento è 0 lo assegna
              If NTSCInt(dttET.Rows(0)!et_codpaga) = 0 And NTSCInt(!tm_codpaga) <> 0 Then
                dttET.Rows(0)!et_codpaga = NTSCInt(!tm_codpaga)
              Else
                If NTSCInt(!tm_codpaga) <> 0 Then
                  strMess = strMess & oApp.Tr(Me, 128581681255000000, "- Codice pagamento |" & NTSCInt(!tm_codpaga).ToString() & "|" & vbCrLf)
                End If
              End If
            End If
            If NTSCInt(!tm_tipobf) <> NTSCInt(dttET.Rows(0)!et_tipobf) Then
              strMess = strMess & oApp.Tr(Me, 128581681603750000, "- Codice tipo Bolla/Fattura |" & NTSCInt(!tm_tipobf).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_scopag) <> NTSCInt(dttET.Rows(0)!et_scopag) Then
              strMess = strMess & oApp.Tr(Me, 128581682388593750, "- Sconto pagamento |" & NTSCInt(!tm_scopag).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_codagen) <> NTSCInt(dttET.Rows(0)!et_codagen) Then
              strMess = strMess & oApp.Tr(Me, 128581682617187500, "- Codice agente |" & NTSCInt(!tm_codagen).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_codagen2) <> NTSCInt(dttET.Rows(0)!et_codagen2) Then
              strMess = strMess & oApp.Tr(Me, 128581682814843750, "- Codice subagente |" & NTSCInt(!tm_codagen2).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_codese) <> NTSCInt(dttET.Rows(0)!et_codese) Then
              strMess = strMess & oApp.Tr(Me, 128581685275781250, "- Codice esenzione |" & NTSCInt(!tm_codese).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_magaz) <> NTSCInt(dttET.Rows(0)!et_magaz) Then
              strMess = strMess & oApp.Tr(Me, 128700017497187500, "- Codice 1° magazzino |" & NTSCInt(!tm_magaz).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_magaz2) <> NTSCInt(dttET.Rows(0)!et_magaz2) Then
              strMess = strMess & oApp.Tr(Me, 128734889903877839, "- Codice 2° magazzino |" & NTSCInt(!tm_magaz2).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_magimp) <> NTSCInt(dttET.Rows(0)!et_magimp) Then
              strMess = strMess & oApp.Tr(Me, 128734889924781839, "- Codice magazzino impegni |" & NTSCInt(!tm_magimp).ToString() & "|" & vbCrLf)
            End If
            If bNoMsgCommessaDiversa Then
              If NTSCInt(!tm_commeca) <> NTSCInt(dttET.Rows(0)!et_commeca) Then
                strMess = strMess & oApp.Tr(Me, 128734889990683839, "- Codice commessa |" & NTSCInt(!tm_commeca).ToString() & "|" & vbCrLf)
              End If
              If NTSCStr(!tm_subcommeca) <> NTSCStr(dttET.Rows(0)!et_subcommeca) Then
                strMess = strMess & oApp.Tr(Me, 128734890108415839, "- Codice sub-commessa |" & NTSCInt(!tm_subcommeca).ToString() & "|" & vbCrLf)
              End If
            End If
            If bEvadendoRiportaSempreDatiTrasp = 0 Then
              If NTSCInt(!tm_coddest) <> NTSCInt(dttET.Rows(0)!et_coddest) Then
                strMess = strMess & oApp.Tr(Me, 128734888178787839, "- Codice 1° destinazione |" & NTSCInt(!tm_coddest).ToString() & "|" & vbCrLf)
              End If
            End If
            If NTSCInt(!tm_coddest2) <> NTSCInt(dttET.Rows(0)!et_coddest2) Then
              strMess = strMess & oApp.Tr(Me, 128734888164903839, "- Codice 2° destinazione |" & NTSCInt(!tm_coddest2).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_codcena) <> NTSCInt(dttET.Rows(0)!et_codcena) Then
              strMess = strMess & oApp.Tr(Me, 128734888087995839, "-  Codice centro C.A. |" & NTSCInt(!tm_codcena).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_coddivi) <> NTSCInt(dttET.Rows(0)!et_coddivi) Then
              strMess = strMess & oApp.Tr(Me, 129446832315458984, "-  Codice divisione C.A. |" & NTSCInt(!tm_coddivi).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!tm_codcli) <> NTSCInt(dttET.Rows(0)!et_codcli) Then
              strMess = strMess & oApp.Tr(Me, 129446832394335937, "-  Codice cliente C.A. |" & NTSCInt(!tm_codcli).ToString() & "|" & vbCrLf)
            End If

            If strMess <> "" Then
              strMess = strHead & strMess & vbCrLf & oApp.Tr(Me, 128581071598593750, "Forzare l'inserimento della NOTA DI PRELIEVO mantenendo i dati di testata presenti nel documento?")
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMess)
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then
                strMess = ""
                GoTo Salta
              End If
            End If
            strMess = ""

            '-------------------------
            'differenze bloccanti
            If NTSCStr(!tm_cup) <> NTSCStr(dttET.Rows(0)!et_cup) Then
              strMess = strMess & oApp.Tr(Me, 130471243829204623, "- Codice CUP |" & NTSCStr(!tm_cup).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!tm_cig) <> NTSCStr(dttET.Rows(0)!et_cig) Then
              strMess = strMess & oApp.Tr(Me, 130471243846153249, "- Codice CIG |" & NTSCStr(!tm_cig).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!tm_riferimpa) <> NTSCStr(dttET.Rows(0)!et_riferimpa) Then
              strMess = strMess & oApp.Tr(Me, 130471243860803789, "- Riferimento ordine P.A. |" & NTSCStr(!tm_riferimpa).ToString() & "|" & vbCrLf)
            End If
            If strMess <> "" Then
              ThrowRemoteEvent(New NTSEventArgs("", strHead & strMess & vbCrLf & oApp.Tr(Me, 130471265540085576, "La riga non verra acquisita")))
              GoTo Salta
            End If
            strMess = ""

            'Su opzione riporta comunque cautrasp, aspettoesteriore, trasportoacuradi e porto
            If bEvadendoRiportaSempreDatiTrasp <> 0 Then
              dttET.Rows(0)!et_caustra = !tm_caustra
              dttET.Rows(0)!et_codaspe = !tm_codaspe
              dttET.Rows(0)!et_aspetto = !tm_aspetto
              dttET.Rows(0)!et_vettor = !tm_vettor
              dttET.Rows(0)!et_acuradi = !tm_acuradi
              dttET.Rows(0)!et_porto = !tm_porto
              dttET.Rows(0)!et_coddest = !tm_coddest
            End If

            If bRiportaPesoColliNota Then
              dttET.Rows(0)!et_totcoll = NTSCDec(dttET.Rows(0)!et_totcoll) + NTSCDec(!tm_totcoll)
              dttET.Rows(0)!et_peso = NTSCDec(dttET.Rows(0)!et_peso) + NTSCDec(!tm_peso)
              dttET.Rows(0)!et_pesonetto = NTSCDec(dttET.Rows(0)!et_pesonetto) + NTSCDec(!tm_pesonetto)
              'Se deve riportare quelli della nota non deve ricarcolarli
              bCalcolaColli = False
              bCalcolaPesoLordo = False
              bCalcolaPesoNetto = False
            End If
          End With    'With dtrTm
        End If    'If dttEC.Rows.Count = 0 Then

        '-----------------------
        'Controllo attivazione cono lavoro attivo e passivo (lo calcolo sulla testata dopo aver caricato il magaz di testata dalla nota di prelievo)
        If nMagazCLav = -1 Then
          If bNoAttribRifCLav = True Then
            nMagazCLav = 0
          Else
            nMagazCLav = CheckScaricoLavorazione(bAltrui)
            If nMagazCLav = 0 Then
              nMagazCLav = CheckScaricoCLavAttivo()
              If nMagazCLav <> 0 Then
                bContoLavAtt = True
              End If
            End If
          End If
        End If

        '---------------------------
        'Riporta le righe della nota di prelievo
        If Not oCldBoll.GetMovprb(strDittaCorrente, False, dtrTm!tm_tipork.ToString, NTSCInt(dtrTm!tm_anno), _
                                  dtrTm!tm_serie.ToString, NTSCInt(dtrTm!tm_numdoc), 0, dttMovprb, dttMovprbTc) Then GoTo salta
        If dttMovprb.Rows.Count = 0 Then GoTo salta
        For Each dtrMovprb As DataRow In dttMovprb.Rows
          '----------------------------------
          nMagazCLavLoc = nMagazCLav
          bContoLavAttLoc = bContoLavAtt
          'Non assegna i riferimento al carico di prodiuzione (mm_cc*)
          'l'articolo è gestito a fasi
          If dtrMovprb!ar_gesfasi.ToString = "S" And bContoLavAtt Then
            nMagazCLavLoc = 0
            bContoLavAttLoc = False
          End If
          'Non assegna i riferimenti al conto lavoro passivo (mm_cl*)
          'se l'articolo è gestito a fasi e lo scarico insiste sul magazzino
          'merce altrui presso terzi
          If nMagazCLav <> 0 And dtrMovprb!ar_gesfasi.ToString = "S" And bAltrui Then
            nMagazCLavLoc = 0
          End If

          '----------------------------------
          If NTSCStr(dtrMovprb!mo_ultagg) = "" Then
            dtTSMovord = NTSCDate(IntSetDate("01/01/1900"))
          Else
            dtTSMovord = NTSCDate(dtrMovprb!mo_ultagg)
          End If
          ScriviRigaNota(dttEC, dtrMovprb, dttMovprbTc.Select("mm_riga = " & dtrMovprb!mm_riga.ToString), _
                        NTSCDec(dtrTm!tm_scont1), NTSCDec(dtrTm!tm_scont2), NTSCDec(dtrTm!tm_scopag), _
                        NTSCInt(IIf(dttET.Rows(0)!et_tipork.ToString = "T", 0, nMagazCLavLoc)), bContoLavAttLoc, _
                        0, "S", "S", True, dtTSMovord, NTSCInt(dtrTm!tm_codese), Nothing)
        Next
        dttMovprb.Clear()
        dttMovprbTc.Clear()
Salta:
      Next    'For Each dtrTm As DataRow In dttNote.Rows

      If bKitDaOrdini Then
        AggRifKit(dttET.Rows(0)!et_tipork.ToString)
        bKitDaOrdini = False
      End If

      '-----------------------------------------------------------------------
      'Elimina eventuali multiple evasioni a saldo della stessa riga di ordine/nota
      'Per evitare il messaggio finale di salvataggio
      If dttEC.Rows.Count > 0 Then
        If Not ApriDocumentoAggUnicaEvasioneSaldo(dttEC.Rows(0)!ec_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc)) Then Return False
        If dttEC.Rows(0)!ec_tipork.ToString = "T" Then
          If Not ApriDocumentoAggUnicaEvasioneSaldo("U", NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc)) Then Return False
        End If
      End If

      '-----------------------------------------------------------------------
      'se serve aggiungo i lock su ttkeys 
      If nControllaConcorrenzaOggetti <> 0 Then
        For Each dtrT2 As DataRow In dttNote.Rows
          DocumentLockAdd(dtrT2!tm_tipork.ToString, NTSCInt(dtrT2!tm_anno), dtrT2!tm_serie.ToString, NTSCInt(dtrT2!tm_numdoc), 0, False)
        Next
      End If    'If nControllaConcorrenzaOggetti <> 0 Then

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttET.AcceptChanges()
      dttEC.AcceptChanges()
      If Not dttECTC Is Nothing Then dttECTC.AcceptChanges()
      dttTmp.Clear()
      dttMovprb.Clear()
      dttMovprbTc.Clear()
      dttNote.Clear()
    End Try
  End Function
  Public Overridable Function ScriviRigaNota(ByRef dttCorp As DataTable, ByRef dtrMovprb As DataRow, ByRef dtrMovprbTc As DataRow(), ByVal dSc1 As Decimal, ByVal dSc2 As Decimal, ByVal dScPag As Decimal, _
                                        ByVal nMagClav As Integer, ByVal bContoLavoroAttivo As Boolean, ByVal dQuaDaEva As Decimal, _
                                        ByVal strFlevasDaeva As String, ByVal strFlevasDaevaPRB As String, ByVal bTuttoIlResiduo As Boolean, _
                                        ByVal dtTSMovord As Date, ByVal nCodeseNota As Integer, ByRef dtrSelord As DataRow, _
                                        Optional ByVal bDocumentoU As Boolean = False, Optional ByVal lRifRigaT As Integer = 0) As Boolean
    'serve sia per corpo che per corpoimp
    Dim nControp As Integer = 0
    Dim strTipodoc As String = dttET.Rows(0)!et_tipork.ToString
    Dim nMag1 As Integer, nMag2 As Integer
    Dim nCau1 As Integer, nCau2 As Integer
    Dim dQuant As Decimal, dColli As Decimal
    Dim dQuantRES As Decimal, dColliRes As Decimal, strUnmis As String
    Dim strFlevasVersoOrdine As String
    Dim strFlevasVersoNote As String
    Dim dPrezzo As Decimal, dPrezvalc As Decimal
    Dim dttNote As DataTable = Nothing
    'Cambio esenzione
    Dim nCodiva As Integer = 0
    Dim dttTmp As New DataTable
    Dim strFDarave As String = ""
    Dim strErr As String = ""
    Dim bAdded As Boolean = False
    Dim bAddedTc As Boolean = False
    Dim i As Integer = 0
    Dim dttMcla As New DataTable            'datatable contenente i saldi del c/to lavoro
    Dim nRowCla As Integer = 0
    Dim lLotto As Integer = 0

    Dim strDesta As String = ""
    Dim strDaraveout As String = ""
    Dim strTipoTask As String = ""
    Dim strGestcost As String = ""
    Dim dBasecost As Decimal = 0
    Dim dBasecostun As Decimal = 0
    Dim dBasework As Decimal = 0
    Dim dBaseqta As Decimal = 0
    Dim strPrevGrup As String = ""
    Dim strRilasciato As String = ""
    Dim strSummary As String = ""
    Dim dWorkres As Decimal = 0
    'Dim dWorkrim as decimal
    Dim dQtares As Decimal = 0
    Dim dCostores As Decimal = 0
    'Dim dQtarim as decimal
    'Dim dCostorim as decimal

    Try
      If bDocumentoU Then strTipodoc = "U"
      With dtrMovprb
        '---------------------------------------------------------------------
        'Magazzini/Causali
        If bDocumentoU Then
          If NTSCInt(!mm_magaz) = NTSCInt(dttET.Rows(0)!et_magimp) Then
            nMag1 = NTSCInt(dttET.Rows(0)!et_magimp)
          Else
            nMag1 = NTSCInt(!mm_magaz)
          End If
          nMag2 = 0
          nCau1 = NTSCInt(dttET.Rows(0)!et_causcap)
          nCau2 = 0
        Else
          If bMantieniMagRigheOrdine Then
            nMag1 = NTSCInt(!mm_magaz)
            nMag2 = NTSCInt(!mm_magaz2)
          Else
            nMag1 = NTSCInt(dttET.Rows(0)!et_magaz)
            nMag2 = NTSCInt(dttET.Rows(0)!et_magaz2)
          End If
          If bMantieniCausaliRigheNota Then
            nCau1 = NTSCInt(!mm_causale)
            nCau2 = NTSCInt(!mm_causale2)
          Else
            nCau1 = NTSCInt(dttET.Rows(0)!et_causale)
          End If
          oCldBoll.ValCodiceDb(nCau1.ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
          If dttTmp.Rows.Count > 0 Then
            If Not bMantieniCausaliRigheNota Then nCau2 = NTSCInt(dttTmp.Rows(0)!tb_causec)
            Select Case dttTmp.Rows(0)!tb_testci.ToString
              Case " " : strFDarave = " "
              Case "A", "B" : strFDarave = "A"
              Case "D", "E" : strFDarave = "D"
            End Select
          Else
            strFDarave = " "
            nCau2 = 0
          End If
          dttTmp.Clear()
          If bMantieniCausaliRigheNota Then
            nCau2 = NTSCInt(!mm_causale2)
          End If
        End If    'If bDocumentoU Then

        '---------------------------------------------------------------------
        'Colli/quantità/flevas
        If bTuttoIlResiduo Then
          dQuant = NTSCDec(!mm_quant) - NTSCDec(!mm_nprquaeva)
          dColli = NTSCDec(!mm_colli) - NTSCDec(!mm_nprcoleva)
          strFlevasVersoNote = "S"
          'Il numero di note di prelievo da verificare, se è nuovo deve ignorare se stesso, altrimenti deve controllarle tutte
          Dim nNoteCheck As Integer = 0
          If bNew Then nNoteCheck = 1
          If bDocumentoU Then
            'negli scarichi di produzione il flag di evasione sull'impegno di prod.
            'lo uniforma alla riga padre (ord. prod.)
            strFlevasVersoOrdine = strFlevasDaeva
          Else
            If NTSCInt(!mm_ornum) = 0 Then
              'C'è solo una nota di prelievo, quello indicato nella nota è quello che devo proporre.
              strFlevasVersoOrdine = !mm_salcon.ToString
            Else
              oCldBoll.GetNoteDiPrelievoDaOrdine(strDittaCorrente, NTSCStr(!mm_ortipo), NTSCInt(!mm_oranno), NTSCStr(!mm_orserie), _
                                     NTSCInt(!mm_ornum), NTSCInt(!mm_orriga), dttNote)

              If dttNote.Rows.Count = nNoteCheck Then
                'C'è solo una nota di prelievo, quello indicato nella nota è quello che devo proporre.
                strFlevasVersoOrdine = !mm_salcon.ToString
              Else
                'Se ci sono delle righe da evadere l'evasione non può essere a saldo.
                If dttNote.Select("xx_evaso = 'N'").Length > nNoteCheck Then 'Maggiore di 1 perchè quella attuale non è ancora stata evasa
                  strFlevasVersoOrdine = "C"
                Else
                  'Se sono tutte evase allora bisogna evedere lo stato delle altre note di prelievo.
                  If dttNote.Select("xx_evaso = 'S' AND mm_salcon = 'S'").Length > 0 Or NTSCStr(!mm_salcon) = "S" Then
                    strFlevasVersoOrdine = "S"
                  Else
                    strFlevasVersoOrdine = "C"
                  End If
                End If
              End If
            End If
          End If
        Else
          'Sempre in meno
          dQuant = dQuaDaEva
          'se sull'ordine non sono indicati i colli non li riporta
          If NTSCDec(!mm_colli) = 0 And !mm_ump.ToString = !mm_unmis.ToString Then
            dColli = 0
          Else
            If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mm_codart.ToString, !mm_ump.ToString, _
                                  dQuant, NTSCDec(!mm_misura1), NTSCDec(!mm_misura2), NTSCDec(!mm_misura3), _
                                  !mm_unmis.ToString, dColli, strErr, 3) Then
              If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
              Return False
            End If
          End If
          strFlevasVersoNote = strFlevasDaevaPRB
          strFlevasVersoOrdine = strFlevasDaeva
        End If    'If bTuttoIlResiduo Then

        'Se abilitata opzione determina all'indietro i COLLI
        If bModifColliSuQuant Then
          If !mm_ump.ToString <> !mm_unmis.ToString And !mm_unmis.ToString <> " " Then
            If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mm_codart.ToString, !mm_ump.ToString, _
                      dQuant, NTSCDec(!mm_misura1), NTSCDec(!mm_misura2), NTSCDec(!mm_misura3), _
                      !mm_unmis.ToString, dColli, strErr, 3) Then
              If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
              Return False
            End If
          End If
        End If

        '-------------------------------------------------------------------
        'Codice esenzione
        If bRiportaCodeseInEvasione = False Then
          If nCodeseNota = NTSCInt(dttET.Rows(0)!et_codese) Then
            nCodiva = NTSCInt(!mm_codiva)
          ElseIf nCodeseNota > 0 And NTSCInt(dttET.Rows(0)!et_codese) = 0 Then
            nCodiva = NTSCInt(!ar_codiva)
          Else
            'ordine NON in esenzione, documento in esenzione
            nCodiva = NTSCInt(dttET.Rows(0)!et_codese)
          End If
        Else
          nCodiva = NTSCInt(!mm_codiva)
        End If
        '---------------------------------------------------------------------
        dPrezzo = NTSCDec(!mm_prezzo)
        dPrezvalc = NTSCDec(!mm_prezvalc)
        If NTSCDec(dttET.Rows(0)!et_valuta) <> 0 Then
          'Questo serve se il cambio del documento è diverso da quello dell'ordine
          dPrezzo = oCldDocu.ConvImpValuta(strDittaCorrente, True, NTSCDec(!mm_prezvalc), NTSCInt(dttET.Rows(0)!et_valuta), NTSCDate(dttET.Rows(0)!et_datdoc), NTSCDec(dttET.Rows(0)!et_cambio))
        End If
      End With    'With dtrMovprb

      '---------------------------------------------------------------------
      'Parte
      If nMagClav = 0 Or (nMagClav <> 0 And nMagClav <> nMag1) Or dtrMovprb!mm_codart.ToString = "D" Or dtrMovprb!mm_codart.ToString = "M" Or bRifClavManuale Then
        'If Not bConsMultiEvasRigheOrdNote Then
        'Controlla che la stessa riga di nota non sia già presente in 'strTabella'
        With dtrMovprb
          If NTSCStr(!mm_ortipo) = "Y" Then
            'gli scarichi collegati SUBISCONO l'opzione della riga di carico: se ho potuto inserire la riga di carico da prod
            'posso inserire anche le righe di scarico!!!
          Else
            If dttCorp.Select("ec_nptipo = '" & !mm_tipork.ToString & "' AND ec_npanno = " & !mm_anno.ToString & _
                              " AND ec_npserie = '" & !mm_serie.ToString & "' AND ec_npnum = " & !mm_numdoc.ToString & _
                              " AND ec_npriga = " & !mm_riga.ToString & " AND ec_ortipo = " & CStrSQL(!mm_ortipo) & _
                              " AND ec_oranno = " & !mm_oranno.ToString & " AND ec_orserie = " & CStrSQL(!mm_orserie) & _
                              " AND ec_ornum = " & !mm_ornum.ToString & " AND ec_orriga = " & !mm_orriga.ToString).Length > 0 Then
              Return False
            End If
          End If
          'Se è un padre kit salva nel campo mm_ktriga il campo mm_riga
          If !mm_flkit.ToString = "A" Or !mm_flkit.ToString = "S" Then bKitDaOrdini = True
        End With    'With dtrMovprb
        'End If

        'Scrive la riga
        bInImportRigheNota = True
        dttCorp.Rows.Add(dttCorp.NewRow)
        bAdded = True
        '----------------------------
        'inserisco la riga nel corpo del documento
        If Not ScriviRigaNota_InsertInto(dttCorp, dtrMovprb, bDocumentoU, strFlevasVersoOrdine, strFlevasVersoNote, _
                                         nCau1, nCau2, nMag1, nMag2, lRifRigaT, nCodiva, dColli, dQuant, _
                                         dPrezzo, dPrezvalc) Then Return False

        '----------------------------
        'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
        'lo fa già in automatico
        '----------------------------
        'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
        If Not ScriviRigaNota_SalvaRiga(bDocumentoU, dtrMovprb, dttCorp, dtrMovprbTc, bAddedTc, dtrSelord) Then Return False

        '----------------------------
        'se serve prendo le matricole dalla nota di prelievo per inserire in movmatr
        ScriviRigaNota_InsertMatricole(dttCorp.Rows(dttCorp.Rows.Count - 1))

      Else

        dQuantRES = ArrDbl(dQuant, 3)
        dColliRes = ArrDbl(dColli, 3)
        If bContoLavoroAttivo Then
          If Not ApriSaldiClavProd(dttET.Rows(0), NTSCStr(dtrMovprb!mm_codart), NTSCInt(dtrMovprb!mm_fase), nMagClav, dttMcla) Then
            'Si è verificato un errore determ. i saldi di c/lav
            'continuo non considerando carichi di c/lav
            GoTo SkipsaldiClav
          End If
        Else
          If Not ApriSaldiClav(dttET.Rows(0), NTSCStr(dtrMovprb!mm_codart), NTSCInt(dtrMovprb!mm_fase), nMagClav, dttMcla, _
                               NTSCInt(dtrMovprb!mm_commeca), bTMclav, lTmNumIT) Then
            'Si è verificato un errore determ. i saldi di c/lav
            'continuo non considerando carichi di c/lav
            GoTo SkipsaldiClav
          End If
        End If

        With dtrMovprb
          strUnmis = NTSCStr(dtrMovprb!mm_unmis)
          nRowCla = 0
          Do While nRowCla < dttMcla.Rows.Count And dQuantRES <> 0

            strUnmis = NTSCStr(!mm_unmis)
            If ArrDbl(NTSCDec(dttMcla.Rows(nRowCla)!Saldo), 3) >= dQuantRES Then
              dQuant = dQuantRES
              dColli = dColliRes
              dQuantRES = 0
              dColliRes = 0
            Else
              dQuant = ArrDbl(NTSCDec(dttMcla.Rows(nRowCla)!Saldo), 3)
              dQuantRES = ArrDbl(dQuantRES - dQuant, 3)
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mm_codart.ToString, !mm_ump.ToString, _
                                  dQuant, NTSCDec(!mm_misura1), NTSCDec(!mm_misura2), NTSCDec(!mm_misura3), _
                                  !mm_unmis.ToString, dColli, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mm_codart.ToString, !mm_ump.ToString, _
                                  dQuantRES, NTSCDec(!mm_misura1), NTSCDec(!mm_misura2), NTSCDec(!mm_misura3), _
                                  !mm_unmis.ToString, dColliRes, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
            End If
            If dColli < 0 Then dColli = 0
            If !mm_flkit.ToString = "A" Or !mm_flkit.ToString = "S" Then bKitDaOrdini = True
            'Riporta il lotto (tranne se l'opzione è abilitata)
            lLotto = NTSCInt(!mm_lotto)
            If Not bNonRiportareLottiDaCLav Then
              'Legge il lotto dalla riga (solo se la riga non l'ha già attribuito), possono essere nulli...
              If lLotto = 0 Then
                lLotto = LeggiLottoRiga(NTSCStr(dttMcla.Rows(nRowCla)!mm_cltipo), NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno), NTSCStr(dttMcla.Rows(nRowCla)!mm_clserie), NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum), NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga))
              End If
            End If

            'Scrive la riga
            bInImportRigheNota = True
            dttCorp.Rows.Add(dttCorp.NewRow)
            bAdded = True
            '----------------------------
            'inserisco la riga nel corpo del documento
            If Not ScriviRigaNota_InsertInto(dttCorp, dtrMovprb, bDocumentoU, strFlevasVersoOrdine, strFlevasVersoNote, _
                                             nCau1, nCau2, nMag1, nMag2, lRifRigaT, nCodiva, dColli, dQuant, _
                                             dPrezzo, dPrezvalc) Then Return False
            With dttCorp.Rows(dttCorp.Rows.Count - 1)
              !ec_lotto = lLotto
              If bContoLavoroAttivo Then
                !ec_cctipo = dttMcla.Rows(nRowCla)!mm_cltipo
                !ec_ccanno = NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno)
                !ec_ccserie = dttMcla.Rows(nRowCla)!mm_clserie
                !ec_ccnum = NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum)
                !ec_ccriga = NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga)
              Else
                !ec_cltipo = dttMcla.Rows(nRowCla)!mm_cltipo
                !ec_clanno = NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno)
                !ec_clserie = dttMcla.Rows(nRowCla)!mm_clserie
                !ec_clnum = NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum)
                !ec_clriga = NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga)
              End If
            End With
            '----------------------------
            'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
            'lo fa già in automatico
            '----------------------------
            'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
            If Not ScriviRigaNota_SalvaRiga(bDocumentoU, dtrMovprb, dttCorp, dtrMovprbTc, bAddedTc, dtrSelord) Then Return False

            '----------------------------
            'se serve prendo le matricole dalla nota di prelievo per inserire in movmatr
            ScriviRigaNota_InsertMatricole(dttCorp.Rows(dttCorp.Rows.Count - 1))

            nRowCla += 1
          Loop    'Do While nRowCla < dttMcla.Rows.Count And dQuantRES <> 0
          dttMcla.Clear()
        End With    'With dtrMovprb
SkipsaldiClav:

        If dQuantRES <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128701995416562500, "Articolo |" & dtrMovprb!mm_codart.ToString & "|, magazzino |" & nMag1.ToString & "|: non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato. Quantità mancante: |" & dQuantRES.ToString(oApp.FormatQta) & "|")))

          dQuant = dQuantRES
          dColli = dColliRes
          If dtrMovprb!mm_flkit.ToString = "A" Or dtrMovprb!mm_flkit.ToString = "S" Then bKitDaOrdini = True

          'Scrive la riga
          bInImportRigheNota = True
          dttCorp.Rows.Add(dttCorp.NewRow)
          bAdded = True
          '----------------------------
          'inserisco la riga nel corpo del documento
          If Not ScriviRigaNota_InsertInto(dttCorp, dtrMovprb, bDocumentoU, strFlevasVersoOrdine, strFlevasVersoNote, _
                                           nCau1, nCau2, nMag1, nMag2, lRifRigaT, nCodiva, dColli, dQuant, _
                                           dPrezzo, dPrezvalc) Then Return False
          '----------------------------
          'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
          'lo fa già in automatico
          '----------------------------
          'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
          If Not ScriviRigaNota_SalvaRiga(bDocumentoU, dtrMovprb, dttCorp, dtrMovprbTc, bAddedTc, dtrSelord) Then Return False

          '----------------------------
          'se serve prendo le matricole dalla nota di prelievo per inserire in movmatr
          ScriviRigaNota_InsertMatricole(dttCorp.Rows(dttCorp.Rows.Count - 1))

        End If    'If dQuantRES <> 0 Then
      End If    'If nMagClav = 0 Or (nMagClav <> 0 And nMagClav <> nMag1) Or dtrMovprb!mm_codart.ToString = "D" Or dtrMovprb!mm_codart.ToString = "M" Or bRifClavManuale Then

      bAdded = False

      Return True

    Catch ex As Exception
      If bAdded Then dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
      If bAddedTc Then dttECTC.Rows(dttECTC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMcla.Clear()
      bInImportRigheNota = False
    End Try
  End Function
  Public Overridable Function ScriviRigaNota_Pers(ByRef dtrNew As DataRow, ByRef dtrOld As DataRow) As Boolean
    Try
      'a disposizione per rive per caricare campi personalizzati di note prelievo in fase di import righe da nota prelievo
      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ScriviRigaNota_InsertInto(ByRef dttCorpo As DataTable, _
                                      ByRef dtrMovprb As DataRow, ByVal bDocumentoU As Boolean, _
                                      ByVal strFlevasVersoOrdine As String, ByVal strFlevasVersoNote As String, _
                                      ByVal nCau1 As Integer, ByVal nCau2 As Integer, ByVal nMag1 As Integer, _
                                      ByVal nMag2 As Integer, ByVal lRifRigaT As Integer, ByVal ncodiva As Integer, _
                                      ByVal dColli As Decimal, ByVal dQuant As Decimal, _
                                      ByVal dPrezzo As Decimal, ByVal dPrezvalc As Decimal) As Boolean
    Try
      Dim dMMValdisimp As Decimal = 0
      With dttCorpo.Rows(dttCorpo.Rows.Count - 1)
        'forzo la MovordOnAddNewRow
        !codditt = "."
        !codditt = strDittaCorrente
        !ec_causale = nCau1
        !ec_causale2 = nCau2
        !ec_magaz = nMag1
        !ec_magaz2 = nMag2
        !ec_codart = dtrMovprb!mm_codart.ToString
        !ec_fase = NTSCInt(dtrMovprb!mm_fase)
        !ec_descr = dtrMovprb!mm_descr
        !ec_desint = dtrMovprb!mm_desint
        !ec_codiva = ncodiva
        !ec_controp = dtrMovprb!mm_controp
        !ec_codtpro = dtrMovprb!mm_codtpro
        !ec_note = dtrMovprb!mm_note
        !ec_stasino = dtrMovprb!mm_stasino
        !ec_flkit = dtrMovprb!mm_flkit
        !ec_ktriga = NTSCInt(IIf(dtrMovprb!mm_flkit.ToString = "A" Or dtrMovprb!mm_flkit.ToString = "S", dtrMovprb!mm_riga, dtrMovprb!mm_ktriga))
        If NTSCStr(dtrMovprb!mm_matric) <> "" Then !ec_matric = dtrMovprb!mm_matric
        !ec_commen = dtrMovprb!mm_commen
        !ec_codnomc = dtrMovprb!mm_codnomc
        '------------------
        !ec_prtipo = IIf(bDocumentoU, "T", DBNull.Value)
        !ec_pranno = IIf(bDocumentoU, !ec_anno, 0)
        !ec_prserie = IIf(bDocumentoU, !ec_serie, DBNull.Value)
        !ec_prnum = IIf(bDocumentoU, !ec_numdoc, 0)
        !ec_prriga = IIf(bDocumentoU, lRifRigaT, 0)
        '------------------
        !ec_codcfam = dtrMovprb!mm_codcfam
        !ec_codcena = dtrMovprb!mm_codcena
        !ec_commeca = dtrMovprb!mm_commeca
        !ec_subcommeca = dtrMovprb!mm_subcommeca
        !ec_codcfam = dtrMovprb!mm_codcfam
        !ec_coddivi = dtrMovprb!mm_coddivi
        '------------------
        'quantità
        !ec_misura1 = NTSCDec(dtrMovprb!mm_misura1)
        !ec_misura2 = NTSCDec(dtrMovprb!mm_misura2)
        !ec_misura3 = NTSCDec(dtrMovprb!mm_misura3)
        !ec_unmis = NTSCStr(dtrMovprb!mm_unmis)
        !ec_colli = dColli
        !ec_quant = dQuant
        '------------------
        'prezzi
        !ec_flprznet = dtrMovprb!mm_flprznet
        !ec_umprz = dtrMovprb!mm_umprz

        'devo impostarlo prima di inserire i prezzi/sconti, diversamente se nell'ordine ho indicato prezzo = 0 
        'nella beforecolupdate di pm_taskid viene ricalcolato e non viene mantenutil prezzo dell'ordine!!!!
        !ec_pmtaskid = dtrMovprb!mm_pmtaskid

        If nRicalcPrezziNota <> 0 And (dttET.Rows(0)!et_tipork.ToString <> "T" Or (dttET.Rows(0)!et_tipork.ToString = "T" And bDocumentoU)) And NTSCDec(!ec_prezzo) <> 0 Then
          'il prezzo è già stato calcolato nella validazione dell'articolo
          'prendo quello dell'ordine solo se il prezzo ricalcolato è = 0
        Else
          !ec_prezivav = NTSCDec(dtrMovprb!mm_prezivav)
          !ec_preziva = NTSCDec(dtrMovprb!mm_preziva)
          !ec_prezvalc = dPrezvalc
          !ec_prezzo = dPrezzo
          !ec_prelist = NTSCDec(dtrMovprb!mm_prelist)
        End If    'If nRicalcPrezziOrd <> 0 And (dttET.Rows(0)!et_tipork.ToString <> "T" Or (dttET.Rows(0)!et_tipork.ToString = "T" And bDocumentoU)) Then

        If (nRicalcScontiNota <> 0 And dttET.Rows(0)!et_tipork.ToString <> "T") And _
           (NTSCDec(!ec_scont1) <> 0 Or NTSCDec(!ec_scont2) <> 0 Or NTSCDec(!ec_scont3) <> 0 _
           Or NTSCDec(!ec_scont4) <> 0 Or NTSCDec(!ec_scont5) <> 0 Or NTSCDec(!ec_scont6) <> 0) Then
          'gli sconti sono stati calcolati nella validazione dell'articolo
          'prendo quello dell'ordine solo se tutti gli sconti sono = 0
        Else
          !ec_scont1 = NTSCDec(dtrMovprb!mm_scont1)
          !ec_scont2 = NTSCDec(dtrMovprb!mm_scont2)
          !ec_scont3 = NTSCDec(dtrMovprb!mm_scont3)
          !ec_scont4 = NTSCDec(dtrMovprb!mm_scont4)
          !ec_scont5 = NTSCDec(dtrMovprb!mm_scont5)
          !ec_scont6 = NTSCDec(dtrMovprb!mm_scont6)
          !ec_scontp = NTSCDec(dtrMovprb!mm_scontp)
          !ec_scontv = 0  'FISSO 0: se nell'impegno ho fatto un abbuono a valore e la quantità di riga è dviersa da 1, quando evado parzialmente la quantità andrebbe riproporzionalizzato. questo sconto è compilato solo da veboll/retail su documenti no IC o note di prel
        End If

        If dtrMovprb!mm_flprznet.ToString = "S" Then
          !ec_scont1 = 0
          !ec_scont2 = 0
          !ec_scont3 = 0
          !ec_scont4 = 0
          !ec_scont5 = 0
          !ec_scont6 = 0
        End If

        If bDocumentoU Then
          'negli scarichi a produzione / impegni di produzione gli sconti sono sempre = 0
          !ec_scont1 = 0
          !ec_scont2 = 0
          !ec_scont3 = 0
          !ec_scont4 = 0
          !ec_scont5 = 0
          !ec_scont6 = 0
          !ec_scontp = 0
          !ec_scontv = 0
        End If

        !ec_codrepr1 = dtrMovprb!mm_codrepr1
        !ec_codrepr2 = dtrMovprb!mm_codrepr2
        !ec_codrepr3 = dtrMovprb!mm_codrepr3
        !ec_codrepr4 = dtrMovprb!mm_codrepr4
        !ec_codrepr5 = dtrMovprb!mm_codrepr5
        !ec_codrepr6 = dtrMovprb!mm_codrepr6
        !ec_codrepr1out = dtrMovprb!mm_codrepr1out
        !ec_codrepr2out = dtrMovprb!mm_codrepr2out
        !ec_codrepr3out = dtrMovprb!mm_codrepr3out
        !ec_codrepr4out = dtrMovprb!mm_codrepr4out
        !ec_codrepr5out = dtrMovprb!mm_codrepr5out
        !ec_codrepr6out = dtrMovprb!mm_codrepr6out

        !ec_tiporiga = dtrMovprb!mm_tiporiga
        !ec_flprzmod = dtrMovprb!mm_flprzmod

        !ec_flsc1mod = dtrMovprb!mm_flsc1mod
        !ec_flsc2mod = dtrMovprb!mm_flsc2mod
        !ec_flsc3mod = dtrMovprb!mm_flsc3mod
        !ec_flsc4mod = dtrMovprb!mm_flsc4mod
        !ec_flsc5mod = dtrMovprb!mm_flsc5mod
        !ec_flsc6mod = dtrMovprb!mm_flsc6mod

        !ec_flprov1mod = dtrMovprb!mm_flprov1mod
        !ec_flprov2mod = dtrMovprb!mm_flprov2mod
        !ec_scpercdiff = dtrMovprb!mm_scpercdiff
        !ec_prov1percdiff = dtrMovprb!mm_prov1percdiff
        !ec_prov2percdiff = dtrMovprb!mm_prov2percdiff

        If (nRicalcProvvNota <> 0 AndAlso dttET.Rows(0)!et_tipork.ToString <> "T") AndAlso _
           (NTSCDec(!ec_provv) <> 0 OrElse NTSCDec(!ec_provv2) <> 0) Then
          'le provvigioni sono state calcolate nella validazione dell'articolo
          'prendo quello dell'ordine solo se sono = 0
        Else
          !ec_ricimp = dtrMovprb!mm_flstat
          !ec_provv = dtrMovprb!mm_provv
          !ec_provv2 = dtrMovprb!mm_provv2
        End If

        !ec_proorig = dtrMovprb!mm_proorig
        !ec_percvst = dtrMovprb!mm_percvst
        !ec_coldisimp = dtrMovprb!mm_coldisimp
        !ec_qtadisimp = dtrMovprb!mm_qtadisimp

        '!ec_valdisimp = dtrMovprb!mm_valdisimp
        'dtrMovprb!mm_valdisimp può contenere un dato non corretto. ne è un esempio il caso di nota di prelievo emessa in conto, salvata e successivamente modificata nella qta per evadere totalmente l'ordine e risalvata 
        'ridetermino valdisimp come viene fatto per RscriviRigaOrd_insertInto
        'NON FUNZIONA SE RISPETTO ALL'ORDINE NELLA NOTA DI PRELIEVO HO CAMBIATO PREZZO E/O SCONTI RISPETTO ALL'ORDINE
        If NTSCStr(!ec_umprz) <> "S" Then
          dMMValdisimp = ArrDbl(ArrDbl(dPrezzo * dQuant / NTSCDec(!ec_perqta) * (100 - NTSCDec(!ec_scont1)) / 100 * (100 - NTSCDec(!ec_scont2)) / 100 * (100 - NTSCDec(!ec_scont3)) / 100 * (100 - NTSCDec(!ec_scont4)) / 100 * (100 - NTSCDec(!ec_scont5)) / 100 * (100 - NTSCDec(!ec_scont6)) / 100 * (100 - NTSCDec(!ec_scontp)) / 100 - NTSCDec(!ec_scontv), oCldBoll.TrovaNdec(0)) * (100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100, oCldBoll.TrovaNdec(0))
        Else
          dMMValdisimp = ArrDbl(ArrDbl(dPrezzo * dColli / NTSCDec(!ec_perqta) * (100 - NTSCDec(!ec_scont1)) / 100 * (100 - NTSCDec(!ec_scont2)) / 100 * (100 - NTSCDec(!ec_scont3)) / 100 * (100 - NTSCDec(!ec_scont4)) / 100 * (100 - NTSCDec(!ec_scont5)) / 100 * (100 - NTSCDec(!ec_scont6)) / 100 * (100 - NTSCDec(!ec_scontp)) / 100 - NTSCDec(!ec_scontv), oCldBoll.TrovaNdec(0)) * (100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100, oCldBoll.TrovaNdec(0))
        End If
        !ec_valdisimp = dMMValdisimp
        !ec_codclie = dtrMovprb!mm_codclie

        If bNonEreditareDateCompDaOrd = True Then
          If nDatiniCompMese = -1 Then
            !ec_datini = NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1) 'propongo il primo del mese 
            !ec_datfin = NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1) 'propongo il primo del mese 
          Else
            !ec_datini = dttET.Rows(0)!et_datdoc
            !ec_datfin = dttET.Rows(0)!et_datdoc
          End If
        Else
          !ec_datini = dtrMovprb!mm_datini
          !ec_datfin = dtrMovprb!mm_datfin
        End If
        '------------------
        !ec_ortipo = dtrMovprb!mm_ortipo
        !ec_oranno = dtrMovprb!mm_oranno
        !ec_orserie = dtrMovprb!mm_orserie
        !ec_ornum = dtrMovprb!mm_ornum
        !ec_orriga = dtrMovprb!mm_orriga
        !ec_salcon = strFlevasVersoOrdine
        If NTSCStr(dtrMovprb!mo_ultagg) = "" Then
          !xxo_orultagg = NTSCDate(IntSetDate("01/01/1900"))
        Else
          !xxo_orultagg = dtrMovprb!mo_ultagg
        End If
        '------------------
        !ec_nptipo = dtrMovprb!mm_tipork
        !ec_npanno = dtrMovprb!mm_anno
        !ec_npserie = dtrMovprb!mm_serie
        !ec_npnum = dtrMovprb!mm_numdoc
        !ec_npriga = dtrMovprb!mm_riga
        !ec_ubicaz = dtrMovprb!mm_ubicaz
        !ec_lotto = dtrMovprb!mm_lotto
        !ec_npcoldis = dColli
        !ec_npqtadis = dQuant
        !ec_npvaldis = ArrDbl(ArrDbl(NTSCDec(!ec_prezzo) * dQuant / NTSCDec(!ec_perqta) * (100 - NTSCDec(!ec_scont1)) / 100 * (100 - NTSCDec(!ec_scont2)) / 100 * (100 - NTSCDec(!ec_scont3)) / 100 * (100 - NTSCDec(!ec_scont4)) / 100 * (100 - NTSCDec(!ec_scont5)) / 100 * (100 - NTSCDec(!ec_scont6)) / 100 * (100 - NTSCDec(!ec_scontp)) / 100 - NTSCDec(!ec_scontv), oCldBoll.TrovaNdec(0)) * (100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100, oCldBoll.TrovaNdec(0))
        !ec_npsalcon = strFlevasVersoNote
        !xxo_npultagg = dtrMovprb!mm_ultagg

        '------------------
        If bModPM Then
          If Not ScriviRigaOrdNota_InsertIntoPM(dttCorpo, bDocumentoU, lRifRigaT, NTSCInt(!ec_commeca), NTSCInt(!ec_pmtaskid)) Then
            dttCorpo.Rows(dttCorpo.Rows.Count - 1).Delete()
            Return False
          End If
        End If

        !ec_tctaglia = dtrMovprb!mo_tctaglia
        !ec_tcindtagl = dtrMovprb!mo_tcindtagl
        If bDocumentoU Then
          !xxo_tcindtaglf = dtrMovprb!xxo_tcindtaglf
          !xxo_tctagliaf = dtrMovprb!xxo_tctagliaf
        End If
      End With    'With dttEC.Rows(dttEC.Rows.Count - 1)

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      'gestione errori particolare.... deve girare l'errore come se la routine fosse dentro alla 'ScriviRigaNota'
      Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
    End Try
  End Function
  Public Overridable Function ScriviRigaNota_InsertMatricole(ByRef dtrEc As DataRow) As Boolean
    Dim dttMatr As New DataTable
    Dim dtrT() As DataRow = Nothing
    Dim dQtaRes As Decimal = 0
    Dim nRiga As Integer = 0
    Try
      If dtrEc!xxo_gestmatr.ToString = "N" Then Return True
      If NTSCDec(dtrEc!ec_quant) = 0 Then Return True

      '----------------------
      'determino le matricole presenti nella riga della nota di prelievo
      'al netto di quante state già inserite in altri documenti definitivi
      If Not oCldBoll.GetMovmatrRigaNotaPrel(strDittaCorrente, NTSCInt(dtrEc!ec_npanno), _
                                  dtrEc!ec_npserie.ToString, NTSCInt(dtrEc!ec_npnum), _
                                  NTSCInt(dtrEc!ec_npriga), dttET.Rows(0)!et_tipork.ToString, _
                                  NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                  NTSCInt(dttET.Rows(0)!et_numdoc), dttMatr) Then Return False
      If dttMatr.Rows.Count = 0 Then Return True

      '----------------------
      'tolgo le matricole già inserite in questo documento
      'per ogni riga di documento, trovo le righe con lo stesso riferimento alla nota di prelievo
      'e per ogni riga decurto le matricole già evase
      If dttMatr.Rows.Count = 0 Then Return True

      For Each dtrMMT As DataRow In dttMatr.Rows
        dtrT = dtrEc.Table.Select("ec_nptipo = 'W' AND ec_npanno = " & dtrEc!ec_npanno.ToString & _
                                  " AND ec_npserie = " & CStrSQL(dtrEc!ec_npserie) & _
                                  " AND ec_npnum = " & dtrEc!ec_npnum.ToString & _
                                  " AND ec_npriga = " & dtrEc!ec_npriga.ToString)
        For Each dtrT1 As DataRow In dtrT
          For Each dtrT2 As DataRow In dttMOVMATR.Select("mma_tipork = " & CStrSQL(dtrT1!ec_tipork) & _
                                  " AND mma_anno = " & dtrT1!ec_anno.ToString & _
                                  " AND mma_serie = " & CStrSQL(dtrT1!ec_serie) & _
                                  " AND mma_numdoc = " & dtrT1!ec_numdoc.ToString & _
                                  " AND mma_riga = " & dtrT1!ec_riga.ToString & _
                                  " AND mma_matric = " & CStrSQL(dtrMMT!mma_matric))
            dtrMMT!mma_quant = NTSCDec(dtrMMT!mma_quant) - NTSCDec(dtrT2!mma_quant)
            If NTSCDec(dtrMMT!mma_quant) <= 0 Then
              dtrMMT.Delete()
              GoTo PASSA
            End If
          Next    'For Each dtrT2 As DataRow
        Next    'For Each dtrT1 As DataRow In dtrT
PASSA:
      Next    'For Each dtrMMT As DataRow In dttMatr.Rows
      dttMatr.AcceptChanges()

      If dttMatr.Rows.Count = 0 Then Return True

      '----------------------
      'inserisco le matricole restanti, proponendo in base a mma_riga 
      '(visto che non si può fare di meglio)
      dQtaRes = NTSCDec(dtrEc!ec_quant)
      nRiga = 0
      For Each dtrMatr As DataRow In dttMatr.Select("", "mma_rigaa")
        dtrT = dttMOVMATR.Select("", "mma_rigaa DESC")
        If dtrT.Length > 0 Then nRiga = NTSCInt(dtrT(0)!mma_rigaa)
        nRiga += 1
        dttMOVMATR.Rows.Add(dttMOVMATR.NewRow)
        With dttMOVMATR.Rows(dttMOVMATR.Rows.Count - 1)
          !codditt = "."
          !codditt = strDittaCorrente
          !mma_tipork = dtrEc!ec_tipork
          !mma_anno = dtrEc!ec_anno
          !mma_serie = dtrEc!ec_serie
          !mma_numdoc = dtrEc!ec_numdoc
          !mma_riga = dtrEc!ec_riga
          !mma_rigaa = nRiga
          !mma_matric = dtrMatr!mma_matric
          !mma_note = dtrMatr!mma_note
          If NTSCDec(dtrMatr!mma_quant) > dQtaRes Then
            !mma_quant = dQtaRes
            dQtaRes = 0
          Else
            !mma_quant = dtrMatr!mma_quant
            dQtaRes -= NTSCDec(dtrMatr!mma_quant)
          End If
        End With    'With dttMOVMATR.Rows(dttMOVMATR.Rows.Count - 1)
        dttMOVMATR.Rows(dttMOVMATR.Rows.Count - 1).AcceptChanges()
        If dQtaRes = 0 Then Exit For
      Next    'For Each dtrMatr As DataRow In dttMatr.Rows

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttMatr.Clear()
    End Try
  End Function
  Public Overridable Function ScriviRigaNota_SalvaRiga(ByVal bDocumentoU As Boolean, ByVal dtrMovprb As DataRow, _
                                                        ByRef dttCorp As DataTable, ByRef dtrMovprbTc() As DataRow, _
                                                        ByRef bAddedTc As Boolean, ByRef dtrSelord As DataRow) As Boolean
    'dtrSelord: se la ScriviRigaNota viene chiamata dalla ScriviRigaOrdine le quantità da prelevare sono quelle dello zoom ordini/zoom righe ordini
    Dim i As Integer = 0
    Try

      '-----------------------------------------------------------------------------------------
      'se articolo TCO completo il dettaglio TCO
      'griglia TCO gestita solo su griglia principale, non su scarichi 
      If bModTCO And bDocumentoU = False Then
        If dtrMovprbTc.Length > 0 Then
          bAddedTc = True
          With dttECTC.Rows(dttECTC.Rows.Count - 1)
            For i = 1 To 24
              If dtrMovprbTc Is Nothing Then    'prendo le quantità dallo zoom righe ordini
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_quant" & i.ToString("00")) = dtrSelord("tt_quadaeva" & i.ToString("00"))
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_qtadis" & i.ToString("00")) = dtrSelord("tt_quadaeva" & i.ToString("00"))
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_npqtadis" & i.ToString("00")) = 0
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_nprquae" & i.ToString("00")) = 0
              Else
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_quant" & i.ToString("00")) = NTSCDec(dtrMovprbTc(0)("mm_quant" & i.ToString("00"))) - NTSCDec(dtrMovprbTc(0)("mm_nprquae" & i.ToString("00")))
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_qtadis" & i.ToString("00")) = dtrMovprbTc(0)("mm_qtadis" & i.ToString("00"))
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_npqtadis" & i.ToString("00")) = dtrMovprbTc(0)("mm_npqtadis" & i.ToString("00"))
                dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_nprquae" & i.ToString("00")) = dtrMovprbTc(0)("mm_nprquae" & i.ToString("00"))
              End If
            Next
          End With
        End If

      End If

      If Not ScriviRigaNota_Pers(dttCorp.Rows(dttCorp.Rows.Count - 1), dtrMovprb) Then
        dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
        Return False
      End If

      If bDocumentoU Then
        If Not CorpoImpRecordSalva(dttCorp.Rows.Count - 1, False, Nothing) Then
          dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
          Return False
        End If
      Else
        If Not RecordSalva(dttCorp.Rows.Count - 1, False, Nothing) Then
          dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
          Return False
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      'gestione errori particolare.... deve girare l'errore come se la routine fosse dentro alla 'ScriviRigaNota'
      Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
    End Try
  End Function

  Public Overridable Function ImportaCorrispettivoInFatFigurativa(ByVal dttCorrispettivi As DataTable) As Boolean
    Try
      If Not dttEC.Columns.Contains("xx_rifcorr") Then dttEC.Columns.Add("xx_rifcorr", GetType(String))

      For Each dtrCorr As DataRow In dttCorrispettivi.Rows
        If Not ImportaCorrispettivoInFatFigurativa_TestPreElabora(dtrCorr) Then Continue For

        'non va caricato il dettaglio delle righe, ma le singole testate spezzate per codice iva 
        '(quindi va controllato lo spaccato del castelletto iva).
        For z As Integer = 1 To 8
          If NTSCInt(dtrCorr("tm_codiva_" & z)) = 0 Then Continue For 'Se non è impostato non devo aggiungere una nuova riga
          'Le righe già importate vengono escluse
          If dttEC.Select("xx_rifcorr = " & CStrSQL(NTSCStr(dtrCorr!tm_tipork) & "|" & NTSCStr(dtrCorr!tm_anno) & "|" & NTSCStr(dtrCorr!tm_serie) & _
                                      "|" & NTSCStr(dtrCorr!tm_numdoc) & "|" & NTSCInt(dtrCorr("tm_codiva_" & z)))).Length = 0 Then

            If Not ImportaCorrispettivoInFatFigurativa_AggiungiRiga(dtrCorr, NTSCInt(dtrCorr("tm_codiva_" & z)), NTSCDec(dtrCorr("tm_imponib_" & z)), _
                                                                             NTSCDec(dtrCorr("tm_imposta_" & z))) Then Return False

            If Not RecordSalva(dttEC.Rows(dttEC.Rows.Count - 1), False, Nothing) Then Return False
          End If
        Next
        'Aggiunge l'abbuono del corrispettivo al documento
        dttET.Rows(0)!et_abbuono = NTSCDec(dttET.Rows(0)!et_abbuono) + NTSCDec(dtrCorr!tm_abbuono)
      Next

      With dttET.Rows(0)
        !et_pagato = NTSCDec(!et_totdoc) - NTSCDec(!et_abbuono) - NTSCDec(!et_totomag)
      End With

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ImportaCorrispettivoInFatFigurativa_TestPreElabora(ByVal dtrCorr As DataRow) As Boolean
    Try
      Dim strRiferim As String = oApp.Tr(Me, 130671243846153229, "Corrispettivo |" & NTSCInt(dtrCorr!tm_anno) & " " & CStrSQL(dtrCorr!tm_serie) & " " & NTSCInt(dtrCorr!tm_numdoc) & "|")

      'Test preliminari (chiamata da veboll i controlli sono già stati fatti a monte, ma per sicurezza meglio rifarli se viene chiamata da altri programmi)
      If NTSCInt(dtrCorr!tm_conto) <> NTSCInt(dttET.Rows(0)!et_conto) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130628698799349095, "Non è possibile importare:" & vbCrLf & _
                                                                              strRiferim & vbCrLf & _
                                                                              "Perchè la fattura figurativa è intestato ad un conto diverso.")))
        Return False
      End If

      If NTSCInt(dtrCorr!tm_valuta) > 0 OrElse NTSCInt(dtrCorr!tm_codagen) > 0 OrElse NTSCInt(dtrCorr!tm_codagen2) > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130628698828762658, "Non è possibile importare:" & vbCrLf & _
                                                                              strRiferim & vbCrLf & _
                                                                              "Perchè è stato impostato il codice agente o la valuta.")))
        Return False
      End If

      If NTSCStr(dtrCorr!tm_flfatt) = "S" Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130628698845136716, "Non è possibile importare:" & vbCrLf & _
                                                                              strRiferim & vbCrLf & _
                                                                              "Perchè risulta già fatturato.")))
        Return False
      End If

      If NTSCDec(dtrCorr!tm_totdoc) - NTSCDec(dtrCorr!tm_abbuono) - NTSCDec(dtrCorr!tm_totomag) + NTSCDec(dtrCorr!tm_resto) <> NTSCDec(dtrCorr!tm_pagato) + NTSCDec(dtrCorr!tm_pagato2) Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130628698870657785, "Non è possibile importare:" & vbCrLf & _
                                                                              strRiferim & vbCrLf & _
                                                                              "Perchè non è stato completamente incassato.")))
        Return False
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ImportaCorrispettivoInFatFigurativa_AggiungiRiga(ByVal dtrCorr As DataRow, ByVal lCodiva As Integer, _
                                                                               ByVal dImponib As Decimal, ByVal dImposta As Decimal) As Boolean
    Try
      dttEC.Rows.Add()
      With dttEC.Rows(dttEC.Rows.Count - 1)
        !codditt = "."
        !codditt = strDittaCorrente
        !ec_codart = "D"
        Dim dttScontrino As DataTable = oCldBoll.EstremiCorrispettivo(New NTSDoc(NTSCStr(dtrCorr!codditt), NTSCStr(dtrCorr!tm_tipork), _
                                                                      NTSCInt(dtrCorr!tm_anno), NTSCStr(dtrCorr!tm_serie), NTSCInt(dtrCorr!tm_numdoc)))
        If dttScontrino.Rows.Count = 0 OrElse NTSCInt(dttScontrino.Rows(0)!tm_numsco) = 0 Then
          !ec_descr = oApp.Tr(Me, 130671243846153220, "Rif. corr. n.|" & NTSCInt(dtrCorr!tm_numdoc) & _
                                                      NTSCStr(IIf(NTSCStr(dtrCorr!tm_serie).Trim <> "", "/" & NTSCStr(dtrCorr!tm_serie), "")) & _
                                                      "| del |" & NTSCDate(dtrCorr!tm_datdoc).ToShortDateString() & "|")
        Else
          !ec_descr = oApp.Tr(Me, 130651915544610263, "Rif. scontrino n.|" & NTSCInt(dttScontrino.Rows(0)!tm_numsco) & _
                                                      "| del |" & NTSCDate(dttScontrino.Rows(0)!tm_datsco).ToShortDateString() & "|")
        End If
        !ec_quant = 1
        !ec_codiva = lCodiva
        If ntscstr(dttEt.rows(0)!et_scorpo) = "S" Then
          !ec_preziva = dImponib + dImposta
        Else
          !ec_prezzo = dImponib
        End If
        If NTSCInt(!ec_magaz) = 0 Then !ec_magaz = dtrCorr!tm_magaz
        'I riferimenti alle testate dei corrispettivi che dovranno essere evasi (serve in fase di salvataggio)
        !xx_rifcorr = NTSCStr(dtrCorr!tm_tipork) & "|" & NTSCStr(dtrCorr!tm_anno) & "|" & NTSCStr(dtrCorr!tm_serie) & "|" & NTSCStr(dtrCorr!tm_numdoc) & "|" & lCodiva
      End With

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function





  Public Overridable Function ScriviRigaOrdNota_InsertIntoPM(ByRef dttCorpo As DataTable, _
                                                    ByVal bDocumentoU As Boolean, _
                                                    ByVal lRifRigaT As Integer, ByVal lCommeca As Integer, _
                                                    ByVal lPmtaskid As Integer) As Boolean

    Dim strDesta As String = ""
    Dim strDaraveout As String = ""
    Dim strTipoTask As String = ""
    Dim strGestcost As String = ""
    Dim dBasecost As Decimal = 0
    Dim dBasecostun As Decimal = 0
    Dim dBasework As Decimal = 0
    Dim dBaseqta As Decimal = 0
    Dim strPrevGrup As String = ""
    Dim strRilasciato As String = ""
    Dim strSummary As String = ""
    Dim dWorkres As Decimal = 0
    Dim dQtares As Decimal = 0
    Dim dCostores As Decimal = 0

    Try
      '--- adesso modulo PM : riempie i campi PM ---
      With dttCorpo.Rows(dttCorpo.Rows.Count - 1)
        dFQtarim = 0
        dFCostorim = 0
        dFQtares = 0
        dFCostores = 0
        dFQtadisda = 0
        dFValdisda = 0
        dFQtadis = 0
        dFValdis = 0
        strFSalcon = "C"
        strDesta = ""
        '''
        strFPrevgrup = "N"
        strFGestcost = "1"
        '''
        If (lPmtaskid <> 0) And (dttET.Rows(0)!et_tipork.ToString <> "T") And (dttET.Rows(0)!et_tipork.ToString <> "U") Then
          If Not oCldBoll.LegTaskGr(strDittaCorrente, NTSCStr(lCommeca), NTSCStr(lPmtaskid), "TASKS", _
                                        0, False, strOut, strDaraveout, strTipoTask, strGestcost, strPrevGrup, _
                                        strSummary, Nothing) Then
            Return False
          Else
            'Rimappiamo il Segno Dare/Avere per le righe di Ricavo
            'che sono passate dagli ordini...
            Select Case strDaraveout
              Case "R", "S"
                strDaravedef = "A"
              Case Else
                strDaravedef = strDaraveout
            End Select
            '...e per i Task di tipo 'Spediz a cli./cant.'
            'che sono passati dagli ordini
            'If strTipoTask = "6" Then strDaravedef = "A"
            '-- --- ----
            If Not (strDaravedef = strFDarave) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443060733632813, "Task |" & NTSCStr(lPmtaskid) & "| ha un segno Dare/avere di C.A. non compatibile con quello della causale! Non ammesso.")))
              Return False
            End If
            If (strPrevGrup = "S") Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443060747148438, "Task |" & NTSCStr(lPmtaskid) & "| di preventivazione di gruppo non compatibile con il tipo di registrazioni correnti")))
              Return False
            End If
            If (strSummary = "S") Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443060761708985, "Task |" & NTSCStr(lPmtaskid) & "| di gruppo non compatibile con il tipo di registrazioni correnti")))
              Return False
            Else
              strDesta = strOut
              If Not (oCldBoll.Caricattproesebappo(strDittaCorrente, lIIttproesebappo, lCommeca, _
                                                    lPmtaskid, Nothing)) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061200029297, "Problemi a caricare i record di proeseb su ttproesebappo  ! ")))
                Return False
              End If
              ' adesso legge gli altri campi da task
              lEseddaes = 0
              If Not (oCldBoll.LegTasksCompleteDao(strDittaCorrente, "TTPROESEC", lIIttproesebappo, lIItttasks, _
                                                  lCommeca, lPmtaskid, _
                                                  lEseddaes, IntSetDate("31/12/2099"), bPMControllaBaseCostMG, _
                                                  strDesta, strDaraveout, strTipoTask, strGestcost, dQtares, _
                                                  dWorkres, dCostores, dBasecost, dBasecostun, dBasework, dBaseqta, _
                                                  strPrevGrup, False, strRilasciato)) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061222421875, "Sul Task |" & NTSCStr(lPmtaskid) & "| è stato rilevato  un problema in LegTaskCompleteDao ! ")))
                Return False
              Else
                ' prima testo se si può accettare
                If Not ((strTipoTask = "1" Or strTipoTask = "3" Or strTipoTask = "5") Or _
                        (strTipoTask = "7" And (dttET.Rows(0)!et_tipork.ToString = "B" Or dttET.Rows(0)!et_tipork.ToString = "W")) Or _
                        (strTipoTask = "8" And (dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_tipork.ToString = "B" Or dttET.Rows(0)!et_tipork.ToString = "C" Or dttET.Rows(0)!et_tipork.ToString = "W"))) Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061241464844, "Task |" & NTSCStr(lPmtaskid) & "| non compatibile con il tipo di registrazioni correnti")))
                  Return False
                End If
                If Not (strGestcost = "2" Or strGestcost = "3") Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061262744141, "Task |" & NTSCStr(lPmtaskid) & "| con tipo gest. costi non compatibile con il tipo di registrazioni correnti")))
                  Return False
                End If
                If dCostores = 0 And dQtares = 0 Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061277226563, "Task |" & NTSCStr(lPmtaskid) & "| già completato (costo residuo = 0), non evadibile")))
                  Return False
                End If
                If bPMSoloTaskRilasciatiMG Then
                  If Not (strRilasciato = "S") Then
                    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129443061291386719, "Task |" & NTSCStr(lPmtaskid) & "| non ancora rilasciato , non evadibile")))
                    Return False
                  End If
                End If
                'Ok, inizializzo altri campi
                strFPrevgrup = strPrevGrup
                strFGestcost = strGestcost
                dFCostores = dCostores
                dFQtares = dQtares
                ' adesso determino fSalcon e altri campi da scrivere
                SistemaPMSalconDaQta_VarF(NTSCDec(!ec_quant), NTSCDec(!ec_valore)) ' adattare!!!
              End If
            End If
          End If
          If Not CheckCongruenzaDati(lCommeca, lPmtaskid, NTSCDec(!ec_valore)) Then
            Return False
          End If
        End If

      End With    'With dttCorpo.Rows(dttCorpo.Rows.Count - 1)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function ImportaOrdini(ByVal strTipo As String, ByRef dttOrd As DataTable) As Boolean
    'strTipo: T = testate, R = righe, B = righe con barcode
    Dim evnt As NTSEventArgs = Nothing
    Dim strMess As String = ""
    Dim strHead As String = ""
    Dim i As Integer = 0
    Dim strTipodoc As String = ""
    Dim dttTd As New DataTable
    Dim bConsMultiEvasRigheOrdNoteORIGIN As Boolean = False
    Dim nMagazCLav As Integer = -1
    Dim bContoLavAtt As Boolean = False
    Dim bAltrui As Boolean = False
    Dim dttSelord As New DataTable

    Dim nMagazCLavLoc As Integer = 0
    Dim bContoLavAttLoc As Boolean = False

    Dim strTipord As String = ""
    Dim nAnno As Integer = 0
    Dim strSerie As String = ""
    Dim lNumord As Integer = 0
    Dim dttTmp As New DataTable

    Dim dttMovord As New DataTable
    Dim dttMovordTc As New DataTable
    Dim dttMovordY As New DataTable
    Dim dttAttAss As New DataTable

    Dim dQuaRes As Decimal = 0
    Dim bTuttoIlResiduo As Boolean = False

    Dim dQuaDaEva As Decimal = 0
    Dim strFlevasDaeva As String = ""
    Dim lOut As Integer = 1
    Dim dtrOrdTc() As DataRow = Nothing
    Dim dRapp As Decimal = 0
    Dim bAdded As Boolean = False

    Dim nRigaStart As Integer = -1

    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim strMsg As String = ""

    Dim bEreditaDatiChiamata As Boolean = False
    Dim bAumentoQta As Boolean = False

    '-Per P.M.
    Dim dtrPm() As DataRow = Nothing
    Dim nDtrPm As Integer = 0
    Dim snatest1 As New DataTable
    Dim strDesta As String = ""
    Dim strSummary As String = ""
    Dim strRilasciato As String = ""
    Dim strDaraveout As String = ""
    Dim strTipoTask As String = ""
    Dim strGestcost As String = ""
    Dim dBasecost As Decimal = 0
    Dim dBasecostun As Decimal = 0
    Dim dBasework As Decimal = 0
    Dim dBaseqta As Decimal = 0
    Dim strPrevGrup As String = ""
    Dim dWorkres As Decimal = 0
    Dim dQtares As Decimal = 0
    Dim dCostores As Decimal = 0

    Dim lRigaIniz As Integer = 0
    Dim bTipoBFProforma As Boolean = False
    Dim bMessaggioSuMagimp As Boolean = False

    Try
      '--------------------------------------------------------------------------------------------------------------
      bMantieniDatiDiTestata = False
      '--------------------------------------------------------------------------------------------------------------
      '--- Controlla che il Tipo Bolla/Fattura di testata sia 'Proforma' o meno
      '--------------------------------------------------------------------------------------------------------------
      If ocldBase.ValCodiceDb(dttET.Rows(0)!et_tipobf.ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp) = True Then
        If dttTmp.Rows.Count > 0 AndAlso NTSCStr(dttTmp.Rows(0)!tb_tprofor) = "S" Then bTipoBFProforma = True
      End If
      dttTmp.Clear()
      dttTmp.Dispose()
      '--------------------------------------------------------------------------------------------------------------
      'Annulla l'effetto della opzione di registro bConsMultiEvasRigheOrdNote
      'deve operare solo sa 'seleziona righe ordini
      If strTipo <> "R" Then
        bConsMultiEvasRigheOrdNoteORIGIN = bConsMultiEvasRigheOrdNote
        bConsMultiEvasRigheOrdNote = False
      End If

      If dttOrd.Rows.Count = 0 Then Return True

      '---------------------------------------------------------------------------
      'se non lo avevo fatto, inserisco il conto cli/forn
      If strTipo = "T" And NTSCInt(dttET.Rows(0)!et_conto) = 0 And dttOrd.Rows.Count > 1 Then
        For i = 1 To dttOrd.Rows.Count - 1
          If NTSCInt(dttOrd.Rows(i - 1)!td_conto) <> NTSCInt(dttOrd.Rows(i)!td_conto) Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129584705401845703, "Gli ordini selezionati non sono intestati tutti allo stesso cliente/fornitore. Operazione interrotta.")))
            Return False
          End If
        Next
      End If
      If strTipo = "T" And NTSCInt(dttET.Rows(0)!et_conto) = 0 And dttOrd.Rows.Count > 0 Then
        dttET.Rows(0)!et_conto = NTSCInt(dttOrd.Rows(0)!td_conto)
        dttET.Rows(0)!et_tipobf = NTSCInt(dttOrd.Rows(0)!td_tipobf)
        If Not OkTestata() Then Return False
      End If

      '-----------------------------------------------------------------------
      'Resetta la variabile di controllo di importazione kit
      bKitDaOrdini = False

      '---------------------------------------------------------------------------
      'memorizzo l'ultimo numero di riga presente nel documento prima dell'inserimento delle righe d'ordine
      lRigaIniz = 0
      If dttEC.Rows.Count > 0 Then lRigaIniz = NTSCInt(dttEC.Select("", "ec_riga DESC")(0)!ec_riga)

      '---------------------------------------------------------------------------
      'copio i dati nel datatable standardizzato
      dttSelord.Columns.Clear()
      dttSelord.Columns.Add("tt_tipork", GetType(String))
      dttSelord.Columns.Add("tt_anno", GetType(Integer))
      dttSelord.Columns.Add("tt_serie", GetType(String))
      dttSelord.Columns.Add("tt_numero", GetType(Integer))
      dttSelord.Columns.Add("tt_riga", GetType(Integer))
      dttSelord.Columns.Add("tt_quadaeva", GetType(Decimal))
      dttSelord.Columns.Add("tt_flevasdaeva", GetType(String))
      For i = 1 To 24
        dttSelord.Columns.Add("tt_quadaeva" & i.ToString("00"), GetType(Decimal))
      Next
      'usate solo da importarigheordini con barcode quando articolo non in ordine
      dttSelord.Columns.Add("tt_codart", GetType(String))
      dttSelord.Columns.Add("tt_fase", GetType(Integer))

      For Each dtrT As DataRow In dttOrd.Rows
        dttSelord.Rows.Add(dttSelord.NewRow())
        With dttSelord.Rows(dttSelord.Rows.Count - 1)
          If strTipo = "T" Then   'ho selezionato la testata del documento
            !tt_tipork = dtrT!td_tipork
            !tt_anno = dtrT!td_anno
            !tt_serie = dtrT!td_serie
            !tt_numero = dtrT!td_numord
            !tt_riga = 0
            !tt_quadaeva = 0
            !tt_flevasdaeva = "C"
            !tt_codart = ""
            !tt_fase = 0
            For i = 1 To 24
              dttSelord.Rows(dttSelord.Rows.Count - 1)("tt_quadaeva" & i.ToString("00")) = 0
            Next
          Else                       'ho selezionato le righe del documento
            !tt_tipork = dtrT!mo_tipork
            !tt_anno = dtrT!mo_anno
            !tt_serie = dtrT!mo_serie
            !tt_numero = dtrT!mo_numord
            !tt_riga = dtrT!mo_riga
            !tt_quadaeva = dtrT!xx_quadaeva
            !tt_flevasdaeva = dtrT!xx_flevasdaeva
            !tt_codart = dtrT!mo_codart
            !tt_fase = dtrT!mo_fase
            If dttOrd.Columns.Contains("xx_quadaeva01") Then
              For i = 1 To 24
                dttSelord.Rows(dttSelord.Rows.Count - 1)("tt_quadaeva" & i.ToString("00")) = dtrT("xx_quadaeva" & i.ToString("00"))
              Next
            Else
              For i = 1 To 24
                dttSelord.Rows(dttSelord.Rows.Count - 1)("tt_quadaeva" & i.ToString("00")) = 0
              Next
            End If
          End If
        End With
      Next    'For Each dtrT As DataRow In dttOrd.Rows
      dttSelord.AcceptChanges()

      '---------------------------------------------------------------------------
      'verifico se alcuni ordini sono in modifica tra quelli da importare
      If nControllaConcorrenzaOggetti <> 0 Then
        If Not oDttgr.NTSGroupBy(dttSelord, dttGr, "tt_tipork, tt_anno, tt_serie, tt_numero", "", "tt_tipork, tt_anno, tt_serie, tt_numero") Then Return False
        For Each dtrT As DataRow In dttGr.Rows
          DocumentLockCheck(dtrT!tt_tipork.ToString, NTSCInt(dtrT!tt_anno), dtrT!tt_serie.ToString, NTSCInt(dtrT!tt_numero), 0, strMsg)
          If strMsg.Trim <> "" Then
            If nControllaConcorrenzaOggetti = -1 Then
              'avviso
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                                oApp.Tr(Me, 129179691597675781, "Potrebbe non essere possibile salvare il documento in apertura se " & _
                                "il primo operatore apporterà delle modifiche." & vbCrLf & _
                                "Diversamente se modifichiamo il documento sarà il primo operatore a perdere il lavoro svolto.")))
            End If
            If nControllaConcorrenzaOggetti = 1 Then
              'blocco
              bDocumentLockNoSave = True
              ThrowRemoteEvent(New NTSEventArgs("", strMsg & vbCrLf & _
                                oApp.Tr(Me, 129179691578652344, "Importazione ordini annullata.")))
              Return False
            End If
          End If
        Next
      End If    'If nControllaConcorrenzaOggetti <> 0 Then

      '---------------------------------------------------------------------------
      'Per ogni record di TTSELORD inserische le righe in MMTRANS
      'se il tipo record è "T" riempie MMTRANS con i record di tipo "T"
      'e MMTRASCA con quelli di tipo "U" (nel ciclo interno)
      If dttEC.Rows.Count > 0 Then
        nRigaStart = NTSCInt(dttEC.Select("", "ec_riga DESC")(0)!ec_riga)
      End If
      '--------------------------------------------------------------------------------------------------------------
      If CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", "EreditaRiferimentiChiamata", "0", " ", "0")) = True Then
        Dim nIndice As Integer = 0
        Dim dtrRigheOrdine() As DataRow = dttSelord.Select(IIf(dttET.Rows(0)!et_tipork.ToString = "T", " tt_tipork = 'H'", "").ToString, _
          "tt_tipork, tt_anno, tt_serie, tt_numero")
        bEreditaDatiChiamata = True
        If dtrRigheOrdine.Length > 1 Then
          For nIndice = 1 To (dtrRigheOrdine.Length - 1)
            If (dtrRigheOrdine(nIndice)!tt_tipork.ToString.ToUpper <> dtrRigheOrdine(0)!tt_tipork.ToString.ToUpper) Or _
               (dtrRigheOrdine(nIndice)!tt_anno.ToString <> dtrRigheOrdine(0)!tt_anno.ToString) Or _
               (dtrRigheOrdine(nIndice)!tt_serie.ToString.ToUpper <> dtrRigheOrdine(0)!tt_serie.ToString.ToUpper) Or _
               (dtrRigheOrdine(nIndice)!tt_numero.ToString <> dtrRigheOrdine(0)!tt_numero.ToString) Then
              bEreditaDatiChiamata = False
              Exit For
            End If
          Next
        End If
      End If
      '--------------------------------------------------------------------------------------------------------------
      For Each dtrOrd As DataRow In dttSelord.Select(IIf(dttET.Rows(0)!et_tipork.ToString = "T", " tt_tipork = 'H'", "").ToString, "tt_tipork, tt_anno, tt_serie, tt_numero, tt_riga")

        'caso particolare: importa righe ordini da barcode: l'articolo potrebbe non essere collegato ad un ordine
        'inserisco la riga senza agganciarla all'ordine
        bAdded = False
        If NTSCInt(dtrOrd!tt_numero) = 0 Then

          'inserisco la riga 
          dttEC.Rows.Add(dttEC.NewRow)
          bAdded = True
          bInImportRigheOrd = True          'esattamente come in vb6: non genera figlie di righe kit e non esplode DB, non da messaggi di righe con QTA  e/o prezzo = 0
          With dttEC.Rows(dttEC.Rows.Count - 1)
            'forzo la MovordOnAddNewRow
            !codditt = "."
            !codditt = strDittaCorrente
            bInImportRigheOrd = False     'devo far rilevare prezzi e sconti...
            !ec_codart = dtrOrd!tt_codart
            !ec_fase = dtrOrd!tt_fase
            !ec_colli = dtrOrd!tt_quadaeva
            !ec_quant = dtrOrd!tt_quadaeva
            bInImportRigheOrd = True
            If dtrOrd!tt_flevasdaeva.ToString = "S" And NTSCDec(dtrOrd!tt_quadaeva) = 0 Then
              !ec_stasino = "N"
            Else
              !ec_stasino = "S"
            End If
          End With
          If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
            dttEC.Rows(dttEC.Rows.Count - 1).Delete()
            Return False
          End If
          bAdded = False

          bInImportRigheOrd = False
          GoTo Salta
        End If    '        If NTSCInt(dtrOrd!tt_numero) = 0 Then

        If Not oCldBoll.GetTestord(strDittaCorrente, dtrOrd!tt_tipork.ToString, NTSCInt(dtrOrd!tt_anno), dtrOrd!tt_serie.ToString, NTSCInt(dtrOrd!tt_numero), dttTd) Then Return False

        If bTMclav And dttET.Rows(0)!et_tipork.ToString = "T" And lNumord <> NTSCInt(dtrOrd!tt_numero) And bTerzista Then
          Do
            evnt = New NTSEventArgs(CLN__STD.ThMsg.INPUTBOX, oApp.Tr(Me, 128705501011562500, "Inserire il numero dell'Impegno di Trasferimento. (Ordine di produzione n°: |" & dtrOrd!tt_numero.ToString & " " & dtrOrd!tt_serie.ToString & "|)"))
            ThrowRemoteEvent(evnt)
            lTmNumIT = NTSCInt(evnt.RetValue)
          Loop While Not (IsNumeric(lTmNumIT) And lTmNumIT > 0)
        End If

        'Se abilita l'opzione bSegnalaEvasioneOrdBloccati al cambio di ogni ordine avvisa
        If bSegnalaEvasioneOrdBloccati Then
          If strTipord <> dtrOrd!tt_tipork.ToString Or nAnno <> NTSCInt(dtrOrd!tt_anno) Or _
             strSerie <> dtrOrd!tt_serie.ToString Or lNumord <> NTSCInt(dtrOrd!tt_numero) Then
            If dttTd.Rows(0)!td_blocco.ToString <> "N" Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128705506979843750, _
                            "Attenzione! Ordine n° |" & NTSCInt(dtrOrd!tt_numero) & IIf(dtrOrd!tt_serie.ToString = " ", "", "/" & dtrOrd!tt_serie.ToString).ToString & _
                            "| con blocco |" & DescrBlocco(dttTd.Rows(0)!td_blocco.ToString) & "| indicato in testata. Si procede alla sua evasione.")))
            End If
          End If
        End If
        strTipord = dtrOrd!tt_tipork.ToString
        nAnno = NTSCInt(dtrOrd!tt_anno)
        strSerie = dtrOrd!tt_serie.ToString
        lNumord = NTSCInt(dtrOrd!tt_numero)

        Select Case strTipord
          Case "#" : strTipodoc = "IMPEGNO DI COMMESSA"
          Case "R" : strTipodoc = "IMPEGNO CLIENTE"
          Case "O" : strTipodoc = "ORDINE FORNITORE"
          Case "Q" : strTipodoc = "PREVENTIVO"
          Case "H" : strTipodoc = "ORDINE DI PRODUZIONE"
          Case "Y" : strTipodoc = "IMPEGNO DI PRODUZIONE"
          Case "X" : strTipodoc = "IMPEGNO DI TRASFERIMENTO"
        End Select
        '-----------------------------------------------------------------------------------------------------------
        'ottengo i dati di testata ordine
        '--------------------
        'Controlla la congruenza delle informazioni di testata e piede
        If dttEC.Rows.Count = 0 Then
          'Riporta i campi di testata e piede del primo ordine
          With dttTd.Rows(0)
            '--------------------
            'Controlli iniziali (anche sul primo Documento)
            strHead = oApp.Tr(Me, 128734887941823839, "Attenzione! I seguenti campi del |" & strTipodoc & "| serie '|" & _
                                              !td_serie.ToString & "|' numero |" & !td_numord.ToString & _
                                              "| differiscono dal documento " & _
                                              "corrente:" & vbCrLf & vbCrLf)
            strMess = ""
            '-------------------------------------------------------------------------------------------------------
            If bRiportaCodeseInEvasione = False Then
              If NTSCInt(!td_codese) <> NTSCInt(dttET.Rows(0)!et_codese) Then
                strMess = strMess & oApp.Tr(Me, 128581071120781250, "- Codice esenzione |" & NTSCInt(!td_codese).ToString & "|" & vbCrLf)
              End If
              If strMess <> "" Then
                strMess = strHead & strMess & vbCrLf & oApp.Tr(Me, 128706345495937500, "Forzare l'inserimento dell'|" & strTipodoc & "|?")
                evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMess)
                ThrowRemoteEvent(evnt)
                If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then
                  strMess = ""
                  GoTo Salta
                End If
              End If
            End If

            strMess = ""
            Select Case nIgnoraTipobfTestata1Ordine
              Case 0
                If NTSCInt(dttET.Rows(0)!et_tipobf) <> NTSCInt(!td_tipobf) Then dttET.Rows(0)!et_tipobf = !td_tipobf
              Case -2
                If bTipoBFProforma = False Then
                  If NTSCInt(dttET.Rows(0)!et_tipobf) <> NTSCInt(!td_tipobf) Then dttET.Rows(0)!et_tipobf = !td_tipobf
                End If
            End Select
            '---------------------
            If bRiportaCambio1Ord Then
              dttET.Rows(0)!et_cambio = !td_cambio
            End If
            '    dttET.Rows(0)!et_scorpo = !td_scorpo
            dttET.Rows(0)!et_flspinc = !td_flspinc
            If NTSCInt(!td_codpaga) > 0 And NTSCInt(!td_conto) = NTSCInt(dttET.Rows(0)!et_conto) Then
              If NTSCInt(dttET.Rows(0)!et_codpaga) <> NTSCInt(!td_codpaga) Then dttET.Rows(0)!et_codpaga = !td_codpaga
              '----------------------
              'Se il pagamento è a 'data diversa' riporta la datapag del Documento
              dttET.Rows(0)!et_datapag = CalcolaDataScadenza(NTSCStr(dttET.Rows(0)!et_tipork), NTSCStr(dttET.Rows(0)!et_datpar), NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)

              oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_codpaga), strDittaCorrente, "TABPAGA", "N", , dttTmp)

              If dttTmp.Rows.Count > 0 Then
                If NTSCInt(dttTmp.Rows(0)!tb_decpaga) = 4 Then
                  dttET.Rows(0)!et_datapag = !td_datapag
                End If
              End If
            End If
            dttET.Rows(0)!et_coddest = !td_coddest  'prima di settare l'agente, altrimenti se indico un angete diverso sulla destinazione al cambio della destinazoine viene cambiato l'agente invece di mantenere quello dell'ordine
            If bNew Or (bNew = False And bBloccaAgente1 = False) Then
              If NTSCInt(dttET.Rows(0)!et_codagen) <> NTSCInt(!td_codagen) Then dttET.Rows(0)!et_codagen = !td_codagen
            End If
            If NTSCInt(dttET.Rows(0)!et_listino) <> NTSCInt(!td_listino) Then dttET.Rows(0)!et_listino = !td_listino
            If NTSCInt(dttET.Rows(0)!et_controp) <> NTSCInt(!td_controp) Then dttET.Rows(0)!et_controp = !td_controp
            dttET.Rows(0)!et_scont1 = !td_scont1
            dttET.Rows(0)!et_scont2 = !td_scont2
            dttET.Rows(0)!et_scopag = !td_scopag
            '-------------------------------------------------------------------------------------------------------
            '--- Se l'opzione di registro BSVEBOLL/OPZIONI/bRiportaCodeseInEvasione è attiva e non ci sono righe
            '--- nel corpo del documento, setta un flag per NON controllare/segnalare la differenza fra:
            '--- Codice Esenzione dell'Ordine/Impegno che si sta evadendo e quello di testata del documento corrente
            '-------------------------------------------------------------------------------------------------------
            If bRiportaCodeseInEvasione = True Then dttET.Rows(0)!et_codese = !td_codese
            '-------------------------------------------------------------------------------------------------------
            If Not bIgnoraMagTestata1Ordine Then
              If NTSCInt(!td_magaz) <> 0 And NTSCInt(dttET.Rows(0)!et_magaz) <> NTSCInt(!td_magaz) Then dttET.Rows(0)!et_magaz = !td_magaz
              If NTSCInt(!td_magaz2) <> 0 And NTSCInt(dttET.Rows(0)!et_magaz2) <> NTSCInt(!td_magaz2) Then dttET.Rows(0)!et_magaz2 = !td_magaz2
            End If

            If !td_tipork.ToString = "Y" And (dttET.Rows(0)!et_tipork.ToString = "Z" Or dttET.Rows(0)!et_tipork.ToString = "W") Then
              'cioè sto facendo una nota di prelievo o bolla mov. interna
              dttET.Rows(0)!et_magimp = 0
              If NTSCInt(!td_magimp) > 0 And NTSCInt(dttET.Rows(0)!et_magaz) <> NTSCInt(!td_magimp) Then
                'Lo inserisco come magazzino 1
                If Not bIgnoraMagTestata1Ordine Then
                  dttET.Rows(0)!et_magaz = !td_magimp
                End If
              End If
              'imposto la causale di magazzino di testata com la causale
              'scarichi indicata nel tipo bolla fattura
              oCldBoll.ValCodiceDb(dttET.Rows(0)!et_tipobf.ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
              If dttTmp.Rows.Count > 0 Then
                If dttTmp.Rows(0)!tb_new506.ToString = "S" Then
                  dttET.Rows(0)!et_causale = dttTmp.Rows(0)!tb_tcauscap
                Else
                  dttET.Rows(0)!et_causale = nPeacScapro
                End If

              End If
              dttTmp.Clear()
            Else
              If NTSCInt(!td_magimp) <> 0 And _
                 NTSCInt(dttET.Rows(0)!et_magimp) <> NTSCInt(!td_magimp) And _
                 bIgnoraMagTestata1Ordine = False Then
                dttET.Rows(0)!et_magimp = !td_magimp
              End If
            End If    'If !td_tipork.ToString = "Y" And (dttET.Rows(0)!et_tipork.ToString = "Z" Or dttET.Rows(0)!et_tipork.ToString = "W") Then

            'Imposta la variabile bterzista per i carichi di prod. importati da ordini
            'questo assicura che il documento sia di tipo terzista quando il tipo b/f
            'prima di chiamare l'ordine non è correttamente impostato come magazzino impegni
            If dttET.Rows(0)!et_tipork.ToString = "T" Then
              bTerzista = CType(oCleComm, CLELBMENU).IsTerzista(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_magimp.ToString))
            End If

            dttET.Rows(0)!et_speaccv = !td_speaccv
            If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Or NTSCDec(dttET.Rows(0)!et_speaccv) = 0 Then dttET.Rows(0)!et_speacc = !td_speacc
            dttET.Rows(0)!et_speimbv = !td_speimbv
            If NTSCInt(dttET.Rows(0)!et_valuta) = 0 Or NTSCDec(dttET.Rows(0)!et_speimbv) = 0 Then dttET.Rows(0)!et_speimb = !td_speimb
            dttET.Rows(0)!et_pagatov = NTSCDec(IIf(bRiportaIncassato1Ord, !td_pagatov, 0))
            dttET.Rows(0)!et_pagato = NTSCDec(IIf(bRiportaIncassato1Ord, !td_pagato, 0))
            dttET.Rows(0)!et_abbuonov = NTSCDec(IIf(bRiportaAbbuono1Ord, !td_abbuonov, 0))
            dttET.Rows(0)!et_abbuono = NTSCDec(IIf(bRiportaAbbuono1Ord, !td_abbuono, 0))
            dttET.Rows(0)!et_vettor = !td_vettor
            dttET.Rows(0)!et_vettor2 = !td_vettor2
            dttET.Rows(0)!et_acuradi = !td_acuradi
            dttET.Rows(0)!et_porto = !td_porto

            dttET.Rows(0)!et_annotco = !td_annotco
            dttET.Rows(0)!et_codstag = !td_codstag
            dttET.Rows(0)!et_codcfam = !td_codcfam
            dttET.Rows(0)!et_coddest2 = !td_coddest2
            dttET.Rows(0)!et_codagen2 = !td_codagen2
            'li riporta solo se sono vuoti
            If NTSCStr(dttET.Rows(0)!et_riferim).Trim = "" Then dttET.Rows(0)!et_riferim = NTSCStr(!td_riferim)
            If NTSCStr(dttET.Rows(0)!et_note).Trim = "" Then dttET.Rows(0)!et_note = NTSCStr(!td_note)

            dttET.Rows(0)!et_commeca = !td_commeca
            dttET.Rows(0)!et_subcommeca = !td_subcommeca
            dttET.Rows(0)!et_codaspe = !td_codaspe
            dttET.Rows(0)!et_aspetto = !td_aspetto
            dttET.Rows(0)!et_caustra = !td_caustra
            dttET.Rows(0)!et_codcena = !td_codcena
            dttET.Rows(0)!et_coddivi = !td_coddivi
            dttET.Rows(0)!et_codcli = !td_codcli

            If bNonRiportareAbiCabBancaInEvasione = False Then
              dttET.Rows(0)!et_abi = !td_abi
              dttET.Rows(0)!et_cab = !td_cab
              dttET.Rows(0)!et_banc1 = NTSCStr(!td_banc1)
              dttET.Rows(0)!et_banc2 = NTSCStr(!td_banc2)
              dttET.Rows(0)!et_codbanc = !td_codbanc
            End If

            dttET.Rows(0)!et_contfatt = !td_contfatt
            If bEreditaDatiChiamata = True Then dttET.Rows(0)!et_codchia = !td_codchia
            dttET.Rows(0)!et_cup = !td_cup
            dttET.Rows(0)!et_cig = !td_cig
            dttET.Rows(0)!et_riferimpa = !td_riferimpa
          End With    'With dttTd.Rows(0)

          If Not OkTestata() Then
            'se dopo aver cambiato la causale la testata non è ok esco
            Return False
          End If
        Else
          '---------------------
          'Segnala le differenze
          With dttTd.Rows(0)
            strHead = oApp.Tr(Me, 128705520786718750, "Attenzione! I seguenti campi del |" & strTipodoc & "| serie '|" & _
                                              !td_serie.ToString & "|' numero |" & !td_numord.ToString & _
                                              "| differiscono dal documento " & _
                                              "corrente:" & vbCrLf & vbCrLf)
            strMess = ""
            If NTSCInt(!td_scont1) <> NTSCInt(dttET.Rows(0)!et_scont1) Then
              strMess = strMess & oApp.Tr(Me, 128581679715156250, "- Sconto 1 di testata |" & NTSCInt(!td_scont1).ToString(oApp.FormatSconti) & "%|" & vbCrLf)
            End If
            If NTSCInt(!td_scont2) <> NTSCInt(dttET.Rows(0)!et_scont2) Then
              strMess = strMess & oApp.Tr(Me, 128581679729687500, "- Sconto 2 di testata |" & NTSCInt(!td_scont2).ToString(oApp.FormatSconti) & "%|" & vbCrLf)
            End If
            If NTSCInt(!td_codpaga) <> NTSCInt(dttET.Rows(0)!et_codpaga) Then
              'Se il codice pagamento è 0 lo assegna
              If NTSCInt(dttET.Rows(0)!et_codpaga) = 0 And NTSCInt(!td_codpaga) <> 0 Then
                dttET.Rows(0)!et_codpaga = NTSCInt(!td_codpaga)
              Else
                If NTSCInt(!td_codpaga) <> 0 Then
                  strMess = strMess & oApp.Tr(Me, 128734889413257839, "- Codice pagamento |" & NTSCInt(!td_codpaga).ToString() & "|" & vbCrLf)
                End If
              End If
            End If
            If (nIgnoraTipobfTestata1Ordine <> -2) Or (bTipoBFProforma = False) Then
              If NTSCInt(!td_tipobf) <> NTSCInt(dttET.Rows(0)!et_tipobf) Then
                strMess = strMess & oApp.Tr(Me, 128734889472537839, "- Codice tipo Bolla/Fattura |" & NTSCInt(!td_tipobf).ToString() & "|" & vbCrLf)
              End If
            End If
            If NTSCInt(!td_scopag) <> NTSCInt(dttET.Rows(0)!et_scopag) Then
              strMess = strMess & oApp.Tr(Me, 128734889538993839, "- Sconto pagamento |" & NTSCInt(!td_scopag).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_codagen) <> NTSCInt(dttET.Rows(0)!et_codagen) Then
              strMess = strMess & oApp.Tr(Me, 128734889603265839, "- Codice agente |" & NTSCInt(!td_codagen).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_codagen2) <> NTSCInt(dttET.Rows(0)!et_codagen2) Then
              strMess = strMess & oApp.Tr(Me, 128734889676117839, "- Codice subagente |" & NTSCInt(!td_codagen2).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_codese) <> NTSCInt(dttET.Rows(0)!et_codese) Then
              strMess = strMess & oApp.Tr(Me, 128734889740233839, "- Codice esenzione |" & NTSCInt(!td_codese).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_magaz) <> NTSCInt(dttET.Rows(0)!et_magaz) Then
              strMess = strMess & oApp.Tr(Me, 128734889809653839, "- Codice 1° magazzino |" & NTSCInt(!td_magaz).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_magaz2) <> NTSCInt(dttET.Rows(0)!et_magaz2) Then
              strMess = strMess & oApp.Tr(Me, 128734889868933839, "- Codice 2° magazzino |" & NTSCInt(!td_magaz2).ToString() & "|" & vbCrLf)
            End If
            'Controlla ulteriori differenze
            'Non effettua il controllo nelle evasione degli imp.prod su note/bolle mov.int
            If Not (!td_tipork.ToString = "Y" And (dttET.Rows(0)!et_tipork.ToString = "Z" Or dttET.Rows(0)!et_tipork.ToString = "W")) Then
              If NTSCInt(!td_magimp) <> NTSCInt(dttET.Rows(0)!et_magimp) Then
                strMess = strMess & oApp.Tr(Me, 128734889887341839, "- Codice magazzino impegni |" & NTSCInt(!td_magimp).ToString() & "|" & vbCrLf)
                bMessaggioSuMagimp = True
              End If
            End If
            If bNoMsgCommessaDiversa Then
              If NTSCInt(!td_commeca) <> NTSCInt(dttET.Rows(0)!et_commeca) Then
                strMess = strMess & oApp.Tr(Me, 128700021577500000, "- Codice commessa |" & NTSCInt(!td_commeca).ToString() & "|" & vbCrLf)
              End If
              If NTSCStr(!td_subcommeca) <> NTSCStr(dttET.Rows(0)!et_subcommeca) Then
                strMess = strMess & oApp.Tr(Me, 128700021911875000, "- Codice sub-commessa |" & NTSCInt(!td_subcommeca).ToString() & "|" & vbCrLf)
              End If
            End If
            If bEvadendoRiportaSempreDatiTrasp = 0 Then
              If NTSCInt(!td_coddest) <> NTSCInt(dttET.Rows(0)!et_coddest) Then
                strMess = strMess & oApp.Tr(Me, 128581684888906250, "- Codice 1° destinazione |" & NTSCInt(!td_coddest).ToString() & "|" & vbCrLf)
              End If
            End If
            If NTSCInt(!td_coddest2) <> NTSCInt(dttET.Rows(0)!et_coddest2) Then
              strMess = strMess & oApp.Tr(Me, 128581685136562500, "- Codice 2° destinazione |" & NTSCInt(!td_coddest2).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_codcena) <> NTSCInt(dttET.Rows(0)!et_codcena) Then
              strMess = strMess & oApp.Tr(Me, 128700021042187500, "-  Codice centro C.A. |" & NTSCInt(!td_codcena).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_coddivi) <> NTSCInt(dttET.Rows(0)!et_coddivi) Then
              strMess = strMess & oApp.Tr(Me, 129446833335126953, "-  Codice divisione C.A. |" & NTSCInt(!td_coddivi).ToString() & "|" & vbCrLf)
            End If
            If NTSCInt(!td_codcli) <> NTSCInt(dttET.Rows(0)!et_codcli) Then
              strMess = strMess & oApp.Tr(Me, 129446833348330078, "-  Codice cliente C.A. |" & NTSCInt(!td_codcli).ToString() & "|" & vbCrLf)
            End If
            If strMess <> "" Then
              strMess = strHead & strMess & vbCrLf & oApp.Tr(Me, 128706363720937500, "Forzare l'inserimento dell'|" & strTipodoc & "| mantenendo i dati di testata presenti nel documento?")
              evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMess)
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then
                strMess = ""
                bMantieniDatiDiTestata = False
                GoTo Salta
              Else
                If bMessaggioSuMagimp = True Then bMantieniDatiDiTestata = True
              End If
            End If
            strMess = ""

            '-------------------------
            'differenze bloccanti
            If NTSCStr(!td_cup) <> NTSCStr(dttET.Rows(0)!et_cup) Then
              strMess = strMess & oApp.Tr(Me, 130471197067691756, "- Codice CUP |" & NTSCStr(!td_cup).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!td_cig) <> NTSCStr(dttET.Rows(0)!et_cig) Then
              strMess = strMess & oApp.Tr(Me, 130471197083727410, "- Codice CIG |" & NTSCStr(!td_cig).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!td_riferimpa) <> NTSCStr(dttET.Rows(0)!et_riferimpa) Then
              strMess = strMess & oApp.Tr(Me, 130471197224177130, "- Riferimento ordine P.A. |" & NTSCStr(!td_riferimpa).ToString() & "|" & vbCrLf)
            End If
            If strMess <> "" Then
              ThrowRemoteEvent(New NTSEventArgs("", strHead & strMess & vbCrLf & oApp.Tr(Me, 130471198248351536, "La riga non verra acquisita")))
              GoTo Salta
            End If
            strMess = ""

            'Su opzione riporta comunque cautrasp, aspettoesteriore, trasportoacuradi e porto
            'ora anche vettore1 e destdiv1
            If bEvadendoRiportaSempreDatiTrasp = -1 Or bEvadendoRiportaSempreDatiTrasp = 1 Then
              dttET.Rows(0)!et_caustra = !td_caustra
              dttET.Rows(0)!et_codaspe = !td_codaspe
              dttET.Rows(0)!et_aspetto = !td_aspetto
              dttET.Rows(0)!et_vettor = !td_vettor
              dttET.Rows(0)!et_acuradi = !td_acuradi
              dttET.Rows(0)!et_porto = !td_porto
              dttET.Rows(0)!et_coddest = !td_coddest

              If bEvadendoRiportaSempreDatiTrasp = 1 Then
                dttET.Rows(0)!et_codagen = !td_codagen
                dttET.Rows(0)!et_codese = !td_codese
                dttET.Rows(0)!et_riferim = NTSCStr(!td_riferim)
                dttET.Rows(0)!et_vettor2 = !td_vettor2
              End If
            End If

          End With    'With dttTd.Rows(0)
        End If    'If dttEC.Rows.Count = 0 Then

        '-----------------------
        'Controllo attivazione cono lavoro attivo e passivo (lo calcolo sulla testata dopo aver caricato il magaz di testata dalla nota di prelievo)
        If nMagazCLav = -1 Then
          If bNoAttribRifCLav = True Then
            nMagazCLav = 0
          Else
            nMagazCLav = CheckScaricoLavorazione(bAltrui)
            If nMagazCLav = 0 Then
              nMagazCLav = CheckScaricoCLavAttivo()
              If nMagazCLav <> 0 Then
                bContoLavAtt = True
              End If
            End If
          End If
        End If

        '---------------------------
        'Riporta le righe d'ordine
        If Not oCldBoll.GetMovord(strDittaCorrente, dtrOrd!tt_tipork.ToString, NTSCInt(dtrOrd!tt_anno), _
                                  dtrOrd!tt_serie.ToString, NTSCInt(dtrOrd!tt_numero), NTSCInt(dtrOrd!tt_riga), dttMovord, dttMovordTc) Then GoTo salta
        If dttMovord.Rows.Count = 0 Then GoTo salta
        For Each dtrMovord As DataRow In dttMovord.Rows
          '----------------------------------
          'Preselezione quantità
          If dttET.Rows(0)!et_tipork.ToString = "W" Then
            dQuaRes = NTSCDec(dtrMovord!mo_quant) - NTSCDec(dtrMovord!mo_quaeva) - NTSCDec(dtrMovord!mo_quapre)
          Else
            dQuaRes = NTSCDec(dtrMovord!mo_quant) - NTSCDec(dtrMovord!mo_quaeva)
          End If
          bAumentoQta = False

          If ArrDbl(dQuaRes, 3) <> ArrDbl(NTSCDec(dtrOrd!tt_quadaeva), 3) Then
            bTuttoIlResiduo = False
            If ArrDbl(dQuaRes, 3) < ArrDbl(NTSCDec(dtrOrd!tt_quadaeva), 3) Then bAumentoQta = True
          Else
            bTuttoIlResiduo = True
          End If
          If NTSCInt(dtrOrd!tt_riga) = 0 Then
            'Zoom testate ordine
            bTuttoIlResiduo = True
          End If

          '----------------------------------
          nMagazCLavLoc = nMagazCLav
          bContoLavAttLoc = bContoLavAtt
          'Non assegna i riferimento al carico di prodiuzione (mm_cc*)
          'l'articolo è gestito a fasi
          If dtrMovord!ar_gesfasi.ToString = "S" And bContoLavAtt Then
            nMagazCLavLoc = 0
            bContoLavAttLoc = False
          End If
          'Non assegna i riferimenti al conto lavoro passivo (mm_cl*)
          'se l'articolo è gestito a fasi e lo scarico insiste sul magazzino
          'merce altrui presso terzi
          If nMagazCLav <> 0 And dtrMovord!ar_gesfasi.ToString = "S" And bAltrui Then
            nMagazCLavLoc = 0
          End If

          '----------------------------------
          'SCRIVO LA RIGA NELLA GRIGLIA PRINCIPALE
ScriviRiga:
          If ScriviRigaOrd(strTipo, dttEC, dtrMovord, dttMovordTc.Select("mo_riga = " & dtrMovord!mo_riga.ToString), _
                        NTSCDec(dttTd.Rows(0)!td_scont1), NTSCDec(dttTd.Rows(0)!td_scont2), NTSCDec(dttTd.Rows(0)!td_scopag), _
                        NTSCInt(IIf(dttET.Rows(0)!et_tipork.ToString = "T", 0, nMagazCLavLoc)), bContoLavAttLoc, _
                        NTSCDec(dtrOrd!tt_quadaeva), dtrOrd!tt_flevasdaeva.ToString, bTuttoIlResiduo, _
                        NTSCInt(dttTd.Rows(0)!td_codese), dtrOrd, False, 0) Then

            If dttET.Rows(0)!et_tipork.ToString = "T" Then
              '----------------------------------
              'Riporta le righe d'ordine in MMTRASCA di tipo "Y": solo se è andata a buon fine la scrittura della riga T
              If Not oCldBoll.GetMovordY(strDittaCorrente, "Y", NTSCInt(dtrOrd!tt_anno), _
                            dtrOrd!tt_serie.ToString, NTSCInt(dtrOrd!tt_numero), NTSCInt(dtrMovord!mo_riga), dttMovordY, dttAttAss) Then GoTo salta
              If bModTCO Then 'Riempimento campo di MOVORD "Y"
                If Not oCldBoll.GetMovordY_TC(dttMovordY) Then GoTo salta
              End If
              If dttMovordY.Rows.Count = 0 And Not (dtrMovord!mo_codart.ToString.ToUpper = "D" And Not bEsplodiD) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128708091518906250, "Non esistono impegni collegati ancora aperti per l'ordine di produzione acquisito n. |" & dtrMovord!mo_numord.ToString & "|, riga |" & dtrMovord!mo_riga.ToString & "|")))
              End If
              dtrOrdTc = dttMovordTc.Select("mo_riga = " & dtrMovord!mo_riga.ToString)  'riga dettaglio tco collegata alla riga prodotta

              For Each dtrMovordY As DataRow In dttMovordY.Rows
                nMagazCLavLoc = nMagazCLav
                bContoLavAttLoc = bContoLavAtt

                'Carico da produzione di un articolo a Taglie e Colori
                If bModTCO = False Or NTSCInt(dttEC.Rows(dttEC.Rows.Count - 1)!xxo_codtagl) = 0 Or dtrOrdTc.Length = 0 Then
                  'no TAGLIE e COLORI: CODICE PRE-ESISTENTE
                  'Preselezione quantità
                  If Not bTuttoIlResiduo Then
                    'If ArrDbl(!mo_quant - !mo_quaeva, 3) < ArrDbl(snaTest!tt_quadaeva, 3) Then
                    '  strFlevasDaeva = "S"
                    'Else
                    '  strFlevasDaeva = "C"
                    'End If
                    strFlevasDaeva = dtrOrd!tt_flevasdaeva.ToString
                    'Calcola la q.tà impiegata dal figlio
                    If NTSCDec(dtrMovord!mo_quant) = 0 Then
                      dQuaDaEva = 0
                    Else
                      dQuaDaEva = ArrDbl(((NTSCDec(dtrMovordY!mo_quant) / NTSCDec(dtrMovord!mo_quant)) * NTSCDec(dtrOrd!tt_quadaeva)), 3)
                    End If
                  Else
                    strFlevasDaeva = "S"
                    dQuaDaEva = 0 'lo calcola comunque dentro ScriviRigaOrd
                  End If
                Else
                  'Preselezione quantità
                  If Not bTuttoIlResiduo Then
                    'If ArrDbl(!mo_quant - !mo_quaeva, 3) < ArrDbl(snaTest!tt_quadaeva, 3) Then
                    '  strFlevasDaeva = "S"
                    'Else
                    '  strFlevasDaeva = "C"
                    'End If
                    strFlevasDaeva = dtrOrd!tt_flevasdaeva.ToString
                    'Calcola la q.tà impiegata dal figlio
                    i = NTSCInt(dtrMovordY!mo_tcindtagl)
                    If NTSCDec(dtrOrdTc(0)("mo_quant" & i.ToString("00"))) = 0 Then
                      dQuaDaEva = 0
                    Else
                      If lOut = 1 Or strFlevasDaeva = "C" Then
                        'proporzionalizza
                        dQuaDaEva = ArrDbl(((NTSCDec(dtrMovordY!mo_quant) / NTSCDec(dtrOrdTc(0)("mo_quant" & i.ToString("00")))) * NTSCDec(dtrOrd("tt_quadaeva" & i.ToString("00")))), 3)
                      Else
                        'scarica tutto
                        dQuaDaEva = ArrDbl(((NTSCDec(dtrMovordY!mo_quant) / NTSCDec(dtrOrdTc(0)("mo_quant" & i.ToString("00")))) * (NTSCDec(dtrOrdTc(0)("mo_quant" & i.ToString("00"))) - NTSCDec(dtrOrdTc(0)("mo_quaeva" & i.ToString("00"))))), 3)
                      End If
                    End If
                    If strFlevasDaeva = "C" Then
                      'evasione parziale a livello globale...
                      If (NTSCDec(dtrOrdTc(0)("mo_quant" & i.ToString("00"))) - NTSCDec(dtrOrdTc(0)("mo_quaeva" & i.ToString("00")))) = NTSCDec(dtrOrd("tt_quadaeva" & i.ToString("00"))) Then
                        '...diventa in questo caso evasione a saldo per la singola taglia
                        strFlevasDaeva = "S"
                      End If
                    End If
                  Else
                    'evasione a saldo a livello globale...
                    'diventa evasione a saldo per tutte le taglie
                    strFlevasDaeva = "S"
                    dQuaDaEva = 0 'lo calcola comunque dentro ScriviRigaOrd
                  End If

                End If

                'Non assegna i riferimenti al conto lavoro passivo (mm_cl*)
                'se l'articolo FIGLIO è gestito a fasi e lo scarico insiste sul magazzino
                'merce altrui presso terzi
                If nMagazCLav <> 0 And dtrMovordY!ar_gesfasi.ToString = "S" And bAltrui Then
                  nMagazCLavLoc = 0
                End If

                'Non assegna i riferimenti al conto lavoro passivo (mm_cl*)
                'se l'articolo PADRE è gestito a fasi e lo scarico insiste sul magazzino
                'merce altrui presso terzi
                If Not bAttribRifCLavAttSuScarProdArtFasi Then
                  If nMagazCLav <> 0 And dtrMovord!ar_gesfasi.ToString = "S" And bAltrui Then
                    nMagazCLavLoc = 0
                  End If
                End If

                '--------------------------
                'SCRIVO LA RIGA NELLA GRIGLIA DEGLI SCARICHI
ScriviRigaScarichi:
                ScriviRigaOrd(strTipo, dttECIMP, dtrMovordY, dttMovordTc.Select("mo_riga = " & dtrMovord!mo_riga.ToString), _
                              NTSCDec(dttTd.Rows(0)!td_scont1), NTSCDec(dttTd.Rows(0)!td_scont2), NTSCDec(dttTd.Rows(0)!td_scopag), _
                              nMagazCLavLoc, bContoLavAttLoc, dQuaDaEva, strFlevasDaeva, bTuttoIlResiduo, _
                              NTSCInt(dttTd.Rows(0)!td_codese), dtrOrd, True, NTSCInt(dttEC.Rows(dttEC.Rows.Count - 1)!ec_riga), bAumentoQta)
              Next    'For Each dtrMovordY As DataRow In dttMovordY.Rows
              dttMovordY.Clear()

              '-------------------
              'Riporta le righe d'ordine in MMLAVCE
              For Each dtrAttAss As DataRow In dttAttAss.Rows
                'Preselezione quantità
                If Not bTuttoIlResiduo Then
                  'If ArrDbl(!mo_quant - !mo_quaeva, 3) < ArrDbl(snaTest!tt_quadaeva, 3) Then
                  '  strFlevasDaeva = "S"
                  'Else
                  '  strFlevasDaeva = "C"
                  'End If
                  strFlevasDaeva = dtrOrd!tt_flevasdaeva.ToString
                  'Calcola il rapporto fra la quantità residua/da evadere
                  If (NTSCDec(dtrMovord!mo_quant) - NTSCDec(dtrMovord!mo_quaeva)) = 0 Then
                    dRapp = 0
                  Else
                    dRapp = NTSCDec(dtrOrd!tt_quadaeva) / (NTSCDec(dtrMovord!mo_quant) - NTSCDec(dtrMovord!mo_quaeva))
                  End If
                Else
                  strFlevasDaeva = "S"
                  dQuaDaEva = 0 'lo calcola comunque dentro ScriviRigaLav
                End If

                '--------------------------
                'SCRIVO LA RIGA NELLA GRIGLIA DELLE LAVORAIONI
ScriviRigaLavorazioni:
                ScriviRigaLav(dttEC.Rows(dttEC.Rows.Count - 1), dtrAttAss, NTSCInt(dttEC.Rows(dttEC.Rows.Count - 1)!ec_riga), NTSCDec(dtrOrd!tt_quadaeva), strFlevasDaeva, bTuttoIlResiduo, dRapp)

              Next    'For Each dtrAttAss As DataRow In dttAttAss.Rows
              dttAttAss.Clear()


              'ValorizzaProduzione(dttEC.Rows(dttEC.Rows.Count - 1))   non serve: viene rifatto tra poco ...
            End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then
          End If    'If ScriviRigaOrd(dttEC, dtrMovord

        Next    'For Each dtrMovord As DataRow In dttMovord.Rows
        dttMovord.Clear()
        dttMovordTc.Clear()
Salta:
      Next    'For Each dtrOrd As DataRow In dttSelord.Select(

      '--------------------------------
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        'ricalcolo il valore di riga: escudo le righe già calcolate in precedenza ... (nella eventuale import righe ord già fatto)
        For Each dtrCorp As DataRow In dttEC.Select("ec_riga > " & nRigaStart, "ec_riga")
          ValorizzaProduzione(dtrCorp)
          SettaValoriRiga(dtrCorp)
        Next

        '***************************************************
        'A questo punto deve sistemare il Project Management
        '***************************************************
        'Tiriamo su da MMTRANS le righe appena inserite
        '(in pratica solo quelle inserite con l'ordine)
        dtrPm = dttEC.Select("ec_tipork = 'T' AND ec_riga > " & lRigaIniz.ToString, "ec_riga")
        For nDtrPm = 0 To dtrPm.Length - 1
          With dtrPm(nDtrPm)
            'Se non è stata inserita alcuna riga non faccio nulla!!!
            If NTSCInt(!ec_pmtaskid) <> 0 Then
              'Se vi è indicato un Task-id occorre sistemare i campi di P.M.
              '1) Impostiamo strFDarave
              'xxo_testci è stato impostato in fase di inserimento riga ordine
              Select Case NTSCStr(!xxo_testci)
                Case " " : strFDarave = " "
                Case "A", "B" : strFDarave = "A"
                Case "D", "E" : strFDarave = "D"
              End Select
              '2) Controlliamo la accettabilità del Task-id
              '   e ricalcoliamo
              dFQtarim = 0
              dFCostorim = 0
              dFQtares = 0
              dFCostores = 0
              dFQtadisda = 0
              dFValdisda = 0
              dFQtadis = 0
              dFValdis = 0
              strFSalcon = "C"
              strDesta = ""
              '
              strFPrevgrup = "N"
              strFGestcost = "1"
              '
              If Not oCldBoll.LegTaskGr(strDittaCorrente, NTSCStr(!ec_commeca), NTSCStr(!ec_pmtaskid), "TASKS", _
                                        0, False, strOut, strDaraveout, strTipoTask, strGestcost, strPrevGrup, _
                                        strSummary, Nothing) Then
                GoTo CancellaRiferimentoTask
              Else
                'Rimappiamo il Segno Dare/Avere per le righe di Ricavo
                'che sono passate dagli ordini...
                Select Case strDaraveout
                  Case "R", "S"
                    strDaravedef = "A"
                  Case Else
                    strDaravedef = strDaraveout
                End Select
                '...e per i Task di tipo 'Spediz a cli./cant.'
                'che sono passati dagli ordini
                'If strTipoTask = "6" Then strDaravedef = "A"
                '-- --- ----
                If Not (strDaravedef = strFDarave) Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470840996094, "Task |" & NTSCStr(!ec_pmtaskid) & "| ha un segno Dare/avere di C.A. non compatibile con quello della causale! Non ammesso.")))
                  GoTo CancellaRiferimentoTask
                End If
                If (strPrevGrup = "S") Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470824667969, "Task |" & NTSCStr(!ec_pmtaskid) & "| di preventivazione di gruppo non compatibile con il tipo di registrazioni correnti")))
                  GoTo CancellaRiferimentoTask
                End If
                If (strSummary = "S") Then
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470810029297, "Task |" & NTSCStr(!ec_pmtaskid) & "| di gruppo non compatibile con il tipo di registrazioni correnti")))
                  GoTo CancellaRiferimentoTask
                Else
                  strDesta = strOut
                  If Not (oCldBoll.Caricattproesebappo(strDittaCorrente, lIIttproesebappo, NTSCInt(!ec_commeca), NTSCInt(!ec_pmtaskid), Nothing)) Then
                    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442473191601562, "Problemi a caricare i record di proeseb su ttproesebappo  ! ")))
                    GoTo CancellaRiferimentoTask
                  End If
                  ' adesso legge gli altri campi da task
                  lEseddaes = 0
                  If Not (oCldBoll.LegTasksCompleteDao(strDittaCorrente, "TTPROESEC", lIIttproesebappo, lIItttasks, NTSCInt(!ec_commeca), NTSCInt(!ec_pmtaskid), lEseddaes, IntSetDate("31/12/2099"), bPMControllaBaseCostMG, strDesta, strDaraveout, strTipoTask, strGestcost, dQtares, dWorkres, dCostores, dBasecost, dBasecostun, dBasework, dBaseqta, strPrevGrup, False, strRilasciato)) Then
                    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470787470703, "Task |" & NTSCStr(!ec_pmtaskid) & "| è stato rilevato  un problema in LegTaskCompleteDao ! ")))
                    GoTo CancellaRiferimentoTask
                  Else
                    ' prima testo se si può accettare
                    If Not ((strTipoTask = "1" Or strTipoTask = "3" Or strTipoTask = "5") Or _
                           (strTipoTask = "7" And (dttET.Rows(0)!et_tipork.ToString = "B" Or dttET.Rows(0)!et_tipork.ToString = "W")) Or _
                           (strTipoTask = "8" And (dttET.Rows(0)!et_tipork.ToString = "A" Or dttET.Rows(0)!et_tipork.ToString = "B" Or _
                            dttET.Rows(0)!et_tipork.ToString = "C"))) Then
                      ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470763310547, "Task |" & NTSCStr(!ec_pmtaskid) & "| non compatibile con il tipo di registrazioni correnti")))
                      GoTo CancellaRiferimentoTask
                    End If
                    If Not (strGestcost = "2" Or strGestcost = "3") Then
                      ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470748750000, "Task |" & NTSCStr(!ec_pmtaskid) & "| con tipo gest. costi non compatibile con il tipo di registrazioni correnti")))
                      GoTo CancellaRiferimentoTask
                    End If
                    If dCostores = 0 And dQtares = 0 Then
                      ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470733154297, "Task |" & NTSCStr(!ec_pmtaskid) & "| già completato (costo residuo = 0), non evadibile")))
                      GoTo CancellaRiferimentoTask
                    End If
                    If bPMSoloTaskRilasciatiMG Then
                      If Not (strRilasciato = "S") Then
                        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442470717714844, "Task |" & NTSCStr(!ec_pmtaskid) & "| non ancora rilasciato , non evadibile")))
                        GoTo CancellaRiferimentoTask
                      End If
                    End If
                    'Ok, inizializzo altri campi
                    strFPrevgrup = strPrevGrup
                    strFGestcost = strGestcost
                    dFCostores = dCostores
                    dFQtares = dQtares
                    ' adesso determino fSalcon e altri campi da scrivere
                    SistemaPMSalconDaQta_VarF(NTSCDec(!ec_quant), NTSCDec(!ec_valore))
                  End If
                End If
              End If
              If Not CheckCongruenzaDati(NTSCInt(!ec_commeca), NTSCInt(!ec_pmtaskid), NTSCDec(!ec_valore)) Then
                GoTo CancellaRiferimentoTask
              End If
              '3) Scriviamo i dati del P.M.
              !ec_pmsalcon = strFSalcon
              !ec_pmQTADIS = dFQtadis
              !ec_pmVALDIS = dFValdis
              !xxo_pmqtadisda = dFQtadisda
              !xxo_pmvaldisda = dFValdisda
              !xxo_pmqtares = dFQtares
              !xxo_pmvalres = dFCostores
              !xxo_pmqtarim = dFQtarim
              !xxo_pmvalrim = dFCostorim
              !xxo_pmtaskid = strDesta
              !xxo_darave = strFDarave
              !xxo_prevgrup = strFPrevgrup
              !xxo_gestcost = strFGestcost
              .AcceptChanges()
            End If
            GoTo Prosegui
CancellaRiferimentoTask:
            '3bis) Eliminiamo i riferimenti al Task
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442475428134766, "A causa dei problemi riscontrati, nella riga |" & NTSCStr(!ec_riga) & "| del documento corrente, si perderà il riferimento al Task.")))
            !ec_pmtaskid = 0
            .AcceptChanges()
Prosegui:
            '4) Scriviamo i dati su TTPROESEC
            If bModPM And NTSCInt(!ec_pmtaskid) <> 0 Then
              If Not (oCldBoll.AggProesebDaMovmagDao(strDittaCorrente, 0, "MMTRANS", 0, "TTPROESEC", lIIttproesebappo, _
                                                    dttET.Rows(0)!et_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), _
                                                    dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc), _
                                                    NTSCInt(!ec_riga), NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString, _
                                                    Nothing, dttEC)) Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129442475836923828, "Attenzione: non è stato possibile aggiornare la commessa (proeseb) sugli archivi !")))
              End If
              ' agg altri record di ttpriana, rieriti allao staesso task id, se presenti
              ' solo inserimento
              If Not AggResAltriRkCorpo(0, 0, dttEC, dtrPm(nDtrPm), dQtadispass, dValdispass) Then
                ' msg
              End If
              .AcceptChanges()
            End If    'If bModPM And NTSCInt(!ec_pmtaskid) <> 0 Then

          End With    'With dtrPm(nDtrPm)
        Next    'For nDtrPm = 0 To dtrPm.Length - 1

      End If    'If dttET.Rows(0)!et_tipork.ToString = "T" Then

      '--------------------------------
      If bKitDaOrdini Then
        AggRifKit(dttET.Rows(0)!et_tipork.ToString)
        bKitDaOrdini = False
      End If

      '--------------------------------
      'Elimina eventuali multiple evasioni a saldo della stessa riga di ordine/nota
      'Per evitare il messaggio finale di salvataggio
      If dttEC.Rows.Count > 0 Then
        If Not ApriDocumentoAggUnicaEvasioneSaldo(dttEC.Rows(0)!ec_tipork.ToString, NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc)) Then Return False
        If dttEC.Rows(0)!ec_tipork.ToString = "T" Then
          If Not ApriDocumentoAggUnicaEvasioneSaldo("U", NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, NTSCInt(dttET.Rows(0)!et_numdoc)) Then Return False
        End If
      End If

      '--------------------------------
      'se serve aggiungo i lock su ttkeys 
      If nControllaConcorrenzaOggetti <> 0 Then
        For Each dtrT As DataRow In dttGr.Rows
          DocumentLockAdd(dtrT!tt_tipork.ToString, NTSCInt(dtrT!tt_anno), dtrT!tt_serie.ToString, NTSCInt(dtrT!tt_numero), 0, False)
        Next
      End If    'If nControllaConcorrenzaOggetti <> 0 Then

      CalcolaTotali() 'Così se si è nel corpo durante l'importazione e poi si passa direttamente nel piede i totali vengono ricalcolati

      Return True
    Catch ex As Exception
      If bAdded Then dttEC.Rows(dttEC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      'Ripristina l'effetto della opzione di registro bConsMultiEvasRigheOrdNote
      bInImportRigheOrd = False
      If strTipo <> "R" Then
        bConsMultiEvasRigheOrdNote = bConsMultiEvasRigheOrdNoteORIGIN
      End If
      dsShared.AcceptChanges()
      dttTd.Clear()
      dttSelord.Clear()
      dttTmp.Clear()
      dttMovord.Clear()
      dttMovordTc.Clear()
      dttMovordY.Clear()
      dttAttAss.Clear()
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function ScriviRigaOrd(ByVal strTipo As String, ByRef dttCorp As DataTable, ByRef dtrMovord As DataRow, ByRef dtrMovordTc As DataRow(), ByVal dSc1 As Decimal, ByVal dSc2 As Decimal, ByVal dScPag As Decimal, _
                                      ByVal nMagClav As Integer, ByVal bContoLavoroAttivo As Boolean, ByVal dQuaDaEva As Decimal, _
                                      ByVal strFlevasDaeva As String, ByVal bTuttoIlResiduo As Boolean, _
                                      ByVal nCodeseOrd As Integer, ByRef dtrSelord As DataRow, ByVal bDocumentoU As Boolean, _
                                      ByVal lRifRigaT As Integer) As Boolean
    Try
      Return ScriviRigaOrd(strTipo, dttCorp, dtrMovord, dtrMovordTc, dSc1, dSc2, dScPag, nMagClav, bContoLavoroAttivo, dQuaDaEva, _
                           strFlevasDaeva, bTuttoIlResiduo, nCodeseOrd, dtrSelord, bDocumentoU, lRifRigaT, False)

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try

  End Function
  Public Overridable Function ScriviRigaOrd(ByVal strTipo As String, ByRef dttCorp As DataTable, ByRef dtrMovord As DataRow, ByRef dtrMovordTc As DataRow(), ByVal dSc1 As Decimal, ByVal dSc2 As Decimal, ByVal dScPag As Decimal, _
                                      ByVal nMagClav As Integer, ByVal bContoLavoroAttivo As Boolean, ByVal dQuaDaEva As Decimal, _
                                      ByVal strFlevasDaeva As String, ByVal bTuttoIlResiduo As Boolean, _
                                      ByVal nCodeseOrd As Integer, ByRef dtrSelord As DataRow, ByVal bDocumentoU As Boolean, _
                                      ByVal lRifRigaT As Integer, ByVal bAumentoQta As Boolean) As Boolean
    'usata sia per inseire righe nel corpo principale che negli scarichi collegati
    Dim nControp As Integer = 0
    Dim strTipodoc As String = dttET.Rows(0)!et_tipork.ToString
    Dim nMag1 As Integer, nMag2 As Integer
    Dim nCau1 As Integer, nCau2 As Integer
    Dim dQuant As Decimal, dColli As Decimal
    Dim dQuantRES As Decimal, dColliRes As Decimal, strUnmis As String
    Dim strFlevas As String
    Dim dPrezzo As Decimal, dPrezvalc As Decimal
    'Cambio esenzione
    Dim nCodiva As Integer = 0
    Dim strFDarave As String = ""
    Dim strErr As String = ""
    Dim bAdded As Boolean = False
    Dim bAddedTc As Boolean = False
    Dim i As Integer = 0
    Dim dttMcla As New DataTable            'datatable contenente i saldi del c/to lavoro
    Dim nRowCla As Integer = 0
    Dim lLotto As Integer = 0

    'se riga ordine collegata a nota di prelievo
    Dim dttMovprb As New DataTable
    Dim dttMovprbTc As New DataTable
    Dim bNotaPresente As Boolean = False
    Dim dQuantResidua As Decimal = 0
    Dim dQuantDaCons As Decimal = 0
    Dim strFlevasPRB As String = ""
    Dim bTIRNota As Boolean = False

    Try
      '----------------
      'per compatibilità con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {strTipo, dttCorp, dtrMovord, dtrMovordTc, dSc1, dSc2, dScPag, nMagClav, bContoLavoroAttivo, dQuaDaEva, _
                                             strFlevasDaeva, bTuttoIlResiduo, nCodeseOrd, dtrSelord, bDocumentoU, lRifRigaT, bAumentoQta})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then
        dttCorp = CType(oIn(1), DataTable)        'alla funzione è passato ByRef !!!!
        dtrMovord = CType(oIn(2), DataRow)
        dtrMovordTc = CType(oIn(3), DataRow())
        dtrSelord = CType(oIn(13), DataRow)
        Return CBool(oOut)
      End If
      '----------------


      If bDocumentoU Then
        strTipodoc = "U"
        dtrHT = dttEC.Rows(dttEC.Rows.Count - 1)
      End If
      dQuantResidua = dQuaDaEva
      bNotaPresente = False

      With dtrMovord
        '---------------------------------------------------------------------
        'Prima verifica la presenza di Note di prelievo su questa riga d'ordine
        If strTipodoc <> "W" Then
          'Apre il recordset sulle righe di Nota di prelievo se esistono
          If Not oCldBoll.GetMovprb(strDittaCorrente, True, dtrMovord!mo_tipork.ToString, NTSCInt(dtrMovord!mo_anno), _
                          dtrMovord!mo_serie.ToString, NTSCInt(dtrMovord!mo_numord), NTSCInt(dtrMovord!mo_riga), _
                          dttMovprb, dttMovprbTc, bModTCO) Then Return False
          For Each dtrNota As DataRow In dttMovprb.Rows
            'Loppa sulle righe di nota di prelievo ancora da chiudere
            bNotaPresente = True
            If Not bTuttoIlResiduo Then
              'Determina la quantità da considerare
              If dQuantResidua < (NTSCDec(dtrNota!mm_quant) - NTSCDec(dtrNota!mm_nprquaeva)) Then
                dQuantDaCons = dQuantResidua
                dQuantResidua = 0
                strFlevasPRB = "C"
                bTIRNota = False
              Else
                dQuantDaCons = NTSCDec(dtrNota!mm_quant) - NTSCDec(dtrNota!mm_nprquaeva)
                dQuantResidua = dQuantResidua - dQuantDaCons
                strFlevasPRB = "S"
                bTIRNota = True
              End If
            Else
              bTIRNota = True
            End If
            'dSc1, dSc2, dScPag e nCodeseOrd dovrebbero essere quelli della nota di prelievo al posto di quelli dell'ordine
            If strFlevasDaeva = "S" Then strFlevasPRB = "S" 'se l'ordine è a saldo deve esserlo anche la nota di prelievo che evade l'ordine
            If bModTCO Then
              If Not ScriviRigaNota(dttCorp, dtrNota, dttMovprbTc.Select("mm_riga = " & dtrNota!mm_riga.ToString), _
                            dSc1, dSc2, dScPag, nMagClav, bContoLavoroAttivo, dQuantDaCons, strFlevasDaeva, _
                            strFlevasPRB, bTIRNota, NTSCDate(dtrMovord!mo_ultagg), nCodeseOrd, _
                            CType(IIf(strTipo = "T", Nothing, dtrSelord), DataRow), bDocumentoU, lRifRigaT) Then
                Return False
              End If
            Else
              If Not ScriviRigaNota(dttCorp, dtrNota, Nothing, _
                            dSc1, dSc2, dScPag, nMagClav, bContoLavoroAttivo, dQuantDaCons, strFlevasDaeva, _
                            strFlevasPRB, bTIRNota, NTSCDate(dtrMovord!mo_ultagg), nCodeseOrd, _
                            CType(IIf(strTipo = "T", Nothing, dtrSelord), DataRow), bDocumentoU, lRifRigaT) Then
                Return False
              End If
            End If

            If dQuantResidua <= 0 And (Not bTuttoIlResiduo) Then
              Exit For
            End If
          Next
        End If

        '------------------------------
        ' Fine nota di prelievo
        'Esce se ha già soddisfatto la necessità
        If dQuantResidua <= 0 And (Not bTuttoIlResiduo) And (strFlevasDaeva <> "S") Then
          If dtrMovord!mo_tipork.ToString = "Y" Then
            '--- In VB6, caricava le righe "Y" anche con quantità a zero
          Else
            If strNetProDB <> "" And bInNuovoDocSilent And dtrMovord!mo_tipork.ToString = "H" Then
              'Net@Pro: se devo fare una rettifica ad una quantità caricata per errore (dovevo caricare 50 ho caricato 60) da netpro viene passato un carico da prod con qta negavita
              'proseguo
            Else
              Return True
            End If
          End If
        End If
        'Esce se la riga è prenotata a saldo
        If dtrMovord!mo_flevapre.ToString = "S" Then
          If bDocumentoU And dQuantResidua > 0 And (Not bTuttoIlResiduo) And bAumentoQta Then
            'va avanti inserendo la parte mancante non in nota di prelievo
          Else
            Return True
          End If
        End If

        '-------------------------------
        'Poi tratta la riga d'ordine
        'Magazzini/Causali
        If bDocumentoU Then
          If NTSCInt(!mo_magaz) = NTSCInt(dttET.Rows(0)!et_magimp) Then
            nMag1 = NTSCInt(dttET.Rows(0)!et_magimp)
          Else
            If bMantieniDatiDiTestata = True Then
              nMag1 = NTSCInt(dttET.Rows(0)!et_magimp)
            Else
              nMag1 = NTSCInt(!mo_magaz)
            End If
          End If
          nMag2 = 0
          nCau1 = NTSCInt(dttET.Rows(0)!et_causcap)
          nCau2 = 0
        Else
          If bMantieniMagRigheOrdine Then
            nMag1 = NTSCInt(!mo_magaz)
            nMag2 = NTSCInt(!mo_magaz2)
            If bSegnalaDiffMagaz = True Then
              If nMag1 <> NTSCInt(dttET.Rows(0)!et_magaz) Then
                ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 129213288174082600, _
                  "Attenzione!" & vbCrLf & _
                  "L'articolo '|" & NTSCStr(!mo_codart) & "|' - |" & NTSCStr(!mo_descr) & "|" & vbCrLf & _
                  "è stato ordinato su un altro magazzino.")))
              End If
            End If
          Else
            nMag1 = NTSCInt(dttET.Rows(0)!et_magaz)
            nMag2 = NTSCInt(dttET.Rows(0)!et_magaz2)
          End If
          nCau1 = NTSCInt(dttET.Rows(0)!et_causale)
          If dttTabucamTesta.Rows.Count > 0 Then
            nCau2 = NTSCInt(dttTabucamTesta.Rows(0)!tb_causec)
            Select Case dttTabucamTesta.Rows(0)!tb_testci.ToString
              Case " " : strFDarave = " "
              Case "A", "B" : strFDarave = "A"
              Case "D", "E" : strFDarave = "D"
            End Select
          Else
            strFDarave = " "
            nCau2 = 0
          End If
        End If    'If bDocumentoU Then

        '---------------------------------------------------------------------
        'Colli/quantità/flevas
        If Not bNotaPresente Then
          'Siamo su una riga che NON ha note di prelievo
          If bTuttoIlResiduo Then
            If strTipodoc = "W" Then
              dQuant = NTSCDec(!mo_quant) - NTSCDec(!mo_quaeva) - NTSCDec(!mo_quapre)
              dColli = NTSCDec(!mo_colli) - NTSCDec(!mo_coleva) - NTSCDec(!mo_colpre)
            Else
              dQuant = NTSCDec(!mo_quant) - NTSCDec(!mo_quaeva)
              dColli = NTSCDec(!mo_colli) - NTSCDec(!mo_coleva)
            End If
            strFlevas = "S"
          Else
            'Può essere superiore o inferiore al residuo
            dQuant = dQuantResidua
            'se sull'ordine non sono indicati i colli non li riporta
            If NTSCDec(!mo_colli) = 0 And !mo_ump.ToString = !mo_unmis.ToString Then
              dColli = 0
            Else
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mo_codart.ToString, !mo_ump.ToString, _
                      dQuant, NTSCDec(!mo_misura1), NTSCDec(!mo_misura2), NTSCDec(!mo_misura3), _
                      !mo_unmis.ToString, dColli, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
            End If
            strFlevas = strFlevasDaeva
          End If
        Else
          'Siamo su una riga CON note di prelievo
          If bTuttoIlResiduo Then
            dQuant = NTSCDec(!mo_quant) - NTSCDec(!mo_quaeva) - NTSCDec(!mo_quapre)
            dColli = NTSCDec(!mo_colli) - NTSCDec(!mo_coleva) - NTSCDec(!mo_colpre)

            strFlevas = "S"
          Else
            'Può essere superiore o inferiore al residuo
            dQuant = dQuantResidua
            'se sull'ordine non sono indicati i colli non li riporta
            If NTSCDec(!mo_colli) = 0 And !mo_ump.ToString = !mo_unmis.ToString Then
              dColli = 0
            Else
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mo_codart.ToString, !mo_ump.ToString, _
                      dQuant, NTSCDec(!mo_misura1), NTSCDec(!mo_misura2), NTSCDec(!mo_misura3), _
                      !mo_unmis.ToString, dColli, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
            End If
            strFlevas = strFlevasDaeva
          End If
        End If
        'Si assicura per gli importi negativi
        If dQuant < 0 Then
          dQuant = 0
          dColli = 0
        End If
        If dColli < 0 Then dColli = 0

        'Se abilitata opzione determina all'indietro i COLLI
        If bModifColliSuQuant Then
          If !mo_ump.ToString <> !mo_unmis.ToString And !mo_unmis.ToString <> " " Then
            If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mo_codart.ToString, !mo_ump.ToString, _
                      dQuant, NTSCDec(!mo_misura1), NTSCDec(!mo_misura2), NTSCDec(!mo_misura3), _
                      !mo_unmis.ToString, dColli, strErr, 3) Then
              If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
              Return False
            End If
          End If
        End If

        '-------------------------------------------------------------------
        'Codice esenzione
        If bRiportaCodeseInEvasione = False Then
          If nCodeseOrd = NTSCInt(dttET.Rows(0)!et_codese) Then
            nCodiva = NTSCInt(!mo_codiva)
          ElseIf nCodeseOrd > 0 And NTSCInt(dttET.Rows(0)!et_codese) = 0 Then
            nCodiva = NTSCInt(!ar_codiva)
          Else
            'ordine NON in esenzione, documento in esenzione
            nCodiva = NTSCInt(dttET.Rows(0)!et_codese)
          End If
        Else
          nCodiva = NTSCInt(!mo_codiva)
        End If
        '---------------------------------------------------------------------
        dPrezzo = NTSCDec(!mo_prezzo)
        dPrezvalc = NTSCDec(!mo_prezvalc)
        If NTSCDec(dttET.Rows(0)!et_valuta) <> 0 Then
          'Questo serve se il cambio del documento è diverso da quello dell'ordine
          dPrezzo = oCldDocu.ConvImpValuta(strDittaCorrente, True, NTSCDec(!mo_prezvalc), NTSCInt(dttET.Rows(0)!et_valuta), NTSCDate(dttET.Rows(0)!et_datdoc), NTSCDec(dttET.Rows(0)!et_cambio))
        End If
      End With    'With dtrMovord

      '---------------------------------------------------------------------
      'Parte
      If nMagClav = 0 Or (nMagClav <> 0 And nMagClav <> nMag1) Or dtrMovord!mo_codart.ToString = "D" Or dtrMovord!mo_codart.ToString = "M" Or bRifClavManuale Then
        If Not bConsMultiEvasRigheOrdNote Then
          'Controlla che la stessa riga di nota non sia già presente in 'strTabella'
          With dtrMovord
            If dttCorp.Select("ec_nptipo is null AND ec_npanno = 0 " & _
                              " AND ec_npserie is null AND ec_npnum = 0 " & _
                              " AND ec_npriga = 0 AND ec_ortipo = " & CStrSQL(!mo_tipork) & _
                              " AND ec_oranno = " & !mo_anno.ToString & " AND ec_orserie = " & CStrSQL(!mo_serie) & _
                              " AND ec_ornum = " & !mo_numord.ToString & " AND ec_orriga = " & !mo_riga.ToString).Length > 0 Then
              Return False
            End If
          End With    'With dtrMovprb
        End If

        'Se è un padre kit salva nel campo mm_ktriga il campo mm_riga
        If dtrMovord!mo_flkit.ToString = "A" Or dtrMovord!mo_flkit.ToString = "S" Then bKitDaOrdini = True

        'Scrive la riga
        bInImportRigheOrd = True
        dttCorp.Rows.Add(dttCorp.NewRow)
        bAdded = True
        '----------------------------
        'inserisco la riga nel corpo del documento
        If Not ScriviRigaOrd_InsertInto(dttCorp, dtrMovord, bDocumentoU, lRifRigaT, strFlevas, _
                                         nCau1, nCau2, nMag1, nMag2, nCodiva, dColli, dQuant, _
                                         dPrezzo, dPrezvalc) Then Return False
        '----------------------------
        'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
        'lo fa già in automatico
        '----------------------------
        'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
        If Not ScriviRigaOrd_SalvaRiga(strTipo, bDocumentoU, dtrMovord, dttCorp, dtrMovordTc, bAddedTc, bTuttoIlResiduo, dtrSelord) Then Return False

      Else

        dQuantRES = ArrDbl(dQuant, 3)
        dColliRes = ArrDbl(dColli, 3)
        If bContoLavoroAttivo Then
          If Not ApriSaldiClavProd(dttET.Rows(0), NTSCStr(dtrMovord!mo_codart), NTSCInt(dtrMovord!mo_fase), nMagClav, dttMcla) Then
            'Si è verificato un errore determ. i saldi di c/lav
            'continuo non considerando carichi di c/lav
            GoTo SkipsaldiClav
          End If
        Else
          If Not ApriSaldiClav(dttET.Rows(0), NTSCStr(dtrMovord!mo_codart), NTSCInt(dtrMovord!mo_fase), nMagClav, dttMcla, _
                               NTSCInt(dtrMovord!mo_commeca), bTMclav, lTmNumIT) Then
            'Si è verificato un errore determ. i saldi di c/lav
            'continuo non considerando carichi di c/lav
            GoTo SkipsaldiClav
          End If
        End If

        With dtrMovord
          strUnmis = NTSCStr(dtrMovord!mo_unmis)
          nRowCla = 0
          Do While nRowCla < dttMcla.Rows.Count And dQuantRES <> 0

            strUnmis = NTSCStr(!mo_unmis)
            If ArrDbl(NTSCDec(dttMcla.Rows(nRowCla)!Saldo), 3) >= dQuantRES Then
              dQuant = dQuantRES
              dColli = dColliRes
              dQuantRES = 0
              dColliRes = 0
            Else
              dQuant = ArrDbl(NTSCDec(dttMcla.Rows(nRowCla)!Saldo), 3)
              dQuantRES = ArrDbl(dQuantRES - dQuant, 3)
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mo_codart.ToString, !mo_ump.ToString, _
                                  dQuant, NTSCDec(!mo_misura1), NTSCDec(!mo_misura2), NTSCDec(!mo_misura3), _
                                  !mo_unmis.ToString, dColli, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
              If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !mo_codart.ToString, !mo_ump.ToString, _
                                  dQuantRES, NTSCDec(!mo_misura1), NTSCDec(!mo_misura2), NTSCDec(!mo_misura3), _
                                  !mo_unmis.ToString, dColliRes, strErr, 3) Then
                If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
                Return False
              End If
            End If
            If dColli < 0 Then dColli = 0
            If !mo_flkit.ToString = "A" Or !mo_flkit.ToString = "S" Then bKitDaOrdini = True
            'Riporta il lotto (tranne se l'opzione è abilitata)
            lLotto = NTSCInt(!mo_lotto)
            If Not bNonRiportareLottiDaCLav Then
              'Legge il lotto dalla riga (solo se la riga non l'ha già attribuito), possono essere nulli...
              If lLotto = 0 Then
                lLotto = LeggiLottoRiga(NTSCStr(dttMcla.Rows(nRowCla)!mm_cltipo), NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno), NTSCStr(dttMcla.Rows(nRowCla)!mm_clserie), NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum), NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga))
              End If
            End If

            'Scrive la riga
            bInImportRigheOrd = True
            dttCorp.Rows.Add(dttCorp.NewRow)
            bAdded = True
            '----------------------------
            'inserisco la riga nel corpo del documento
            If Not ScriviRigaOrd_InsertInto(dttCorp, dtrMovord, bDocumentoU, lRifRigaT, strFlevas, _
                                             nCau1, nCau2, nMag1, nMag2, nCodiva, dColli, dQuant, _
                                             dPrezzo, dPrezvalc) Then Return False
            With dttCorp.Rows(dttCorp.Rows.Count - 1)
              !ec_lotto = lLotto
              !ec_salcon = IIf(strFlevas = "C", "C", IIf(dQuantRES = 0, "S", "C")).ToString
              If bContoLavoroAttivo Then
                !ec_cctipo = dttMcla.Rows(nRowCla)!mm_cltipo
                !ec_ccanno = NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno)
                !ec_ccserie = dttMcla.Rows(nRowCla)!mm_clserie
                !ec_ccnum = NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum)
                !ec_ccriga = NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga)
              Else
                !ec_cltipo = dttMcla.Rows(nRowCla)!mm_cltipo
                !ec_clanno = NTSCInt(dttMcla.Rows(nRowCla)!mm_clanno)
                !ec_clserie = dttMcla.Rows(nRowCla)!mm_clserie
                !ec_clnum = NTSCInt(dttMcla.Rows(nRowCla)!mm_clnum)
                !ec_clriga = NTSCInt(dttMcla.Rows(nRowCla)!mm_clriga)
              End If
            End With
            '----------------------------
            'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
            'lo fa già in automatico
            '----------------------------
            'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
            If Not ScriviRigaOrd_SalvaRiga(strTipo, bDocumentoU, dtrMovord, dttCorp, dtrMovordTc, bAddedTc, bTuttoIlResiduo, dtrSelord) Then Return False

            nRowCla += 1
          Loop    'Do While nRowCla < dttMcla.Rows.Count And dQuantRES <> 0
          dttMcla.Clear()
        End With    'With dtrMovprb
SkipsaldiClav:

        If dQuantRES <> 0 Then
          ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128734888020759839, "Articolo |" & dtrMovord!mo_codart.ToString & "|, magazzino |" & nMag1.ToString & "|: non ci sono sufficienti carichi di conto lavorazione nel magazzino indicato. Quantità mancante: |" & dQuantRES.ToString(oApp.FormatQta) & "|")))

          dQuant = dQuantRES
          dColli = dColliRes
          If dtrMovord!mo_flkit.ToString = "A" Or dtrMovord!mo_flkit.ToString = "S" Then bKitDaOrdini = True

          'Scrive la riga
          bInImportRigheOrd = True
          dttCorp.Rows.Add(dttCorp.NewRow)
          bAdded = True
          '----------------------------
          'inserisco la riga nel corpo del documento
          If Not ScriviRigaOrd_InsertInto(dttCorp, dtrMovord, bDocumentoU, lRifRigaT, strFlevas, _
                                           nCau1, nCau2, nMag1, nMag2, nCodiva, dColli, dQuant, _
                                           dPrezzo, dPrezvalc) Then Return False

          '----------------------------
          'Carica i materiali CONAI (NO SUI DOCUMENTI IN SCORPORO)
          'lo fa già in automatico
          '----------------------------
          'test pre-salva riga e salva riga, con aggiunta di dettaglio TCO
          If Not ScriviRigaOrd_SalvaRiga(strTipo, bDocumentoU, dtrMovord, dttCorp, dtrMovordTc, bAddedTc, bTuttoIlResiduo, dtrSelord) Then Return False

        End If    'If dQuantRES <> 0 Then
      End If    'If nMagClav = 0 Or (nMagClav <> 0 And nMagClav <> nMag1) Or dtrMovprb!mm_codart.ToString = "D" Or dtrMovprb!mm_codart.ToString = "M" Or bRifClavManuale Then

      bAdded = False

      Return True

    Catch ex As Exception
      If bAdded Then dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
      If bAddedTc Then dttECTC.Rows(dttECTC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      If bDocumentoU Then dtrHT = Nothing
      dttMcla.Clear()
      dttMovprb.Clear()
      dttMovprbTc.Clear()
      bInImportRigheOrd = False
    End Try
  End Function
  Public Overridable Function ScriviRigaOrd_Pers(ByRef dtrNew As DataRow, ByRef dtrOld As DataRow) As Boolean
    Try
      'a disposizione per rive per caricare campi personalizzati di note prelievo in fase di import righe da nota prelievo
      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ScriviRigaOrd_InsertInto(ByRef dttCorpo As DataTable, _
                                      ByRef dtrMovord As DataRow, ByVal bDocumentoU As Boolean, _
                                      ByVal lRifRigaT As Integer, ByVal strFlevas As String, _
                                      ByVal nCau1 As Integer, ByVal nCau2 As Integer, ByVal nMag1 As Integer, _
                                      ByVal nMag2 As Integer, ByVal ncodiva As Integer, _
                                      ByVal dColli As Decimal, ByVal dQuant As Decimal, _
                                      ByVal dPrezzo As Decimal, ByVal dPrezvalc As Decimal) As Boolean
    Dim dMMValdisimp As Decimal = 0
    Try
      With dttCorpo.Rows(dttCorpo.Rows.Count - 1)
        'forzo la MovordOnAddNewRow
        !codditt = "."
        !codditt = strDittaCorrente
        !ec_causale = nCau1
        !ec_causale2 = nCau2
        !ec_magaz = nMag1
        !ec_magaz2 = nMag2
        !ec_codart = dtrMovord!mo_codart.ToString
        !ec_fase = NTSCInt(dtrMovord!mo_fase)
        !ec_descr = dtrMovord!mo_descr
        !ec_desint = dtrMovord!mo_desint
        !ec_codiva = ncodiva
        !ec_controp = dtrMovord!mo_controp
        !ec_codtpro = dtrMovord!mo_codtpro
        !ec_note = dtrMovord!mo_note
        !ec_stasino = IIf(dQuant = 0 And strFlevas = "S" And NTSCDec(dtrMovord!mo_quant) <> 0, "N", dtrMovord!mo_stasino) 'dtrMovord!mo_stasino
        !ec_flkit = dtrMovord!mo_flkit
        !ec_ktriga = NTSCInt(IIf(dtrMovord!mo_flkit.ToString = "A" Or dtrMovord!mo_flkit.ToString = "S", dtrMovord!mo_riga, dtrMovord!mo_ktriga))
        If NTSCStr(dtrMovord!mo_matric) <> " " Then !ec_matric = dtrMovord!mo_matric
        !ec_commen = dtrMovord!mo_commen
        '------------------
        !ec_prtipo = IIf(bDocumentoU, "T", DBNull.Value)
        !ec_pranno = IIf(bDocumentoU, !ec_anno, 0)
        !ec_prserie = IIf(bDocumentoU, !ec_serie, DBNull.Value)
        !ec_prnum = IIf(bDocumentoU, !ec_numdoc, 0)
        !ec_prriga = IIf(bDocumentoU, lRifRigaT, 0)
        '------------------
        !ec_codcfam = dtrMovord!mo_codcfam
        !ec_codcena = dtrMovord!mo_codcena
        !ec_commeca = dtrMovord!mo_commeca
        !ec_subcommeca = dtrMovord!mo_subcommeca
        !ec_coddivi = dtrMovord!mo_coddivi
        !ec_codcfam = dtrMovord!mo_codcfam
        !ec_ubicaz = dtrMovord!mo_ubicaz
        '------------------
        'quantità
        !ec_misura1 = NTSCDec(dtrMovord!mo_misura1)
        !ec_misura2 = NTSCDec(dtrMovord!mo_misura2)
        !ec_misura3 = NTSCDec(dtrMovord!mo_misura3)
        !ec_unmis = NTSCStr(dtrMovord!mo_unmis)
        !ec_colli = dColli
        !ec_quant = dQuant
        '------------------
        'prezzi
        !ec_flprznet = dtrMovord!mo_flprznet
        !ec_umprz = dtrMovord!mo_umprz

        'devo impostarlo prima di inserire i prezzi/sconti, diversamente se nell'ordine ho indicato prezzo = 0 
        'nella beforecolupdate di pm_taskid viene ricalcolato e non viene mantenutil prezzo dell'ordine!!!!
        !ec_pmtaskid = dtrMovord!mo_pmtaskid

        'devo ricalcolare il prezzo solo se no carico da prod e opzione abilitata
        If nRicalcPrezziOrd <> 0 And (dttET.Rows(0)!et_tipork.ToString <> "T" Or (dttET.Rows(0)!et_tipork.ToString = "T" And bDocumentoU)) And NTSCDec(!ec_prezzo) <> 0 Then
          'il prezzo è già stato calcolato nella validazione dell'articolo
          'prendo quello dell'ordine solo se il prezzo ricalcolato è = 0
        Else
          !ec_prezivav = NTSCDec(dtrMovord!mo_prezivav)
          !ec_preziva = NTSCDec(dtrMovord!mo_preziva)
          !ec_prezvalc = dPrezvalc
          !ec_prezzo = dPrezzo
          !ec_prelist = NTSCDec(dtrMovord!mo_prelist)
        End If    'If nRicalcPrezziOrd <> 0 And (dttET.Rows(0)!et_tipork.ToString <> "T" Or (dttET.Rows(0)!et_tipork.ToString = "T" And bDocumentoU)) Then

        If (nRicalcScontiOrd <> 0 And dttET.Rows(0)!et_tipork.ToString <> "T") And _
           (NTSCDec(!ec_scont1) <> 0 Or NTSCDec(!ec_scont2) <> 0 Or NTSCDec(!ec_scont3) <> 0 _
           Or NTSCDec(!ec_scont4) <> 0 Or NTSCDec(!ec_scont5) <> 0 Or NTSCDec(!ec_scont6) <> 0) Then
          'gli sconti sono stati calcolati nella validazione dell'articolo
          'prendo quello dell'ordine solo se tutti gli sconti sono = 0
        Else
          !ec_scont1 = NTSCDec(dtrMovord!mo_scont1)
          !ec_scont2 = NTSCDec(dtrMovord!mo_scont2)
          !ec_scont3 = NTSCDec(dtrMovord!mo_scont3)
          !ec_scont4 = NTSCDec(dtrMovord!mo_scont4)
          !ec_scont5 = NTSCDec(dtrMovord!mo_scont5)
          !ec_scont6 = NTSCDec(dtrMovord!mo_scont6)
          !ec_scontp = NTSCDec(dtrMovord!mo_scontp)
          !ec_scontv = 0
        End If

        If dtrMovord!mo_flprznet.ToString = "S" Then
          !ec_scont1 = 0
          !ec_scont2 = 0
          !ec_scont3 = 0
          !ec_scont4 = 0
          !ec_scont5 = 0
          !ec_scont6 = 0
        End If

        If bDocumentoU Then
          'negli scarichi a produzione / impegni di produzione gli sconti sono sempre = 0
          !ec_scont1 = 0
          !ec_scont2 = 0
          !ec_scont3 = 0
          !ec_scont4 = 0
          !ec_scont5 = 0
          !ec_scont6 = 0
          !ec_scontp = 0
          !ec_scontv = 0
        End If

        !ec_codrepr1 = dtrMovord!mo_codrepr1
        !ec_codrepr2 = dtrMovord!mo_codrepr2
        !ec_codrepr3 = dtrMovord!mo_codrepr3
        !ec_codrepr4 = dtrMovord!mo_codrepr4
        !ec_codrepr5 = dtrMovord!mo_codrepr5
        !ec_codrepr6 = dtrMovord!mo_codrepr6
        !ec_codrepr1out = dtrMovord!mo_codrepr1out
        !ec_codrepr2out = dtrMovord!mo_codrepr2out
        !ec_codrepr3out = dtrMovord!mo_codrepr3out
        !ec_codrepr4out = dtrMovord!mo_codrepr4out
        !ec_codrepr5out = dtrMovord!mo_codrepr5out
        !ec_codrepr6out = dtrMovord!mo_codrepr6out

        !ec_tiporiga = dtrMovord!mo_tiporiga
        !ec_flprzmod = dtrMovord!mo_flprzmod

        !ec_flsc1mod = dtrMovord!mo_flsc1mod
        !ec_flsc2mod = dtrMovord!mo_flsc2mod
        !ec_flsc3mod = dtrMovord!mo_flsc3mod
        !ec_flsc4mod = dtrMovord!mo_flsc4mod
        !ec_flsc5mod = dtrMovord!mo_flsc5mod
        !ec_flsc6mod = dtrMovord!mo_flsc6mod

        !ec_flprov1mod = dtrMovord!mo_flprov1mod
        !ec_flprov2mod = dtrMovord!mo_flprov2mod
        !ec_scpercdiff = dtrMovord!mo_scpercdiff
        !ec_prov1percdiff = dtrMovord!mo_prov1percdiff
        !ec_prov2percdiff = dtrMovord!mo_prov2percdiff

        If (nRicalcProvvOrd <> 0 And dttET.Rows(0)!et_tipork.ToString <> "T") And _
          (NTSCDec(!ec_provv) <> 0 Or NTSCDec(!ec_provv2) <> 0) Then
          'le provvigioni sono state calcolate nella validazione dell'articolo
          'prendo quello dell'ordine solo se sono <> 0
        Else
          !ec_ricimp = dtrMovord!mo_ricimp
          !ec_provv = dtrMovord!mo_provv
          !ec_provv2 = dtrMovord!mo_provv2
        End If
        !ec_codclie = dtrMovord!mo_codclie

        If bNonEreditareDateCompDaOrd = True Then
          If nDatiniCompMese = -1 Then
            !ec_datini = NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1) 'propongo il primo del mese 
            !ec_datfin = NTSCDate(dttET.Rows(0)!et_datdoc).AddDays((NTSCDate(dttET.Rows(0)!et_datdoc).Day - 1) * -1) 'propongo il primo del mese 
          Else
            !ec_datini = dttET.Rows(0)!et_datdoc
            !ec_datfin = dttET.Rows(0)!et_datdoc
          End If
        Else
          !ec_datini = dtrMovord!mo_datini
          !ec_datfin = dtrMovord!mo_datfin
        End If

        If NTSCStr(!ec_umprz) <> "S" Then
          dMMValdisimp = ArrDbl(ArrDbl(dPrezzo * dQuant / NTSCDec(!ec_perqta) * (100 - NTSCDec(!ec_scont1)) / 100 * (100 - NTSCDec(!ec_scont2)) / 100 * (100 - NTSCDec(!ec_scont3)) / 100 * (100 - NTSCDec(!ec_scont4)) / 100 * (100 - NTSCDec(!ec_scont5)) / 100 * (100 - NTSCDec(!ec_scont6)) / 100 * (100 - NTSCDec(!ec_scontp)) / 100 - NTSCDec(!ec_scontv), oCldBoll.TrovaNdec(0)) * (100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100, oCldBoll.TrovaNdec(0))
        Else
          dMMValdisimp = ArrDbl(ArrDbl(dPrezzo * dColli / NTSCDec(!ec_perqta) * (100 - NTSCDec(!ec_scont1)) / 100 * (100 - NTSCDec(!ec_scont2)) / 100 * (100 - NTSCDec(!ec_scont3)) / 100 * (100 - NTSCDec(!ec_scont4)) / 100 * (100 - NTSCDec(!ec_scont5)) / 100 * (100 - NTSCDec(!ec_scont6)) / 100 * (100 - NTSCDec(!ec_scontp)) / 100 - NTSCDec(!ec_scontv), oCldBoll.TrovaNdec(0)) * (100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100 * (100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100, oCldBoll.TrovaNdec(0))
        End If

        '------------------
        !ec_ortipo = dtrMovord!mo_tipork
        !ec_oranno = dtrMovord!mo_anno
        !ec_orserie = dtrMovord!mo_serie
        !ec_ornum = dtrMovord!mo_numord
        !ec_orriga = dtrMovord!mo_riga
        !ec_salcon = strFlevas
        !ec_coldisimp = dColli
        !ec_qtadisimp = dQuant
        !ec_valdisimp = dMMValdisimp
        If NTSCInt(!ec_lotto) = 0 Then !ec_lotto = dtrMovord!mo_lotto ' Altrimenti viene azzerato dopo aver impostato ec_orriga
        !xxo_orultagg = dtrMovord!mo_ultagg

        '------------------
        If bModPM Then
          If Not ScriviRigaOrdNota_InsertIntoPM(dttCorpo, bDocumentoU, lRifRigaT, NTSCInt(!ec_commeca), NTSCInt(!ec_pmtaskid)) Then
            dttCorpo.Rows(dttCorpo.Rows.Count - 1).Delete()
            Return False
          End If
        End If

        !ec_tctaglia = dtrMovord!mo_tctaglia
        !ec_tcindtagl = dtrMovord!mo_tcindtagl
        If bDocumentoU Then
          !xxo_tcindtaglf = dtrMovord!xxo_tcindtaglf
          !xxo_tctagliaf = dtrMovord!xxo_tctagliaf
        End If
      End With    'With dttEC.Rows(dttEC.Rows.Count - 1)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      'gestione errori particolare.... deve girare l'errore come se la routine fosse dentro alla 'ScriviRigaOrd'
      Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
    End Try
  End Function

  Public Overridable Function ScriviRigaOrd_SalvaRiga(ByVal strTipo As String, ByVal bDocumentoU As Boolean, ByVal dtrMovord As DataRow, _
                                                        ByRef dttCorp As DataTable, ByRef dtrMovordTc() As DataRow, _
                                                        ByRef bAddedTc As Boolean, ByVal bTuttoIlResiduo As Boolean, _
                                                        ByRef dtrSelord As DataRow) As Boolean
    Dim i As Integer = 0
    Try
      '-----------------------------------------------------------------------------------------
      'se articolo TCO completo il dettaglio TCO
      'griglia TCO gestita solo su griglia principale, non su scarichi 
      If bModTCO And bDocumentoU = False And dtrMovordTc.Length > 0 Then
        bAddedTc = True
        With dttECTC.Rows(dttECTC.Rows.Count - 1)
          For i = 1 To 24
            If Not dtrSelord Is Nothing And strTipo <> "T" Then   'prendo le quantità dallo zoom righe ordini
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_quant" & i.ToString("00")) = dtrSelord("tt_quadaeva" & i.ToString("00"))
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_qtadis" & i.ToString("00")) = dtrSelord("tt_quadaeva" & i.ToString("00"))
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_npqtadis" & i.ToString("00")) = 0
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_nprquae" & i.ToString("00")) = 0
            Else
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_quant" & i.ToString("00")) = ArrDbl(NTSCDec(dtrMovordTc(0)("mo_quant" & i.ToString("00"))) - NTSCDec(dtrMovordTc(0)("mo_quaeva" & i.ToString("00"))) - NTSCDec(dtrMovordTc(0)("mo_quapre" & i.ToString("00"))), 3)
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_qtadis" & i.ToString("00")) = NTSCDec(dtrMovordTc(0)("mo_quant" & i.ToString("00"))) - NTSCDec(dtrMovordTc(0)("mo_quaeva" & i.ToString("00")))
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_npqtadis" & i.ToString("00")) = 0
              dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_nprquae" & i.ToString("00")) = 0
            End If
          Next
        End With
      End If

      If Not ScriviRigaOrd_Pers(dttCorp.Rows(dttCorp.Rows.Count - 1), dtrMovord) Then
        dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
        Return False
      End If

      If bDocumentoU Then
        If Not CorpoImpRecordSalva(dttCorp.Rows.Count - 1, False, Nothing) Then
          dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
          Return False
        End If
      Else
        If Not RecordSalva(dttCorp.Rows.Count - 1, False, Nothing) Then
          dttCorp.Rows(dttCorp.Rows.Count - 1).Delete()
          Return False
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      'gestione errori particolare.... deve girare l'errore come se la routine fosse dentro alla 'ScriviRigaOrd'
      Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
    End Try
  End Function
  Public Overridable Function ScriviRigaLav(ByRef dtrCorpT As DataRow, ByRef dtrAt As DataRow, _
                                        ByVal lRigaT As Integer, ByVal dQuaDaEva As Decimal, _
                                        ByVal strFlevasDaeva As String, ByVal bTuttoIlResiduo As Boolean, _
                                        ByVal dRapporto As Decimal) As Boolean
    'chiamata da ImportaOrdini scrive la riga nelle lavorazioni collegate
    Dim dttTmp As New DataTable
    Dim dQuantResidua As Decimal = 0
    Dim dQuant As Decimal, dQuantScart As Decimal, dTatt As Decimal, dTese As Decimal, dValore As Decimal, dValmo As Decimal, dValorev As Decimal
    Dim dPrezzo As Decimal, dPrezvalc As Decimal
    Dim strFlevas As String = "C"
    Dim dRappLCE As Decimal = 0
    Dim strErr As String = ""
    Dim dColli As Decimal
    Dim bAdded As Boolean = False

    Try
      dQuantResidua = dQuaDaEva
      dtrHT = dtrCorpT

      '---------------------------------------------------------------------
      'Prima verifica la presenza di AVANZAMENTI DI LAVORAZIONE
      'Solo se non è un carico di produzione interno
      If Not bTerzista Then
        'ottengo le righe di avanzamento produzione collegate all'ordine 
        If Not oCldBoll.GetLavcentFromOrd(strDittaCorrente, dtrAt!at_tipork.ToString, NTSCInt(dtrAt!at_anno), _
                                          dtrAt!at_serie.ToString, NTSCInt(dtrAt!at_numord), NTSCInt(dtrAt!at_riga), _
                                           NTSCInt(dtrAt!at_fase), dttTmp) Then Return False
        For Each dtrTmp As DataRow In dttTmp.Rows
          With dtrTmp
            If bTuttoIlResiduo Or dQuantResidua >= (NTSCDec(!lce_qtaes) - NTSCDec(!lce_grqtaeva)) Then
              'Calcola le quantità, i tempi e i valori rimanenti nel LAVCENT G
              dQuant = NTSCDec(!lce_qtaes) - NTSCDec(!lce_grqtaeva)
              dQuantResidua = dQuantResidua - dQuant
              dQuantScart = NTSCDec(!lce_qtascart) - NTSCDec(!lce_grqtaevasca)
              dTatt = NTSCDec(!lce_tempatte) - NTSCDec(!lce_grtatteva)
              If dTatt < 0 Then dTatt = 0
              dTese = NTSCDec(!lce_tempese) - NTSCDec(!lce_grteseeva)
              dValore = ArrDbl((dTatt * NTSCDec(!lce_cmacoratt)) + (dTese * NTSCDec(!lce_cmacora)), oCldBoll.TrovaNdec(0))
              dValmo = ArrDbl((dTatt * NTSCDec(!lce_pagaoratt)) + (dTese * NTSCDec(!lce_pagaora)), oCldBoll.TrovaNdec(0))
              strFlevas = "S"
            Else
              'Una quantità diversa dal residuo (può essere solo meno)
              dQuant = dQuantResidua
              dQuantResidua = 0
              'Determina il rapporto fra qta residua e qta da considerare
              If NTSCDec(!lce_qtaes) - NTSCDec(!lce_grqtaeva) <> 0 Then dRappLCE = dQuant / (NTSCDec(!lce_qtaes) - NTSCDec(!lce_grqtaeva)) Else dRappLCE = 0
              dQuantScart = ArrDbl(dRappLCE * (NTSCDec(!lce_qtascart) - NTSCDec(!lce_grqtaevasca)), 3)
              dTatt = ArrDbl(dRappLCE * (NTSCDec(!lce_tempatte) - NTSCDec(!lce_grtatteva)), 4)
              If dTatt < 0 Then dTatt = 0
              dTese = ArrDbl(dRappLCE * (NTSCDec(!lce_tempese) - NTSCDec(!lce_grteseeva)), 4)
              dValore = ArrDbl((dTatt * NTSCDec(!lce_cmacoratt)) + (dTese * NTSCDec(!lce_cmacora)), oCldBoll.TrovaNdec(0))
              dValmo = ArrDbl((dTatt * NTSCDec(!lce_pagaoratt)) + (dTese * NTSCDec(!lce_pagaora)), oCldBoll.TrovaNdec(0))
              strFlevas = "C"
            End If
            If Not bConsMultiEvasRigheOrdNote Then
              'Controlla la presenza della riga nel temporaneo
              If dttLAVCENT.Select("lce_ortipo = '" & dtrAt!at_tipork.ToString & _
                                  "' AND lce_oranno = " & dtrAt!at_anno.ToString & _
                                  " AND lce_orserie = '" & dtrAt!at_serie.ToString & _
                                  "' AND lce_ornum = " & dtrAt!at_numord.ToString & _
                                  " AND lce_orriga = " & dtrAt!at_riga.ToString & _
                                  " AND lce_orfase = " & dtrAt!at_fase.ToString & _
                                  " AND lce_gtipork = '" & !lce_tipork.ToString & _
                                  "' AND lce_ganno = " & !lce_anno.ToString & _
                                  " AND lce_gserie = '" & !lce_serie.ToString & _
                                  "' AND lce_gnumdoc = " & !lce_numdoc.ToString & _
                                  " AND lce_griga = " & !lce_riga.ToString & _
                                  " AND lce_grigaa = " & !lce_grigaa.ToString).Length > 0 Then
                Return False
              End If
            End If
          End With    'With dtrTmp

          '--------------------
          'Scrive il record
          dttLAVCENT.Rows.Add(dttLAVCENT.NewRow)
          bAdded = True
          With dttLAVCENT.Rows(dttLAVCENT.Rows.Count - 1)
            'forzo la AttivitOnAddNewRow
            !codditt = "."
            !codditt = strDittaCorrente
            !lce_riga = lRigaT
            '  '!lce_rigaa = ...      'impostata in automatico nella OnAddNew
            !lce_codart = dtrCorpT!ec_codart
            !lce_codlavo = dtrTmp!lce_codlavo

            'spostate da sotto a sopra l'assegnazione dei tempi, altrimenti al cambio di lce_qtaes 
            'veniva ricalcolato anche lce_tempese perdendo il valore iniziale se erano stati fatti 
            'avanzamenti di porduzione con bndbavla
            !lce_qtaes = dQuant
            !lce_qtascart = dQuantScart

            !lce_tempatte = dTatt
            !lce_tempese = dTese
            !lce_tempattees = dTatt
            !lce_tempesees = dTese
            !lce_flevas = IIf(strFlevas = "C", "C", dtrTmp!lce_flevas).ToString
            !lce_codcent = dtrTmp!lce_codcent
            !lce_controp = dtrTmp!lce_controp     'imposta anche contocontr
            !lce_codcena = dtrTmp!lce_codcena

            !lce_start = dtrTmp!lce_start
            !lce_stop = dtrTmp!lce_stop
            !lce_cmacora = dtrTmp!lce_cmacora
            !lce_pagaora = dtrTmp!lce_pagaora
            !lce_cmacoratt = dtrTmp!lce_cmacoratt
            !lce_pagaoratt = dtrTmp!lce_pagaoratt
            !lce_valore = dValore
            !lce_valmo = dValmo
            !lce_valorev = dtrTmp!lce_valorev

            !lce_commeca = dtrCorpT!ec_commeca
            !lce_subcommeca = dtrCorpT!ec_subcommeca
            !lce_codcfam = dtrCorpT!ec_codcfam
            !lce_note = dtrTmp!lce_note

            !lce_flelab = dtrTmp!lce_flelab
            !lce_flcom = dtrTmp!lce_flcom
            !lce_unlav = dtrTmp!lce_unlav
            !lce_codcope = dtrTmp!lce_codcope

            '-------------------
            !lce_ortipo = dtrTmp!lce_ortipo
            !lce_oranno = dtrTmp!lce_oranno
            !lce_orserie = dtrTmp!lce_orserie
            !lce_ornum = dtrTmp!lce_ornum
            !lce_orriga = dtrTmp!lce_orriga
            !lce_orfase = dtrTmp!lce_orfase

            '-------------------
            !lce_gtipork = "G"
            !lce_ganno = dtrTmp!lce_anno
            !lce_gserie = dtrTmp!lce_serie
            !lce_gnumdoc = dtrTmp!lce_numdoc
            !lce_griga = dtrTmp!lce_riga
            !lce_grigaa = dtrTmp!lce_rigaa
          End With    'With dttLAVCENT.Rows(dttLAVCENT.Rows.Count - 1)

          If dQuantResidua <= 0 And Not (bTuttoIlResiduo) Then
            Exit For
          End If
        Next    'For Each dtrTmp As DataRow In dttTmp.Rows

        'Esce se ha già soddisfatto la necessità
        If dQuantResidua <= 0 And (Not bTuttoIlResiduo) Then
          Return True
        End If

      End If    'If Not bTerzista Then

      '---------------------------
      'Poi tratta la riga di ATTIVIT/ASSRISS
      'Salta se con ci sono rif. a G/T e se l'attività è comunque evasa
      With dtrAt
        If !at_flevas.ToString = "S" Then
          Return True
        End If

        If bTuttoIlResiduo Then
          'Determina il residuo
          dQuant = NTSCDec(!at_qtapr) - NTSCDec(!at_qtaes)
          If dQuant < 0 Then dQuant = 0
          '%%%
          If dtrCorpT!ec_umprz.ToString = "S" Then
            If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, dtrCorpT!ec_codart.ToString, dtrCorpT!ec_ump.ToString, _
                                                          dQuant, 0, 0, 0, dtrCorpT!ec_unmis.ToString, dColli, strErr, 3) Then
              If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
              Return False
            End If
          End If
          '%%%
          dTatt = NTSCDec(!at_tempattpr) - NTSCDec(!at_tempattees)
          If dTatt < 0 Then dTatt = 0
          dTese = NTSCDec(!at_tempesepr) - NTSCDec(!at_tempesees)
          If dTese < 0 Then dTese = 0
          dValore = ArrDbl((dTatt * NTSCDec(!as_cmacoratt)) + (dTese * NTSCDec(!as_cmacora)), oCldBoll.TrovaNdec(0))
          dValmo = ArrDbl((dTatt * NTSCDec(!as_pagaoratt)) + (dTese * NTSCDec(!as_pagaora)), oCldBoll.TrovaNdec(0))
          dValorev = 0
          dPrezvalc = 0
          'Costo lavorazione terzista
          If bTerzista Then
            If bRiportaCostiLavOPT Then
              dPrezzo = NTSCDec(dtrCorpT!ec_prezzo)
              dPrezvalc = NTSCDec(dtrCorpT!ec_prezvalc)
            Else
              'già fatto in automatico
              '  '%%%
              '  If dtrCorpT!ec_umprz.ToString <> "S" Then
              '    objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, "", dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dQuant, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '  Else
              '    objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, dtrCorpT!ec_unmis, dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dColli, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '    If dPrezzo = 0 Then
              '      objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, dtrCorpT!ec_ump, dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dQuant, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '      If dPrezzo <> 0 Then
              '        ConvertiPrezzoperUM(ConvNullStr(dtrCorpT!ec_codart), dtrCorpT!ec_unmis, dPrezzo, Val(edValuta.Text))
              '      End If
              '    End If
              '  End If
              '  '%%%
              '  If bVal Then
              '    dPrezvalc = dPrezzo
              '    dPrezzo = objStd.ConvPrezzoUnValuta(dPrezvalc, Val(edValuta.Text), edDatdoc.Text, CDbl(edCambio), bCanc)
              '  Else
              '    dPrezvalc = 0
              '  End If
              '  'quindi lo va a scrivere in mm_prezzo/mm_prezvalc
              '  strSQL = "UPDATE mmtrans SET mm_prezzo = " & ConvDblSQL(dPrezzo) & ", mm_prezvalc = " & ConvDblSQL(dPrezvalc) & _
              '    " WHERE codditt = " & ConvStrNullSql(gstrExt) & _
              '    " AND mm_tipork = 'T' AND instid = " & lIIMmtrans & " AND mm_riga = " & lRigaT
              '  gdb.Execute(strSQL)
            End If
            'già fatto in automatico
            '''Attenzione non tiene conto degli sconti di riga
            ''If dtrCorpT!ec_umprz.ToString <> "S" Then
            ''  dValorev = ArrDbl(dPrezvalc * dQuant / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta)))
            ''  dValore = ArrDbl(dPrezzo * dQuant / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(0))
            ''  dValmo = 0
            ''Else
            ''  dValorev = ArrDbl(dPrezvalc * NTSCDec(dtrCorpT!ec_colli) / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta)))
            ''  dValore = ArrDbl(dPrezzo * NTSCDec(dtrCorpT!ec_colli) / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(0))
            ''  dValmo = 0
            ''End If
          End If    'If bTerzista Then
          strFlevas = "S"
        Else
          'Può essere superiore o inferiore al residuo
          dQuant = dQuantResidua
          '%%%
          If dtrCorpT!ec_umprz.ToString = "S" Then
            If Not CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, dtrCorpT!ec_codart.ToString, dtrCorpT!ec_ump.ToString, _
                                                          dQuant, 0, 0, 0, dtrCorpT!ec_unmis.ToString, dColli, strErr, 3) Then
              If strErr <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErr))
              Return False
            End If
          End If
          '%%%
          dQuantScart = 0
          dTatt = (NTSCDec(!at_tempattpr) - NTSCDec(!at_tempattees)) * dRapporto
          If dTatt < 0 Then dTatt = 0
          If dTatt > (NTSCDec(!at_tempattpr) - NTSCDec(!at_tempattees)) Then dTatt = (NTSCDec(!at_tempattpr) - NTSCDec(!at_tempattees))
          If dTatt < 0 Then dTatt = 0
          dTese = (NTSCDec(!at_tempesepr) - NTSCDec(!at_tempesees)) * dRapporto
          If dTese < 0 Then dTese = 0
          dValore = ArrDbl((dTatt * NTSCDec(!as_cmacoratt)) + (dTese * NTSCDec(!as_cmacora)), oCldBoll.TrovaNdec(0))
          dValmo = ArrDbl((dTatt * NTSCDec(!as_pagaoratt)) + (dTese * NTSCDec(!as_pagaora)), oCldBoll.TrovaNdec(0))
          dValorev = 0
          dPrezvalc = 0
          'Costo lavorazione terzista
          If bTerzista Then
            If bRiportaCostiLavOPT Then
              dPrezzo = NTSCDec(dtrCorpT!ec_prezzo)
              dPrezvalc = NTSCDec(dtrCorpT!ec_prezvalc)
            Else
              'già fatto in automatico
              '  '%%%
              '  If dtrCorpT!ec_umprz <> "S" Then
              '    objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, "", dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dQuant, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '  Else
              '    objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, dtrCorpT!ec_unmis, dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dColli, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '    If dPrezzo = 0 Then
              '      objCrtb.CercaPrezzoEx4Ditt(gstrExt, ConvNullStr(dtrCorpT!ec_codart), !at_codlavo, CLng(edConto), nPeacListinCStd, dtrCorpT!ec_ump, dtrCorpT!ec_fase, "P", True, 0, 0, CDate(edDatdoc), CInt(edValuta), dQuant, dPrezzo, dPrelist, nCodPromo, strPrzNet)
              '      If dPrezzo <> 0 Then
              '        ConvertiPrezzoperUM(ConvNullStr(dtrCorpT!ec_codart), dtrCorpT!ec_unmis, dPrezzo, Val(edValuta.Text))
              '      End If
              '    End If
              '  End If
              '  '%%%
              '  If bVal Then
              '    dPrezvalc = dPrezzo
              '    dPrezzo = objStd.ConvPrezzoUnValuta(dPrezvalc, Val(edValuta.Text), edDatdoc.Text, CDbl(edCambio), bCanc)
              '  Else
              '    dPrezvalc = 0
              '  End If
              '  'quindi lo va a scrivere in mm_prezzo/mm_prezvalc
              '  strSQL = "UPDATE mmtrans SET mm_prezzo = " & ConvDblSQL(dPrezzo) & ", mm_prezvalc = " & ConvDblSQL(dPrezvalc) & _
              '    " WHERE codditt = " & ConvStrNullSql(gstrExt) & _
              '    " AND mm_tipork = 'T' AND instid = " & lIIMmtrans & " AND mm_riga = " & lRigaT
              '  gdb.Execute(strSQL)
            End If
            'già fatto in automatico
            '''Attenzione non tiene conto degli sconti di riga
            ''If dtrCorpT!ec_umprz.ToString <> "S" Then
            ''  dValorev = ArrDbl(dPrezvalc * dQuant / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta)))
            ''  dValore = ArrDbl(dPrezzo * dQuant / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(0))
            ''  dValmo = 0
            ''Else
            ''  dValorev = ArrDbl(dPrezvalc * NTSCDec(dtrCorpT!ec_colli) / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(NTSCInt(dttET.Rows(0)!et_valuta)))
            ''  dValore = ArrDbl(dPrezzo * NTSCDec(dtrCorpT!ec_colli) / NTSCInt(dtrCorpT!ec_perqta), oCldBoll.TrovaNdec(0))
            ''  dValmo = 0
            ''End If
          End If    'If bTerzista Then
          strFlevas = strFlevasDaeva
        End If

        If Not bConsMultiEvasRigheOrdNote Then
          'Controlla la presenza della riga nel temporaneo
          If dttLAVCENT.Select("lce_ortipo = '" & dtrAt!at_tipork.ToString & _
                              "' AND lce_oranno = " & dtrAt!at_anno.ToString & _
                              " AND lce_orserie = '" & dtrAt!at_serie.ToString & _
                              "' AND lce_ornum = " & dtrAt!at_numord.ToString & _
                              " AND lce_orriga = " & dtrAt!at_riga.ToString & _
                              " AND lce_orfase = " & dtrAt!at_fase.ToString & _
                              " AND lce_gnumdoc = 0").Length > 0 Then
            Return False
          End If
        End If
      End With    'With dtrAt

      '--------------------
      'Scrive il record
      dttLAVCENT.Rows.Add(dttLAVCENT.NewRow)
      bAdded = True
      With dttLAVCENT.Rows(dttLAVCENT.Rows.Count - 1)
        'forzo la AttivitOnAddNewRow
        !codditt = "."
        !codditt = strDittaCorrente
        !lce_riga = lRigaT
        '  '!lce_rigaa = ...      'impostata in automatico nella OnAddNew
        !lce_codart = dtrCorpT!ec_codart
        !lce_codlavo = dtrAt!at_codlavo
        !lce_tempatte = dTatt
        !lce_tempese = dTese
        !lce_tempattees = dTatt
        !lce_tempesees = dTese
        !lce_flevas = strFlevas
        !lce_codcent = NTSCInt(dtrAt!as_codcent)

        !lce_qtaes = dQuant
        !lce_qtascart = 0
        !lce_qtadisimp = dQuant
        If bTerzista And bRiportaCostiLavOPT Then
          'devo rimettere il prezzo dell'ordine, visto che con la riga '!lce_codlavo = dtrAt!at_codlavo' viene riletto il prezzo standard
          dtrCorpT!ec_prezvalc = dPrezvalc
          dtrCorpT!ec_prezzo = dPrezzo
        End If

        If NTSCInt(dtrAt!as_codcent) = 0 Then
          !lce_cmacora = 0
          !lce_pagaora = 0
          !lce_cmacoratt = 0
          !lce_pagaoratt = 0
          !lce_valore = 0
          !lce_valmo = 0
          !lce_controp = 0                    'imposta anche contocontr
          !lce_codcena = 0
        Else
          !lce_cmacora = dtrAt!as_cmacora
          !lce_pagaora = dtrAt!as_pagaora
          !lce_cmacoratt = dtrAt!as_cmacoratt
          !lce_pagaoratt = dtrAt!as_pagaoratt
          !lce_valore = dValore
          !lce_valmo = dValmo
          !lce_controp = dtrAt!as_controp     'imposta anche contocontr
          !lce_codcena = dtrAt!as_codcena
        End If
        !lce_valorev = dValorev

        !lce_commeca = dtrCorpT!ec_commeca
        !lce_subcommeca = dtrCorpT!ec_subcommeca
        !lce_codcfam = dtrCorpT!ec_codcfam
        !lce_note = dtrAt!at_note

        '-------------------
        !lce_ortipo = dtrAt!at_tipork
        !lce_oranno = dtrAt!at_anno
        !lce_orserie = dtrAt!at_serie
        !lce_ornum = dtrAt!at_numord
        !lce_orriga = dtrAt!at_riga
        !lce_orfase = dtrAt!at_fase
      End With    'With dttLAVCENT.Rows(dttLAVCENT.Rows.Count - 1)

      dttLAVCENT.AcceptChanges()
      bAdded = False

      Return True

    Catch ex As Exception
      If bAdded Then dttLAVCENT.Rows(dttLAVCENT.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dtrHT = Nothing
      dttTmp.Clear()
      dttLAVCENT.AcceptChanges()
    End Try
  End Function

  Public Overridable Function EvadiRigaOrdineDkkons(ByVal strRipork As String, _
                                                    ByVal nAnno As Integer, ByVal strSerie As String, _
                                                    ByVal lNumord As Integer, ByVal lRiga As Integer, _
                                                    ByVal dQtaDaEva As Decimal) As Boolean
    'import riga d'ordine da drag & drop BNDKKONS
    'data la riga in input, devo simulare la selezione riga d'ordine
    Dim strWhere As String = ""
    Dim dttTmp As New DataTable
    Try
      If Not oCldBoll.GetRigaOrdineDaEvadereLikeHLMO(strDittaCorrente, strRipork, nAnno, strSerie, lNumord, lRiga, dttTmp) Then Return False
      If dttTmp.Rows.Count = 0 Then
        Return True
      End If

      dttTmp.Rows(0)!xx_quadaeva = dQtaDaEva
      ImportaOrdini("R", dttTmp)  'non testo se la riga è stata importa o no. se da un errore continuo con le altre righe

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function


  Public Overridable Function CheckCongruenzaDati(ByVal lCommessa As Integer, ByVal lTaskid As Integer, ByVal dmmvalore As Decimal) As Boolean
    Dim strMsg As String = ""
    Dim strMess10 As String = ""
    Try
      'controlla che i dati siano coerenti ...

      If dFCostorim = 0 And dBasecost <> 0 And strFSalcon = "C" Then
        strMsg = oApp.Tr(Me, 129442457584531250, "Sul Task |" & lTaskid & "| non è coerente un valore rimanente di zero con una evasione task in conto." & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If dFCostorim <> 0 And (strFSalcon = "S" Or strFSalcon = "V") Then
        strMsg = oApp.Tr(Me, 129442457597167969, "Sul Task |" & lTaskid & "| non è coerente un valore rimanente diverso da zero con una evasione task a saldo per valori." & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If dFQtarim <> 0 And (strFSalcon = "S" Or (strFSalcon = "Q" And oCldBoll.LegGestCostPadreDao(strDittaCorrente, lCommessa, lTaskid) = "2")) Then
        strMsg = oApp.Tr(Me, 129442457616523437, "Sul Task |" & lTaskid & "| non è coerente una qta rimanente diversa da  zero con una evasione task a saldo per quantità." & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If (dFCostorim = 0 And dBasecost <> 0 And dFQtarim <> 0) And Not (strFSalcon = "V") Then
        strMsg = oApp.Tr(Me, 129442457642041016, "Sul Task |" & lTaskid & "| non è coerente un valore rimanente di zero con una qta rimanente diversa da zero." & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If (strFSalcon = "Q" Or strFSalcon = "V") And strFPrevgrup = "N" Then
        strMsg = oApp.Tr(Me, 129442457657968750, "Sul Task |" & lTaskid & "| non è coerente un valore SaldoQuantità (Q) o SaldoBudget (B) su flag saldo task su task non Figlio di task preventivazione di gruppo! " & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If (strFSalcon = "Q" And dFCostorim = 0 And dBasecost <> 0 Or strFSalcon = "V" And dFQtarim = 0 And strFGestcost = "3") Then
        strMsg = oApp.Tr(Me, 129442457678359375, "Sul Task |" & lTaskid & "| non è coerente un valore SaldoQuantità (Q) o SaldoBudget (B) con i campi importo rimanente o qta rimanente = 0 ! " & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If (strFSalcon = "V" And strFGestcost = "2") Then
        strMsg = oApp.Tr(Me, 129442457692041016, "Sul Task |" & lTaskid & "| non è coerente un valore SaldoBudget (B) con task gestito a solo costo ! " & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If dFCostorim < 0 Then
        strMsg = oApp.Tr(Me, 129442457715800781, "Sul Task |" & lTaskid & "| non è ammesso un valore rimanente minore di zero ." & vbCrLf & " Correggere.")
        ThrowRemoteEvent(New NTSEventArgs("", strMsg))
        Return False
      End If
      If (bPMControllaBaseCostMG) Then
        If ArrDbl(dmmvalore + (dmmvalore - dFValdisda), oCldBoll.TrovaNdec(0)) > ArrDbl(dFCostores, oCldBoll.TrovaNdec(0)) Then
          strMsg = oApp.Tr(Me, 129442457731640625, "Sul Task |" & lTaskid & "| superamento costo a budget: impossibile salvare" & vbCrLf & " Correggere.")
          ThrowRemoteEvent(New NTSEventArgs("", strMsg))
          Return False
        End If
      End If
      'Controlla se a saldo, e se F , che non ci siano fratelli ancora non chiusi..
      If strFPrevgrup = "F" And strFSalcon = "S" Then
        If Not (oCldBoll.ControllaSalconFratelliDao(strDittaCorrente, "TTPROESEC", lIIttproesebappo, "TTTASKS", lIItttasks, lCommessa, lTaskid, False, strMess10)) Then
          strMsg = oApp.Tr(Me, 129442457754765625, "Ci sono altri task facenti capo allo stesso budget di costo che non sono chiusi ! ") & strMess10
          ThrowRemoteEvent(New NTSEventArgs("", strMsg))
          Return False
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function


  Public Overridable Function ChiamaPnfa() As Boolean
    Try
      If IsDocumentoEmesso(NTSCStr(dttET.Rows(0)!et_tipork), False) And "SA".Contains(strCallPnfa) Then Return True
      If IsDocumentoEmesso(NTSCStr(dttET.Rows(0)!et_tipork), False) = False And "SP".Contains(strCallPnfa) Then Return True

      Return False

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function



  Public Overridable Function CheckScaricoCLavAttivo() As Integer
    Dim dttTmp As New DataTable
    Dim dtrT() As DataRow = Nothing
    Try
      CheckScaricoCLavAttivo = 0

      If Not bDocEmesso Then Return 0
      'Controllo magazzino 1
      dtrT = dsTabmaga.Tables("TABMAGA").Select("tb_codmaga = " & NTSCInt(dttET.Rows(0)!et_magaz).ToString)
      If dtrT.Length = 0 Then Return 0
      If dtrT(0)!tb_flclavo.ToString <> "C" And dtrT(0)!tb_flclavo.ToString <> "X" Then Return 0

      'Controllo causale 1
      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_causale).ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
      If dttTmp.Rows.Count = 0 Then Return 0
      If dttTmp.Rows(0)!tb_tipcaum.ToString <> "E" Then Return 0

      Return NTSCInt(dttET.Rows(0)!et_magaz)

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return 0
    Finally
      dttTmp.Clear()
    End Try
  End Function


  Public Overridable Function AggRifKit(ByVal strTipork As String) As Boolean
    Dim dtrT() As DataRow = Nothing
    Dim dtrT1() As DataRow = Nothing
    Dim i As Integer = 0
    Dim dttCorp As DataTable = Nothing
    'kit
    'Dopo l'importazione di righe da note/ordini aggiusta i riferimenti alle righe kit padre
    'prendo le righe figlio di kit e, per ognuna, riassegno la riga del kit padre
    Try
      If strTipork <> "U" And strTipork <> "H" Then
        dttCorp = dttEC
      Else
        dttCorp = dttECIMP
      End If

      '------------------
      'Da Note di prelievo
      dtrT = dttCorp.Select("ec_flkit = 'T' OR ec_flkit = 'B' AND ec_npnum > 0") 'riga figlio
      For i = 0 To dtrT.Length - 1
        'cerco la riga padre
        dtrT1 = dttCorp.Select("(ec_flkit = 'A' OR ec_flkit = 'S') " & _
                             " AND ec_ktriga = " & dtrT(i)!ec_ktriga.ToString & _
                             " AND ec_nptipo = " & CStrSQL(dtrT(i)!ec_nptipo.ToString) & _
                             " AND ec_npanno = " & dtrT(i)!ec_npanno.ToString & _
                             " AND ec_npserie = " & CStrSQL(dtrT(i)!ec_npserie.ToString) & _
                             " AND ec_npnum = " & dtrT(i)!ec_npnum.ToString)
        If dtrT1.Length > 0 Then dtrT(i)!ec_ktriga = dtrT1(0)!ec_riga
      Next

      '------------------
      'Da Ordini
      dtrT = dttCorp.Select("ec_flkit = 'T' OR ec_flkit = 'B' AND ec_ornum > 0") 'riga figlio
      For i = 0 To dtrT.Length - 1
        'cerco la riga padre
        dtrT1 = dttCorp.Select("(ec_flkit = 'A' OR ec_flkit = 'S') " & _
                             " AND ec_ktriga = " & dtrT(i)!ec_ktriga.ToString & _
                             " AND ec_ortipo = " & CStrSQL(dtrT(i)!ec_ortipo.ToString) & _
                             " AND ec_oranno = " & dtrT(i)!ec_oranno.ToString & _
                             " AND ec_orserie = " & CStrSQL(dtrT(i)!ec_orserie.ToString) & _
                             " AND ec_ornum = " & dtrT(i)!ec_ornum.ToString)
        If dtrT1.Length > 0 Then dtrT(i)!ec_ktriga = dtrT1(0)!ec_riga
      Next

      '------------------
      'sui kit padre azzero il numero di riga
      dtrT = dttCorp.Select("ec_flkit = 'S' OR ec_flkit = 'A'")
      For i = 0 To dtrT.Length - 1
        dtrT(i)!ec_ktriga = 0
      Next

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  '------------------------

  Public Overridable Function ScriviRigheDaConai(ByVal bFinale As Boolean) As Boolean
    Dim evnt As NTSEventArgs
    Dim strRetval As String = ""
    Dim bFound As Boolean = False
    Dim dtrTmp() As DataRow = Nothing
    Dim i As Integer = 0
    Dim oDttgr As New CLEGROUPBY
    Dim dttGr As New DataTable
    Dim lCount As Integer = 0
    Try
      '-------------------------
      'un po' di controlli
      If Not bFinale Then
        If Not OkTestata() Then Return False

        If Not bConai Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697699941406250, "Modulo CONAI non disponibile.")))
          Return False
        End If
        If dttEt_conto.Rows(0)!an_gescon.ToString = "N" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697700183750000, "Il cliente/fornitore indicato in testata, non ha attiva la gestione CONAI.")))
          Return False
        End If
        If bDocEmesso = False Or (bDocEmesso = True And dttET.Rows(0)!et_tipork.ToString = "W") Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697700347187500, "Gestione CONAI non attiva su questo tipo di documento.")))
          Return False
        End If
        If dttET.Rows(0)!et_scorpo.ToString = "S" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697700681250000, "Gestione CONAI non disponibile su documenti di tipo iva compresa (scorporo).")))
          Return False
        End If
      End If

      '-------------------------
      'Verifica che in MMTRANS non ci siano codici articoli presenti in TTMOVCONA
      'ed eventualmente cancella
      For Each dtrT As DataRow In dttMOVCONA.Rows
        If dttEC.Select("ec_codart = " & CStrSQL(dtrT!mma_codart)).Length > 0 Then
          If bFinale Then
            strRetval = CLN__STD.ThMsg.RETVALUE_YES
          Else
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128697702700000000, "Nel corpo del documento sono presenti righe di articoli relativi al 'Dettaglio CONAI'. Tali righe verrano rimosse." & vbCrLf & vbCrLf & "Procedere?"))
            ThrowRemoteEvent(evnt)
            strRetval = evnt.RetValue
          End If
          bFound = True
          Exit For
        End If
      Next

      If bFound Then
        If strRetval = CLN__STD.ThMsg.RETVALUE_YES Then
          For Each dtrT As DataRow In dttMOVCONA.Rows
            dtrTmp = dttEC.Select("ec_codart = " & CStrSQL(dtrT!mma_codart))
            For i = 0 To dtrTmp.Length - 1
              dtrTmp(i).Delete()
            Next
          Next
          dttEC.AcceptChanges()
        Else
          Return False
        End If
      End If    'If bFound Then

      '-------------------------
      'Quindi inizia a riportare le righe
      If Not oDttgr.NTSGroupBy(dttMOVCONA, dttGr, "mma_codart, Sum(mma_quant) AS QuantConai, " & _
                               " Min(mma_prezzo) AS MinContrib, Max(mma_prezzo) AS MaxContrib, " & _
                               " Min(mma_prezval) AS MinContribv, Min(mma_perescon) AS MinPerescon, " & _
                               " Max(mma_perescon) AS MaxPerescon", "", "mma_codart") Then Return False
      If dttGr.Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128697707109218750, "Nessun articolo componente CONAI rilevato.")))
        Return True
      End If

      lCount = 0
      For Each dtrT As DataRow In dttGr.Rows
        'Controllo uniformaità tariffe su TTMOVCONA
        If NTSCDec(dtrT!MinContrib) <> NTSCDec(dtrT!MaxContrib) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697708830156250, "Nel dettaglio CONAI è codificato l'articolo |" & dtrT!mma_codart.ToString & "| più volte con contributi CONAI differenti. Entrare nel 'Dettaglio CONAI' e rettificare i contributi indicati.")))
          Return False
        End If
        'Controllo uniformaità % esenzione su TTMOVCONA
        If ArrDbl(NTSCDec(dtrT!MinPerescon), 2) <> ArrDbl(NTSCDec(dtrT!MaxPerescon), 2) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128697709801093750, "Nel dettaglio CONAI è codificato l'articolo |" & dtrT!mma_codart.ToString & "| più volte con percentuali esenzioni differenti. Entrare nel 'Dettaglio CONAI' e rettificare le percentuali esenzione indicate.")))
          Return False
        End If
        'Scrive una riga in MMTRANS da TTMOVCONA
        If ScriviRigaDaConai(dtrT) Then lCount = lCount + 1
      Next

      CalcolaTotali()
      If Not bFinale Then
        ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128697707497187500, "|" & lCount.ToString & "| riga/e di componenti CONAI generate.")))
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttGr.Clear()
    End Try
  End Function
  Public Overridable Function ScriviRigaDaConai(ByRef dtrIn As DataRow) As Boolean
    'scrivo la riga conai
    Dim dQuant As Decimal = 0
    Try
      bInImportConai = True

      dQuant = ArrDbl(NTSCDec(dtrIn!QuantConai), 3)
      If dttEt_conto.Rows(0)!an_gescon.ToString = "E" Then
        'Abbatte la quantità se il cliente ha una % di esenzione (solo se <> 0)
        If NTSCDec(dtrIn!MinPerescon) <> 0 Then
          dQuant = ArrDbl(dQuant * ((100 - NTSCDec(dtrIn!MinPerescon)) / 100), 3)
        End If
      End If

      dttEC.Rows.Add(dttEC.NewRow)
      With dttEC.Rows(dttEC.Rows.Count - 1)
        'forzo la MovordOnAddNewRow
        !codditt = "."
        !codditt = strDittaCorrente
        !ec_codart = dtrIn!mma_codart.ToString
        !ec_colli = 0
        !ec_quant = dQuant
        If NTSCInt(dttET.Rows(0)!et_valuta) > 0 Then !ec_prezvalc = NTSCDec(dtrIn!MinContribv)
        !ec_prezzo = NTSCDec(dtrIn!MinContrib)
        !ec_prelist = 0
        !ec_scont1 = 0
        !ec_scont2 = 0
        !ec_scont3 = 0
        !ec_scont4 = 0
        !ec_scont5 = 0
        !ec_scont6 = 0
        !ec_provv = 0
        !ec_provv2 = 0
      End With

      If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
        dttEC.Rows(dttEC.Rows.Count - 1).Delete()
        Return False
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      bInImportConai = False
    End Try
  End Function


  Public Overridable Function ApriScadenze() As Boolean
    Dim i As Integer = 0
    Dim dttTmp As New DataTable

    Try
      '----------------------
      'Modifica scadenze
      If NTSCInt(dttET.Rows(0)!et_codpaga) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669122852656250, "Inserire il codice pagamento prima di modificare le rate delle scadenze.")))
        For i = 1 To 8
          dttET.Rows(0)("et_tippaga_" & i.ToString) = 0
          dttET.Rows(0)("et_datsca_" & i.ToString) = DBNull.Value
          dttET.Rows(0)("et_impsca_" & i.ToString) = 0
          dttET.Rows(0)("et_impscav_" & i.ToString) = 0
        Next
        Return False
      End If

      '----------------------
      'Controlla che il documento non sia da riepilogare
      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_tipobf).ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
      If dttTmp.Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669125857031250, "Il codice Tipo Bolla/Fattura inserito non è valido.")))
        For i = 1 To 8
          dttET.Rows(0)("et_tippaga_" & i.ToString) = 0
          dttET.Rows(0)("et_datsca_" & i.ToString) = DBNull.Value
          dttET.Rows(0)("et_impsca_" & i.ToString) = 0
          dttET.Rows(0)("et_impscav_" & i.ToString) = 0
        Next
        Return False
      End If

      If (dttTmp.Rows(0)!tb_flresocl.ToString = "S" Or dttTmp.Rows(0)!tb_flresocl.ToString = "F") Then
        'Solo sui tipi doc. effettivamente da fatturare
        If dttET.Rows(0)!et_tipork.ToString = "B" Or dttET.Rows(0)!et_tipork.ToString = "F" Or dttET.Rows(0)!et_tipork.ToString = "M" Or dttET.Rows(0)!et_tipork.ToString = "T" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128669126719843750, "Non è possibile modificare le rate scadenze su documenti da riepilogare.")))
          For i = 1 To 8
            dttET.Rows(0)("et_tippaga_" & i.ToString) = 0
            dttET.Rows(0)("et_datsca_" & i.ToString) = DBNull.Value
            dttET.Rows(0)("et_impsca_" & i.ToString) = 0
            dttET.Rows(0)("et_impscav_" & i.ToString) = 0
          Next
          Return False
        End If
      End If
      dttTmp.Clear()

      '-------------------------
      'eseguo il calcolo standard delle scadenze sull'importo residuo da pagare
      If Not CalcolaScadenzeStandard(True) Then Return False

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function



  Public Overridable Function ScaricaMagaz() As Boolean
    '--------------------------
    'dato un magazzino scrive in corpo le righe necessarie per portare le esistenze di magazzino = 0
    Dim bIncludiNegativi As Boolean = False
    Dim bABilCausaliSemplici As Boolean = False
    Dim nMaxRighe As Integer = 0
    Dim dttTmp As New DataTable
    Dim dttMag, dttMagTC As New DataTable
    Dim evnt As NTSEventArgs = Nothing
    Dim nMagazScar As Integer = 0
    Dim nMagazCar As Integer = 0
    Dim nCausale As Integer = NTSCInt(dttET.Rows(0)!et_causale)
    Dim nCausale2 As Integer = 0
    Dim nMagaz As Integer = NTSCInt(dttET.Rows(0)!et_magaz)
    Dim nMagaz2 As Integer = NTSCInt(dttET.Rows(0)!et_magaz2)
    Dim i As Integer = 0
    Dim bRigaScritta As Boolean = False
    Dim lCount As Integer = 0
    Try
      '-----------------------------
      'test pre-elaborazione
      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698288089218750, "Funzionalità non disponibile sui documenti di tipo 'Carico di produzione'.")))
        Return False
      End If

      'le causali devono movimentare due magazzini
      oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_causale).ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
      If NTSCInt(dttTmp.Rows(0)!tb_esist) = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698292701093750, "Non è possibile eseguire l'elaborazione in quanto la causale |" & NTSCInt(dttET.Rows(0)!et_causale).ToString & "| non movimenta l'esistenza")))
        Return False
      End If

      bABilCausaliSemplici = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsvebolx", "Opzioni", ".", "ABilCausaliSemplici", "0", " ", "0"))

      If NTSCInt(dttTmp.Rows(0)!tb_causec) = 0 Then
        If bABilCausaliSemplici Then
          nCausale2 = 0
          nMagaz2 = 0
          nMagazCar = 0
          nMagazScar = nMagaz
        Else
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698294111250000, "Non è possibile eseguire l'elaborazione in quanto la causale  |" & NTSCInt(dttET.Rows(0)!et_causale).ToString & "| non movimenta due magazzini")))
          Return False
        End If
      Else
        'se per caso non è fornita dal chiamante la imposta ora la causale 2
        If nCausale2 = 0 Then nCausale2 = NTSCInt(dttTmp.Rows(0)!tb_causec)
        'determino quale magazzino deve essere caricato e quale scaricato
        If NTSCInt(dttTmp.Rows(0)!tb_esist) = 1 Then
          nMagazCar = nMagaz
          nMagazScar = nMagaz2
        Else
          nMagazCar = nMagaz2
          nMagazScar = nMagaz
        End If
      End If
      dttTmp.Clear()

      If nCausale2 <> 0 Then
        'controllo la correttezza della causale n° 2
        oCldBoll.ValCodiceDb(nCausale2.ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
        If NTSCInt(dttTmp.Rows(0)!tb_esist) = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698294914843750, "Non è possibile eseguire l'elaborazione in quanto la causale |" & nCausale2.ToString & "| non movimenta l'esistenza")))
          Return False
        End If
        dttTmp.Clear()
      End If

      If bABilCausaliSemplici And nCausale2 = 0 Then
        'il magazzino 1 non deve essere zero
        If nMagaz = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698295259218750, "Non è possibile eseguire l'elaborazione in quanto il magazzino ha codice = 0")))
          Return False
        End If
      Else
        'i due magazzino devono essere indicati
        If nMagaz = 0 Or nMagaz2 = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698295538125000, "Non è possibile eseguire l'elaborazione in quanto uno dei due magazzini ha codice = 0")))
          Return False
        End If
        'i due magazzini non possono avere lo stesso codice
        If nMagaz = nMagaz2 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698295677656250, "Non è possibile eseguire l'elaborazione in quanto il magazzino di carico e scarico sono identici")))
          Return False
        End If
      End If

      'controllo che non ci sia nessun articolo nel corpo del documento
      If dttEC.Rows.Count > 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128698296177812500, "Non è possibile eseguire l'elaborazione in quanto nel corpo del documento sono presenti delle righe")))
        Return False
      End If

      '------------------------
      'chiedo conferma
      evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128698290195937500, "Procedere con lo scarico delle giacenze?"))
      ThrowRemoteEvent(evnt)
      If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return True

      bIncludiNegativi = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsvebolx", "Opzioni", ".", "IncludiNegativi", "0", " ", "0"))
      nMaxRighe = CInt(oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsvebolx", "Opzioni", ".", "ScaricaMagazMaxRighe", "0", " ", "0"))

      '------------------------
      'ottengo i dati
      If Not oCldBoll.ScaricaMagazGetEsist(strDittaCorrente, nMagazScar, dttMag) Then Return False

      If Not bIncludiNegativi Then
        Dim dtrT() As DataRow = dttMag.Select("lp_esist < 0")
        If dtrT.Length > 0 Then
          evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_NOYES, oApp.Tr(Me, 128698300834687500, _
                        "Sul magazzino |" & nMagazScar.ToString & "| sono presenti articoli con esistenza negativa. " & _
                        "Questi articoli non verranno considerati dall'elaborazione. Proseguo ugualmente? "))
          ThrowRemoteEvent(evnt)
          If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_NO Then Return True
        End If
        For i = 0 To dtrT.Length - 1
          dtrT(i).Delete()
        Next
      End If
      dttMag.AcceptChanges()

      If dttMag.Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128698299830781250, "Nessun articolo trovato.")))
        Return True
      End If

      '------------------------
      'scrivo le righe
      bInImportKit = True
      For Each dtrTmp As DataRow In dttMag.Rows
        lCount += 1
        If ArrDbl(NTSCDec(dtrTmp!lp_esist), 3) <> 0 Then
          dttEC.Rows.Add(dttEC.NewRow)
          bRigaScritta = True
          With dttEC.Rows(dttEC.Rows.Count - 1)
            'forzo la CorpoOnAddNewRow
            !codditt = "."
            !codditt = strDittaCorrente
            !ec_magaz = nMagaz
            !ec_magaz2 = nMagaz2
            !ec_causale = nCausale
            !ec_causale2 = nCausale2
            !ec_codart = NTSCStr(dtrTmp!lp_codart)
            !ec_fase = NTSCInt(dtrTmp!lp_fase)
            !ec_quant = ArrDbl(NTSCDec(dtrTmp!lp_esist), 3)
            !ec_commeca = NTSCInt(dtrTmp!lp_commeca)
            !ec_lotto = NTSCInt(dtrTmp!lp_lotto)
            !ec_ubicaz = dtrTmp!lp_ubicaz
            'dovrebbe scaricare anche le matricole e le sottocommesse!!!!

            'Se è gestito a taglie importa anche le righe del dettaglio taglie
            If NTSCInt(dtrTmp!ar_codtagl) <> 0 Then
              Dim dtrEcTc() As DataRow = dttECTC.Select("ec_riga = " & NTSCInt(!ec_riga))

              For i = 1 To 24
                dtrEcTc(0)("ec_quant" & i.ToString("00")) = dtrTmp("lp_esist" & i.ToString("00"))
              Next
            End If
          End With

          If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
            ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128698331542031250, "L'articolo |" & NTSCStr(dtrTmp!lp_codart) & "| verrà scartato")))
            dttEC.Rows(dttEC.Rows.Count - 1).Delete()
          End If
          bRigaScritta = False
        End If    'If ArrDbl(NTSCDec(dtrTmp!lp_esist), 3) <> 0 Then

        If nMaxRighe <> 0 And nMaxRighe = lCount Then Exit For
      Next    'For Each dtrtmp As DataRow In dttMag.Rows

      lCount -= 1
      ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128698332776875000, "Elaborazione completata: trattati |" & lCount.ToString & "| articoli")))

      Return True
    Catch ex As Exception
      If bRigaScritta Then dttEC.Rows(dttEC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      bInImportKit = False
      dttMag.Clear()
      dttTmp.Clear()
    End Try
  End Function


  Public Overridable Function IntegraRighe(ByRef dttAdrg As DataTable) As Boolean
    '-------------------------
    'funzione 'integra righe'
    Dim bRicalcolaPrezzi As Boolean = False
    Dim bRicalcolaSconti As Boolean = False
    Dim bRicalcolaProvv As Boolean = False
    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Dim dtrT() As DataRow
    Dim dPrezzo As Decimal = 0
    Dim dPrezvalc As Decimal = 0
    Dim dPreziva As Decimal = 0
    Dim dScont1 As Decimal = 0
    Dim dScont2 As Decimal = 0
    Dim dScont3 As Decimal = 0
    Dim dScont4 As Decimal = 0
    Dim dScont5 As Decimal = 0
    Dim dScont6 As Decimal = 0
    Dim dProvv As Decimal = 0
    Dim dProvv2 As Decimal = 0
    Dim dPrelist As Decimal = 0
    Dim dImponib As Decimal = 0
    Dim nPromo As Integer = 0
    Dim bAdded As Boolean = False

    Try
      If dttAdrg.Rows.Count = 0 Then Return True

      bRicalcolaPrezzi = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsvebolx", "Opzioni", ".", "RicalcolaPrezzi", "0", " ", "0"))
      bRicalcolaSconti = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsvebolx", "Opzioni", ".", "RicalcolaSconti", "0", " ", "0"))
      bRicalcolaProvv = CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente,"Bsvebolx", "Opzioni", ".", "RicalcolaProvv", "0", " ", "0"))

      bInImportKit = True
      For Each dtrA As DataRow In dttAdrg.Rows
        bAdded = False
        oDttgr.NTSGroupBy(dttEC, dttGr, "count(ec_codart) as NRIGHE, MIN(ec_riga) as RIGA", "ec_codart = " & CStrSQL(dtrA!ak_codart), "ec_codart")
        If dttGr.Rows.Count > 0 Then
          'caso più semplice: devo solo correggere la quantità
          dtrT = dttEC.Select("ec_riga = " & dttGr.Rows(0)!RIGA.ToString)
          dPrezzo = NTSCDec(dtrT(0)!ec_prezzo)
          dPrezvalc = NTSCDec(dtrT(0)!ec_prezvalc)
          dPreziva = NTSCDec(dtrT(0)!ec_preziva)
          dPrelist = NTSCDec(dtrT(0)!ec_prelist)
          dScont1 = NTSCDec(dtrT(0)!ec_scont1)
          dScont2 = NTSCDec(dtrT(0)!ec_scont2)
          dScont3 = NTSCDec(dtrT(0)!ec_scont3)
          dScont4 = NTSCDec(dtrT(0)!ec_scont4)
          dScont5 = NTSCDec(dtrT(0)!ec_scont5)
          dScont6 = NTSCDec(dtrT(0)!ec_scont6)
          dProvv = NTSCDec(dtrT(0)!ec_provv)
          dProvv2 = NTSCDec(dtrT(0)!ec_provv2)

          dtrT(0)!ec_quant = ArrDbl(NTSCDec(dtrT(0)!ec_quant) + NTSCDec(dtrA!ak_quant), 3)

          'ricalcolo gli sconti solo su opzione di registro
          Dim bRicSconti As Boolean = False
          If bRicalcolaSconti AndAlso GetMemDttArti(dtrT(0)!ec_codart.ToString).Rows.Count > 0 Then bRicSconti = True
          
          SettaCondCommerciali(bRicalcolaPrezzi, bRicSconti, bRicalcolaProvv, dtrT(0), NTSCInt(dttArti.Rows(0)!ar_clascon), nClscan, True)

          If bRicalcolaPrezzi = False Then
            dtrT(0)!ec_prezvalc = dPrezvalc
            dtrT(0)!ec_preziva = dPreziva
            dtrT(0)!ec_prezzo = dPrezzo
            dtrT(0)!ec_prelist = dPrelist
          End If

          If bRicalcolaSconti = False Then
            dtrT(0)!ec_scont1 = dScont1
            dtrT(0)!ec_scont2 = dScont2
            dtrT(0)!ec_scont3 = dScont3
            dtrT(0)!ec_scont4 = dScont4
            dtrT(0)!ec_scont5 = dScont5
            dtrT(0)!ec_scont6 = dScont6
          End If

          If bRicalcolaPrezzi = False Then
            dtrT(0)!ec_provv = dProvv
            dtrT(0)!ec_provv2 = dProvv2
          End If

          dtrT(0).AcceptChanges()
        Else

          'devo inserire la riga nuova
          '-----------------
          'inserisco la riga 
          dttEC.Rows.Add(dttEC.NewRow)
          bAdded = True
          With dttEC.Rows(dttEC.Rows.Count - 1)
            'forzo la MovordOnAddNewRow
            !codditt = "."
            !codditt = strDittaCorrente
            !ec_codart = dtrA!ak_codart
            !ec_unmis = dtrA!ak_unmis
            !ec_colli = dtrA!ak_colli
            !ec_quant = dtrA!ak_quant
          End With

          If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
            dttEC.Rows(dttEC.Rows.Count - 1).Delete()
          End If

          bAdded = False
        End If    'If dttGr.Rows.Count > 0 Then

      Next    'For Each dtrA As DataRow In dttAdrg.Rows
      dttAdrg.Clear()

      '-----------------------------
      'Ora cancella tutte le righe eventualmenet a zero
      'per effetto del'arrdbl(x,3)
      For Each dtrTmp As DataRow In dttEC.Select("ec_quant = 0")
        dtrTmp.Delete()
      Next
      dttEC.AcceptChanges()

      ThrowRemoteEvent(New NTSEventArgs(CLN__STD.ThMsg.MSG_INFO, oApp.Tr(Me, 128705278484531250, "Elaborazione completata")))

      Return True

    Catch ex As Exception
      If bAdded Then dttEC.Rows(dttEC.Rows.Count - 1).Delete()

      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      bInImportKit = False
      dttEC.AcceptChanges()
      dttGr.Clear()
    End Try
  End Function


  '------------------------

  Public Overridable Function GetWhereHltmAcconti() As String
    Try
      'per zoom dohlTm: zoom acconti ancora inevasi
      Return oCldBoll.GetWhereHltmAcconti(strDittaCorrente, bDocEmesso, NTSCInt(dttET.Rows(0)!et_valuta), _
                                          NTSCInt(dttET.Rows(0)!et_conto), dttET.Rows(0)!et_scorpo.ToString, _
                                          NTSCInt(dttET.Rows(0)!et_commeca), NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString)

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return ""
    End Try
  End Function
  Public Overridable Function ImportaAcconti(ByRef dttAcconti As DataTable) As Boolean
    Dim strDescrAcc As String = ""
    Dim lPos As Integer = 0
    Dim strDescrAgg As String = ""
    Dim dResidIVA As Decimal = 0
    Dim dResidvIVA As Decimal = 0
    Dim dttTmp As New DataTable
    Dim strMsg As String = ""
    Dim evnt As NTSEventArgs = Nothing
    Dim dResid As Decimal = 0
    Dim dResidv As Decimal = 0
    Dim dIva As Decimal = 0
    Dim dPreziva As Decimal = 0
    Dim dPrezzo As Decimal = 0
    Dim dPrezvalc As Decimal = 0

    Dim dRimanenza As Decimal = 0
    Dim dRimanenzav As Decimal = 0
    Dim dttMmacc As New DataTable
    Dim dProvv As Decimal = 0
    Dim dProvv2 As Decimal = 0
    Dim dVProvv As Decimal = 0
    Dim dVProvv2 As Decimal = 0
    Dim bAdded As Boolean = False

    Dim strOuSerie As String = ""
    Dim lOuNumdoc As Integer = 0
    Dim dtOuDatdoc As DateTime = Nothing

    Try
      If dttAcconti.Rows.Count = 0 Then Return True

      '------------------
      'Costruisce la descrizione
      With dttAcconti.Rows(0)
        strOuSerie = !tm_serie.ToString
        lOuNumdoc = NTSCInt(!tm_numdoc)
        dtOuDatdoc = NTSCDate(!tm_datdoc)

        LeggiOpzioneRifAcc(strOuSerie, lOuNumdoc, dtOuDatdoc, nTabling, strDescrAcc, strDescrAgg)
        If strDescrAcc.trim = "" Then
          'Costruisce la descrizione
          Select Case dttET.Rows(0)!et_tipork.ToString
            Case "A", "L" : strDescrAcc = "Fattura"
            Case "F" : strDescrAcc = "Ric. fisc."
            Case "S" : strDescrAcc = "Fat/Ric.fisc."
          End Select
          If strOuSerie.Trim = "" Then
            strDescrAcc = "Rif. " & strDescrAcc & " acc. " & lOuNumdoc & " del " & CStr(dtOuDatdoc)
          Else
            strDescrAcc = "Rif. " & strDescrAcc & " acc. " & lOuNumdoc & "/" & strOuSerie & " del " & CStr(dtOuDatdoc)
          End If
          If Len(strDescrAcc) > 40 Then
            lPos = InStr(1, strDescrAcc, " del ")
            strDescrAcc = Mid(strDescrAcc, 1, lPos) & " del "
            strDescrAgg = CStr(dtOuDatdoc)
          Else
            strDescrAgg = ""
          End If
        End If    'If strDescrAcc.Trim = "" Then

        '------------------
        'Calcola l'IVA sull'acconto
        dResid = NTSCDec(!xx_accresiduo)
        dResidv = NTSCDec(!xx_accresiduov)
        dResidIVA = dResid + oCldBoll.CalcolaIva(dResid, NTSCInt(!tm_codiva_1))
        dResidvIVA = dResidv + oCldBoll.CalcolaIva(dResidv, NTSCInt(!tm_codiva_1), NTSCInt(!tm_valuta))

        '------------------
        'Controlla se è già stato inserito
        If dttEC.Select("ec_actipo = " & CStrSQL(!tm_tipork) & " AND ec_acanno = " & !tm_anno.ToString & _
                        " AND ec_acserie = " & CStrSQL(!tm_serie) & " AND ec_acnum = " & !tm_numdoc.ToString).Length > 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128704591964531250, "Documento di acconto già inserito.")))
          Return False
        End If

      End With    'dttAcconti.Rows(0)

      If oCldBoll.ValCodiceDb("D", strDittaCorrente, "ARTICO", "S") = False Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734887811563839, "Attenzione! non è codificato l'articolo 'D' utilizzato per i riferimenti ai documenti di acconto.")))
        Return False
      End If

      CalcolaTotali()

      dRimanenza = NTSCDec(dttET.Rows(0)!et_totdoc) - NTSCDec(dttET.Rows(0)!et_pagato) - NTSCDec(dttET.Rows(0)!et_abbuono) - NTSCDec(dttET.Rows(0)!et_totomag)
      dRimanenzav = NTSCDec(dttET.Rows(0)!et_totdocv) - NTSCDec(dttET.Rows(0)!et_pagatov) - NTSCDec(dttET.Rows(0)!et_abbuonov) - NTSCDec(dttET.Rows(0)!et_totomagv)

      '----------------------
      'Chiede se considerarne una parte
      strMsg = oApp.Tr(Me, 128704595122656250, "Considerare, del documento di acconto selezionato, solo la parte occorrente per chiudere questo documento?")
      If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
        'valuta
        If dRimanenzav <> 0 Then
          If dRimanenzav < dResidvIVA Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMsg)
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
              'ATTENZIONE suppone parità di cambio
              'tra acconto e questo documento
              'dResidvIVA = lbRimanenzav
              'dResidIVA = ArrDbl((ntscdec(lbRimanenza) * dResidIVA) / dResidvIVA, objStd.TrovaNdec(0))
              dResidIVA = ArrDbl((dRimanenzav * dResidIVA) / dResidvIVA, oCldBoll.TrovaNdec(0))
              dResidvIVA = dRimanenzav
              oCldBoll.Scorporo(dResidvIVA, NTSCInt(dttAcconti.Rows(0)!tm_codiva_1), dResidv, dIva, oCldBoll.TrovaNdecSuPrzUn(NTSCInt(dttET.Rows(0)!et_valuta)))
              oCldBoll.Scorporo(dResidIVA, NTSCInt(dttAcconti.Rows(0)!tm_codiva_1), dResid, dIva, oCldBoll.TrovaNdecSuPrzUn(0))
            End If
          End If
        End If
      Else
        'normale o scorporo
        If dRimanenza <> 0 Then
          If dRimanenza < dResidIVA Then
            evnt = New NTSEventArgs(CLN__STD.ThMsg.MSG_YESNO, strMsg)
            ThrowRemoteEvent(evnt)
            If evnt.RetValue = CLN__STD.ThMsg.RETVALUE_YES Then
              dResidIVA = dRimanenza
              oCldBoll.Scorporo(dResidIVA, NTSCInt(dttAcconti.Rows(0)!tm_codiva_1), dResid, dIva, oCldBoll.TrovaNdecSuPrzUn(0))
            End If
          End If
        End If
      End If    'If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
      'Prezzi
      If dttET.Rows(0)!et_scorpo.ToString = "S" Then
        dPreziva = dResidIVA
        dPrezzo = dResid
        dPrezvalc = 0
      Else
        If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
          dPreziva = 0
          dPrezzo = dResid
          dPrezvalc = dResidv
        Else
          dPreziva = 0
          dPrezzo = dResid
          dPrezvalc = 0
        End If
      End If

      '----------------------
      'preparo per aggiornare le colonne codice contropartita, conto contropartita, centro, linea, commessa, 
      'sottocommessa prendendole dalla prima riga del documento di acconto
      With dttAcconti.Rows(0)
        If Not oCldBoll.GetContropAccontiPrimaRiga(strDittaCorrente, !tm_tipork.ToString, NTSCInt(!tm_anno), _
                                                  !tm_serie.ToString, NTSCInt(!tm_numdoc), dttMmacc) Then Return False
      End With
      If dttMmacc.Rows.Count = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128704602605624722, "Il documento d'acconto selezionato è stato eliminato. Impossibile continuare.")))
        Return False
      End If

      '----------------------
      'Storno delle provvigioni solo se:
      ' 1)gli agenti sull'acconto e su questo documento sono identici
      ' 2)non ci sono provvigioni a valore
      ' 3)è abilitata l'opzione \Bsveboll\Opzioni\StornaProvvAcconti
      dProvv = 0 : dProvv2 = 0 : dVProvv = 0 : dVProvv2 = 0
      If dttMmacc.Rows(0)!mm_flstat.ToString = "N" And (bStornaProvvAcconti = True) Then
        If NTSCInt(dttMmacc.Rows(0)!tm_codagen) = NTSCInt(dttET.Rows(0)!et_codagen) Then
          dProvv = NTSCDec(dttMmacc.Rows(0)!mm_provv)
          dVProvv = ArrDbl((dPrezzo * -1) * dProvv / 100, oCldBoll.TrovaNdec(0))
        End If
        If NTSCInt(dttMmacc.Rows(0)!tm_codagen2) = NTSCInt(dttET.Rows(0)!et_codagen2) Then
          dProvv2 = NTSCDec(dttMmacc.Rows(0)!mm_provv2)
          dVProvv2 = ArrDbl((dPrezzo * -1) * dProvv2 / 100, oCldBoll.TrovaNdec(0))
        End If
      End If

      '-----------------
      'inserisco la riga 
      dttEC.Rows.Add(dttEC.NewRow)
      bAdded = True
      With dttEC.Rows(dttEC.Rows.Count - 1)
        'forzo la MovordOnAddNewRow
        !codditt = "."
        !codditt = strDittaCorrente
        !ec_codart = "D"
        !ec_descr = strDescrAcc
        !ec_desint = strDescrAgg
        !ec_actipo = dttAcconti.Rows(0)!tm_tipork
        !ec_acanno = dttAcconti.Rows(0)!tm_anno
        !ec_acserie = dttAcconti.Rows(0)!tm_serie
        !ec_acnum = dttAcconti.Rows(0)!tm_numdoc
        !ec_colli = 1
        !ec_quant = 1
        !ec_prezvalc = dPrezvalc * -1
        !ec_preziva = dPreziva * -1
        !ec_prezzo = dPrezzo * -1
        !ec_scont1 = 0
        !ec_scont2 = 0
        !ec_scont3 = 0
        !ec_scont4 = 0
        !ec_scont5 = 0
        !ec_scont6 = 0
        !ec_scontp = 0
        !ec_scontv = 0
        !ec_codiva = NTSCInt(dttAcconti.Rows(0)!tm_codiva_1)
        !ec_controp = dttMmacc.Rows(0)!mm_controp
        !ec_provv = dProvv
        !ec_provv2 = dProvv2
        !ec_codcfam = dttMmacc.Rows(0)!mm_codcfam
        !ec_commeca = dttMmacc.Rows(0)!mm_commeca
        !ec_subcommeca = dttMmacc.Rows(0)!mm_subcommeca
        !ec_codcena = dttMmacc.Rows(0)!mm_codcena
      End With

      bInIncollaRiga = True    'per non far dare il messaggio se sulla riga di acconto non è presente il cod iva o la contropartita: inserisce la riga ma al salva del documento darà il messaggio
      If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
        bInIncollaRiga = False
        dttEC.Rows(dttEC.Rows.Count - 1).Delete()
        Return False
      End If
      bInIncollaRiga = False

      CalcolaTotali()

      Return True

    Catch ex As Exception
      If bAdded Then dttEC.Rows(dttEC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      bInIncollaRiga = False
      dttAcconti.Clear()
      dttMmacc.Clear()
    End Try
  End Function

  Public Overridable Function LeggiOpzioneRifAcc(ByRef strOuSerie2 As String, ByRef lOuNumdoc2 As Integer, _
                                                 ByRef dtOuDatdoc2 As Date, ByVal nCodLing As Integer, _
                                                 ByRef strDescr1 As String, ByRef strDescr2 As String) As Boolean
    Dim strT() As String
    Dim bTrovato As Boolean
    Dim i As Integer
    Dim lPos As Integer
    Try
      If strDescrLinguaRifAcc.Trim = "" Then Return True

      strT = strDescrLinguaRifAcc.Split(";"c)
      bTrovato = False
      For i = 0 To strT.Length - 1
        If i Mod 2 = 0 Then
          If NTSCInt(strT(i)) = nCodLing Then
            bTrovato = True
            If (i + 1) <= strT.Length Then strDescr1 = strT(i + 1)
            Exit For
          End If
        End If
      Next

      If Not bTrovato Then Return True

      'Costruisce la descrizione
      If strOuSerie2 = " " Or strOuSerie2 = "" Then
        strDescr1 = strDescr1 & " " & lOuNumdoc2 & " (" & CStr(dtOuDatdoc2) & ")"
      Else
        strDescr1 = strDescr1 & " " & lOuNumdoc2 & "/" & strOuSerie2 & " (" & CStr(dtOuDatdoc2) & ")"
      End If
      If Len(strDescr1) > 40 Then
        lPos = InStr(1, strDescr1, " (")
        strDescr1 = Mid(strDescr1, 1, lPos)
        strDescr2 = "(" & CStr(dtOuDatdoc2) & ")"
      Else
        strDescr2 = ""
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function GetWhereHltmFatturaFigurativa() As String
    Try
      Return oCldBoll.GetWhereHltmFatturaFigurativa(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_conto), NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_scorpo))
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return ""
    End Try
  End Function



  Public Overridable Function GetWhereHlri() As String
    Dim dttTmp As New DataTable
    Try
      'verifico se il tipobf è per una cessione di beni o prestazione di servizi
      oCldBoll.ValCodiceDb(dttET.Rows(0)!et_tipobf.ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
      'zoom ricevute fiscali da riemettere
      Return oCldBoll.GetWhereHlri(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_valuta), _
                                  NTSCInt(dttET.Rows(0)!et_conto), dttET.Rows(0)!et_scorpo.ToString, _
                                  NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString, dttTmp.Rows(0)!tb_prestserv.ToString)

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return ""
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function ImportaRicevuteFiscali(ByRef dttRi As DataTable) As Boolean
    Dim strDescrAcc As String = ""
    Dim lPos As Integer = 0
    Dim strDescrAgg As String = ""
    Dim dttTmp As New DataTable
    Dim strMsg As String = ""
    Dim evnt As NTSEventArgs = Nothing
    Dim dPreziva As Decimal = 0
    Dim dPrezzo As Decimal = 0
    Dim dPrezvalc As Decimal = 0
    Dim bAdded As Boolean = False
    Dim strMess As String = ""
    Dim strHead As String = ""

    Try
      If dttRi.Rows.Count = 0 Then Return True

      If oCldBoll.ValCodiceDb("D", strDittaCorrente, "ARTICO", "S") = False Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128704591385937500, "Attenzione! non è codificato l'articolo 'D' utilizzato per i riferimenti alle ricevute fiscali da riemettere.")))
        Return False
      End If

      For Each dtrRi As DataRow In dttRi.Rows
        With dtrRi
          '------------------
          'Costruisce la descrizione
          If !tm_serie.ToString.Trim = "" Then
            strDescrAcc = "Riem. Ric. fisc. " & NTSCInt(!tm_numdoc).ToString & " del " & NTSCDate(!tm_datdoc).ToShortDateString
          Else
            strDescrAcc = "Riem. Ric. fisc. " & NTSCInt(!tm_numdoc).ToString & "/" & !tm_serie.ToString & " del " & NTSCDate(!tm_datdoc).ToShortDateString
          End If
          If Len(strDescrAcc) > 40 Then
            lPos = InStr(1, strDescrAcc, " del ")
            strDescrAcc = Mid(strDescrAcc, 1, lPos) & " del "
            strDescrAgg = NTSCDate(!tm_datdoc).ToShortDateString
          Else
            strDescrAgg = ""
          End If

          '------------------
          'Controlla se è già stato inserito
          If dttEC.Select("ec_prtipo = " & CStrSQL(!tm_tipork) & " AND ec_pranno = " & !tm_anno.ToString & _
                          " AND ec_prserie = " & CStrSQL(!tm_serie) & " AND ec_prnum = " & !tm_numdoc.ToString & _
                          " AND ec_prriga = " & !xx_riga.ToString).Length > 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734887877239839, "Ricevuta fiscale |" & NTSCInt(!tm_numdoc).ToString & "/" & !tm_serie.ToString & " del " & NTSCDate(!tm_datdoc).ToShortDateString & "| già inserita.")))
            GoTo Passa
          End If

          '------------------
          'test CUP e CIG
          If dttEC.Rows.Count = 0 Then
            dttET.Rows(0)!et_cup = !tm_cup
            dttET.Rows(0)!et_cig = !tm_cig
            dttET.Rows(0)!et_riferimpa = !tm_riferimpa
          Else
            strHead = oApp.Tr(Me, 130471260645227503, "Attenzione! I seguenti campi della RICEVUTA FISCALE serie '|" & _
                                  !tm_serie.ToString & "|' numero |" & !tm_numdoc.ToString & _
                                  "| differiscono dal documento " & _
                                  "corrente:" & vbCrLf & vbCrLf)

            If NTSCStr(!tm_cup) <> NTSCStr(dttET.Rows(0)!et_cup) Then
              strMess = strMess & oApp.Tr(Me, 130471260664167952, "- Codice CUP |" & NTSCStr(!tm_cup).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!tm_cig) <> NTSCStr(dttET.Rows(0)!et_cig) Then
              strMess = strMess & oApp.Tr(Me, 130471260678487946, "- Codice CIG |" & NTSCStr(!tm_cig).ToString() & "|" & vbCrLf)
            End If
            If NTSCStr(!tm_riferimpa) <> NTSCStr(dttET.Rows(0)!et_riferimpa) Then
              strMess = strMess & oApp.Tr(Me, 130471260694399660, "- Riferimento ordine P.A. |" & NTSCStr(!tm_riferimpa).ToString() & "|" & vbCrLf)
            End If
            If strMess <> "" Then
              ThrowRemoteEvent(New NTSEventArgs("", strHead & strMess & vbCrLf & oApp.Tr(Me, 130471243884036946, "La riga non verra acquisita")))
              GoTo passa
            End If
            strMess = ""
          End If

          '------------------
          'Prezzi
          If dttET.Rows(0)!et_scorpo.ToString = "S" Then
            dPreziva = NTSCDec(!xx_valdainc)
            dPrezvalc = 0
            dPrezzo = NTSCDec(!xx_impdainc)
          Else
            If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
              dPreziva = 0
              dPrezvalc = NTSCDec(!xx_impdainc)
              'dPrezzo = oCldBoll.ConvPrezzoUnValuta(!tt_quaeva, Val(edValuta.Text), edDatdoc.Text, NTSCDec(edCambio), bCanc)
            Else
              dPreziva = 0
              dPrezvalc = 0
              dPrezzo = NTSCDec(!xx_impdainc)
            End If
          End If

        End With    'With dtrRi

        '-----------------
        'inserisco la riga 
        dttEC.Rows.Add(dttEC.NewRow)
        bAdded = True
        With dttEC.Rows(dttEC.Rows.Count - 1)
          'forzo la MovordOnAddNewRow
          !codditt = "."
          !codditt = strDittaCorrente
          !ec_codart = "D"
          !ec_descr = strDescrAcc
          !ec_desint = strDescrAgg
          !ec_codiva = NTSCInt(dtrRi!xx_codiva)
          !ec_controp = dtrRi!xx_ccontr_1
          !ec_colli = 1
          !ec_quant = 1
          !ec_prezvalc = dPrezvalc
          !ec_preziva = dPreziva
          !ec_prezzo = dPrezzo
          !ec_scont1 = 0
          !ec_scont2 = 0
          !ec_scont3 = 0
          !ec_scont4 = 0
          !ec_scont5 = 0
          !ec_scont6 = 0
          !ec_scontp = 0
          !ec_scontv = 0
          !ec_provv = 0
          !ec_provv2 = 0
          !ec_prtipo = dtrRi!tm_tipork
          !ec_pranno = dtrRi!tm_anno
          !ec_prserie = dtrRi!tm_serie
          !ec_prnum = dtrRi!tm_numdoc
          !ec_prriga = dtrRi!xx_riga
          !xxo_orultagg = dtrRi!tm_ultagg
        End With

        If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
          dttEC.Rows(dttEC.Rows.Count - 1).Delete()
          Return False
        End If
        bAdded = False
Passa:
      Next  'For Each dtrTi As DataRow In dttRi.Rows

      CalcolaTotali()

      Return True

    Catch ex As Exception
      If bAdded Then dttEC.Rows(dttEC.Rows.Count - 1).Delete()
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttRi.Clear()
    End Try
  End Function

  '------------------------

  Public Overridable Function RettificaTotdoc(ByVal dNewTotDoc As Decimal) As Boolean
    Dim dDiff As Decimal = 0
    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Dim i As Integer = 0
    Dim dTotaleIC As Decimal = 0
    Dim dValoreIC As Decimal = 0
    Dim dQuotaIC As Decimal = 0
    Dim bTrov As Boolean = False
    Dim dtrT() As DataRow = Nothing
    Dim dQuotaIE As Decimal = 0

    Try

      If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
        dDiff = NTSCDec(dttET.Rows(0)!et_totdocv) - dNewTotDoc
      Else
        dDiff = NTSCDec(dttET.Rows(0)!et_totdoc) - dNewTotDoc
      End If

      'Calcola il totale merce iva inclusa
      dTotaleIC = 0
      bTrov = False
      If Not oDttgr.NTSGroupBy(dttEC, dttGr, "Sum(ec_valore) AS TotValori, ec_codiva", "ec_codiva > 0 AND ec_controp > 0 AND ec_stasino = 'S'", "ec_codiva") Then Return False
      For i = 0 To dttGr.Rows.Count - 1
        dTotaleIC += NTSCDec(dttGr.Rows(i)!totvalori) + oCldBoll.CalcolaIva(NTSCDec(dttGr.Rows(i)!totvalori), NTSCInt(dttGr.Rows(i)!ec_codiva))
        bTrov = True
      Next
      dttGr.Clear()

      If Not bTrov Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128687270845312500, "Non esistono righe su cui poter rettificare i prezzi (cioè con codice IVA e contropartita maggiori di zero).")))
        Return False
      End If
      If dTotaleIC = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128687271178750000, "Non esistono elementi per rettificare i prezzi in quanto nessuna riga è valorizzata.")))
        Return False
      End If

      'Aggiorna il prezzo sulle righe
      For Each dtrM As DataRow In dttEC.Select("ec_codiva > 0 AND ec_controp > 0 AND ec_stasino = 'S'")
        With dtrM
          dQuotaIE = 0
          'Determina la quota parte della riga corrente
          If dTotaleIC <> 0 Then
            dValoreIC = NTSCDec(!ec_valore) + oCldBoll.CalcolaIva(NTSCDec(!ec_valore), NTSCInt(!ec_codiva))
            dQuotaIC = (dDiff * dValoreIC) / dTotaleIC
            If dttET.Rows(0)!et_scorpo.ToString = "S" Then
              dQuotaIE = dQuotaIC
            Else
              dQuotaIE = RettificaTotdoc_ScorporaImponibile(dQuotaIC, NTSCInt(!ec_codiva))
            End If

            If NTSCDec(!ec_scont1) <> 100 And NTSCDec(!ec_scont2) <> 100 And NTSCDec(!ec_scont3) <> 100 And _
               NTSCDec(!ec_scont4) <> 100 And NTSCDec(!ec_scont5) <> 100 And NTSCDec(!ec_scont6) <> 100 And _
               NTSCDec(!ec_scont6) <> 100 And NTSCDec(!ec_scont6) <> 100 And NTSCDec(!ec_scont6) <> 100 And _
               NTSCDec(!ec_scontp) <> 100 And NTSCDec(!ec_scontv) <> 100 And NTSCDec(dttET.Rows(0)!et_scont1) <> 100 And _
               NTSCDec(dttET.Rows(0)!et_scont2) <> 100 And NTSCDec(dttET.Rows(0)!et_scopag) <> 100 Then
              If !ec_umprz.ToString <> "S" Then
                If NTSCDec(!ec_quant) <> 0 Then
                  dQuotaIE = ArrDbl(((dQuotaIE / NTSCDec(!ec_quant) * NTSCDec(!ec_perqta)) / ((100 - NTSCDec(!ec_scont1)) / 100) / ((100 - NTSCDec(!ec_scont2)) / 100) / ((100 - NTSCDec(!ec_scont3)) / 100) / ((100 - NTSCDec(!ec_scont4)) / 100) / ((100 - NTSCDec(!ec_scont5)) / 100) / ((100 - NTSCDec(!ec_scont6)) / 100) / ((100 - NTSCDec(!ec_scontp)) / 100) - NTSCDec(!ec_scontv)) / ((100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100), 6)
                Else
                  dQuotaIE = 0
                End If
              Else
                If NTSCDec(!ec_colli) <> 0 Then
                  dQuotaIE = ArrDbl(((dQuotaIE / NTSCDec(!ec_colli) * NTSCDec(!ec_perqta)) / ((100 - NTSCDec(!ec_scont1)) / 100) / ((100 - NTSCDec(!ec_scont2)) / 100) / ((100 - NTSCDec(!ec_scont3)) / 100) / ((100 - NTSCDec(!ec_scont4)) / 100) / ((100 - NTSCDec(!ec_scont5)) / 100) / ((100 - NTSCDec(!ec_scont6)) / 100) / ((100 - NTSCDec(!ec_scontp)) / 100) - NTSCDec(!ec_scontv)) / ((100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100), 6)
                Else
                  dQuotaIE = 0
                End If
              End If
            Else
              dQuotaIE = 0
            End If

          End If
          'Aggiorna il prezzo/prezvalc/preziva della riga
          If dQuotaIE <> 0 Then
            If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
              !ec_prezvalc = ArrDbl(NTSCDec(!ec_prezvalc) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(NTSCInt(dttET.Rows(0)!et_valuta)))
              '!ec_prezzo = oCldBoll.ConvPrezzoUnValuta(!ec_prezvalc, Val(edValuta.Text), edDatdoc.Text, NTSCDec(edCambio), bCanc)
            Else
              If dttET.Rows(0)!et_scorpo.ToString = "S" Then
                !ec_preziva = ArrDbl(NTSCDec(!ec_preziva) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(0))
                'oCldBoll.Scorporo!ec_preziva, !ec_codiva, dQuotaIE, 0, oCldBoll.TrovaNdecSuPrzUn(0)
                '!ec_prezzo = dQuotaIE
              Else
                'Caso normale
                !ec_prezzo = ArrDbl(NTSCDec(!ec_prezzo) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(0))
              End If
            End If
            .AcceptChanges()
          End If
        End With    'With dtrM
      Next    'For Each dtrM As DataRow In dttEC.Select("ec_codiva > 0 AND ec_controp > 0 AND ec_stasino = 'S'")

      CalcolaTotali()

      'Controlla che differenza è rimasta dopo questo primo passaggio
      If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
        dDiff = NTSCDec(dttET.Rows(0)!et_totdocv) - dNewTotDoc
      Else
        dDiff = NTSCDec(dttET.Rows(0)!et_totdoc) - dNewTotDoc
      End If

      If dDiff = 0 Then Return True

      'Inserisce questa differenza sulla riga con valore + alto
      dtrT = dttEC.Select("ec_codiva > 0 AND ec_controp >0 AND ec_stasino= 'S'", "ec_valore DESC")
      If dtrT.Length > 0 Then
        With dtrT(0)
          If dttET.Rows(0)!et_scorpo.ToString = "S" Then
            dQuotaIE = dDiff
          Else
            dQuotaIE = RettificaTotdoc_ScorporaImponibile(dDiff, NTSCInt(!ec_codiva))
          End If

          If !ec_umprz.ToString <> "S" Then
            If NTSCDec(!ec_quant) <> 0 Then
              dQuotaIE = ArrDbl(((dQuotaIE / NTSCDec(!ec_quant) * NTSCDec(!ec_perqta)) / ((100 - NTSCDec(!ec_scont1)) / 100) / ((100 - NTSCDec(!ec_scont2)) / 100) / ((100 - NTSCDec(!ec_scont3)) / 100) / ((100 - NTSCDec(!ec_scont4)) / 100) / ((100 - NTSCDec(!ec_scont5)) / 100) / ((100 - NTSCDec(!ec_scont6)) / 100) / ((100 - NTSCDec(!ec_scontp)) / 100) - NTSCDec(!ec_scontv)) / ((100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100), 6)
            Else
              dQuotaIE = 0
            End If
          Else
            If NTSCDec(!ec_colli) <> 0 Then
              dQuotaIE = ArrDbl(((dQuotaIE / NTSCDec(!ec_colli) * NTSCDec(!ec_perqta)) / ((100 - NTSCDec(!ec_scont1)) / 100) / ((100 - NTSCDec(!ec_scont2)) / 100) / ((100 - NTSCDec(!ec_scont3)) / 100) / ((100 - NTSCDec(!ec_scont4)) / 100) / ((100 - NTSCDec(!ec_scont5)) / 100) / ((100 - NTSCDec(!ec_scont6)) / 100) / ((100 - NTSCDec(!ec_scontp)) / 100) - NTSCDec(!ec_scontv)) / ((100 - NTSCDec(dttET.Rows(0)!et_scont1)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scont2)) / 100) / ((100 - NTSCDec(dttET.Rows(0)!et_scopag)) / 100), 6)
            Else
              dQuotaIE = 0
            End If
          End If

          'Aggiorna il prezzo/prezvalc/preziva della riga
          If dQuotaIE <> 0 Then
            If NTSCInt(dttET.Rows(0)!et_valuta) <> 0 Then
              !ec_prezvalc = ArrDbl(NTSCDec(!ec_prezvalc) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(NTSCInt(dttET.Rows(0)!et_valuta)))
              '!ec_prezzo = oCldBoll.ConvPrezzoUnValuta(!ec_prezvalc, Val(edValuta.Text), edDatdoc.Text, NTSCDec(edCambio), bCanc)
            Else
              If dttET.Rows(0)!et_scorpo.ToString = "S" Then
                !ec_preziva = ArrDbl(NTSCDec(!ec_preziva) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(0))
                'oCldBoll.Scorporo!ec_preziva, !ec_codiva, dQuotaIE, 0, oCldBoll.TrovaNdecSuPrzUn(0)
                '!ec_prezzo = dQuotaIE
              Else
                'Caso normale
                !ec_prezzo = ArrDbl(NTSCDec(!ec_prezzo) - dQuotaIE, oCldBoll.TrovaNdecSuPrzUn(0))
              End If
            End If
            .AcceptChanges()
          End If
        End With    'With dtrT(0)
      End If    'If dtrT.Length > 0 Then

      CalcolaTotali()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function RettificaTotdoc_ScorporaImponibile(ByVal dIvaInclusa As Decimal, ByVal nCodiceIva As Integer) As Decimal
    Dim dAliq As Decimal
    dAliq = oCldBoll.AliquotaIva(nCodiceIva)
    If dAliq = 0 Then
      Return dIvaInclusa
    End If
    Return (dIvaInclusa * 100) / (100 + dAliq)
  End Function

  '------------------------

  Public Overridable Function AlertContabilizzato() As Boolean
    Dim dttAlert As DataTable = Nothing
    Dim strTmp As String = ""
    Try
      dttAlert = CType(oCleComm, CLELBMENU).CreaDynasetAlert
      dttAlert.Rows.Add(dttAlert.NewRow)
      dttAlert.Rows(0)!codditt = strDittaCorrente
      dttAlert.Rows(0)!strMsg = oApp.Tr(Me, 128740015680545000, _
                               "E' stato modificato il documento tipo '|" & dttET.Rows(0)!et_tipork.ToString & "|' anno |" & _
                               dttET.Rows(0)!et_anno.ToString & "| serie '|" & _
                               dttET.Rows(0)!et_serie.ToString & "|' numero |" & _
                               dttET.Rows(0)!et_numdoc.ToString & "|. " & _
                               "Tale documento risulta già contabilizzato con la registrazione numero |" & _
                               dttET.Rows(0)!et_numregef.ToString & "| del |" & _
                              NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString & "|." & _
                               "Si consiglia pertanto di ricontabilizzarlo.")
      dttAlert.AcceptChanges()
      CType(oCleComm, CLELBMENU).Verifica_Genera_Alert(2, strDittaCorrente, "BSVEBOLL", 2, 0, dttAlert)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttAlert.Clear()
    End Try
  End Function


  '------------------------

  Public Overridable Function CambiaNumdoc(ByRef ds As DataSet, ByVal strNewTipork As String, ByVal lNewProgr As Integer, Optional ByVal strNewSerie As String = "", Optional ByVal nNewAnno As Integer = 0, Optional ByVal bTestNumdoc As Boolean = False) As Boolean
    '--------------------------------
    'cambio il numero documento
    Dim i As Integer = 0
    Dim dttTmp As New DataTable

    Try
      'se non serve non faccio nulla
      If strNewTipork = "" And lNewProgr = 0 And strNewSerie = "" And nNewAnno = 0 Then Return True

      '----------------------------------------
      'verifico se esiste già un Documento con le stesse caratteristiche
      If bTestNumdoc Then
        If oCldBoll.EsisteDoc(strDittaCorrente, strNewTipork, nNewAnno, strNewSerie, lNewProgr, dttTmp) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128734886676141839, "Esiste già un documento di tipo |'" & DescrTipork(dttTmp.Rows(0)!tm_tipork.ToString) & "'| con le stesse caratteristiche di quello che si desidera creare.")))
          Return False
        End If
      End If

      If strNewTipork <> "" Then ds.Tables("TESTA").Rows(0)!et_tipork = strNewTipork
      If lNewProgr <> 0 Then ds.Tables("TESTA").Rows(0)!et_numdoc = lNewProgr
      If strNewSerie <> "" Then ds.Tables("TESTA").Rows(i)!et_serie = strNewSerie
      If nNewAnno <> 0 Then ds.Tables("TESTA").Rows(i)!et_anno = nNewAnno

      If strNewTipork <> "" Then ds.Tables("TESTAC").Rows(0)!tm_tipork = strNewTipork
      If lNewProgr <> 0 Then ds.Tables("TESTAC").Rows(0)!tm_numdoc = lNewProgr
      If strNewSerie <> "" Then ds.Tables("TESTAC").Rows(i)!tm_serie = strNewSerie
      If nNewAnno <> 0 Then ds.Tables("TESTAC").Rows(i)!tm_anno = nNewAnno

      For i = 0 To ds.Tables("CORPO").Rows.Count - 1
        If strNewTipork <> "" Then ds.Tables("CORPO").Rows(i)!ec_tipork = strNewTipork
        If lNewProgr <> 0 Then ds.Tables("CORPO").Rows(i)!ec_numdoc = lNewProgr
        If strNewSerie <> "" Then ds.Tables("CORPO").Rows(i)!ec_serie = strNewSerie
        If nNewAnno <> 0 Then ds.Tables("CORPO").Rows(i)!ec_anno = nNewAnno
      Next

      'movmatr contiene disa i record di corpo che di corpoimp
      For i = 0 To ds.Tables("MOVMATR").Rows.Count - 1
        If ds.Tables("MOVMATR").Rows(i)!mma_tipork.ToString <> "U" Then
          'sugli scarichi rimane sempre un 'U'
          If strNewTipork <> "" Then ds.Tables("MOVMATR").Rows(i)!mma_tipork = strNewTipork
        End If
        If lNewProgr <> 0 Then ds.Tables("MOVMATR").Rows(i)!mma_numdoc = lNewProgr
        If strNewSerie <> "" Then ds.Tables("MOVMATR").Rows(i)!mma_serie = strNewSerie
        If nNewAnno <> 0 Then ds.Tables("MOVMATR").Rows(i)!mma_anno = nNewAnno
      Next

      For i = 0 To ds.Tables("MOVCLA").Rows.Count - 1
        If strNewTipork <> "" Then ds.Tables("MOVCLA").Rows(i)!mc_outipo = strNewTipork
        If lNewProgr <> 0 Then ds.Tables("MOVCLA").Rows(i)!mc_ounum = lNewProgr
        If strNewSerie <> "" Then ds.Tables("MOVCLA").Rows(i)!mc_ouserie = strNewSerie
        If nNewAnno <> 0 Then ds.Tables("MOVCLA").Rows(i)!mc_ouanno = nNewAnno
      Next

      For i = 0 To ds.Tables("MOVCONA").Rows.Count - 1
        If strNewTipork <> "" Then ds.Tables("MOVCONA").Rows(i)!mma_tipork = strNewTipork
        If lNewProgr <> 0 Then ds.Tables("MOVCONA").Rows(i)!mma_numdoc = lNewProgr
        If strNewSerie <> "" Then ds.Tables("MOVCONA").Rows(i)!mma_serie = strNewSerie
        If nNewAnno <> 0 Then ds.Tables("MOVCONA").Rows(i)!mma_anno = nNewAnno
      Next

      If ds.Tables("TESTA").Rows(0)!et_tipork.ToString = "T" Then
        For i = 0 To ds.Tables("CORPOIMP").Rows.Count - 1
          'If strNewTipork <> "" Then ds.Tables("CORPOIMP").Rows(i)!ec_tipork = strNewTipork    'rimane sempre un 'U'
          If lNewProgr <> 0 Then ds.Tables("CORPOIMP").Rows(i)!ec_numdoc = lNewProgr
          If strNewSerie <> "" Then ds.Tables("CORPOIMP").Rows(i)!ec_serie = strNewSerie
          If nNewAnno <> 0 Then ds.Tables("CORPOIMP").Rows(i)!ec_anno = nNewAnno
          If NTSCInt(ds.Tables("CORPOIMP").Rows(i)!ec_prnum) <> 0 Then
            If strNewTipork <> "" Then ds.Tables("CORPOIMP").Rows(i)!ec_prtipo = strNewTipork
            If lNewProgr <> 0 Then ds.Tables("CORPOIMP").Rows(i)!ec_prnum = lNewProgr
            If strNewSerie <> "" Then ds.Tables("CORPOIMP").Rows(i)!ec_prserie = strNewSerie
            If nNewAnno <> 0 Then ds.Tables("CORPOIMP").Rows(i)!ec_pranno = nNewAnno
          End If
        Next

        For i = 0 To ds.Tables("LAVCENT").Rows.Count - 1
          If strNewTipork <> "" Then ds.Tables("LAVCENT").Rows(i)!lce_tipork = strNewTipork
          If lNewProgr <> 0 Then ds.Tables("LAVCENT").Rows(i)!lce_numdoc = lNewProgr
          If strNewSerie <> "" Then ds.Tables("LAVCENT").Rows(i)!lce_serie = strNewSerie
          If nNewAnno <> 0 Then ds.Tables("LAVCENT").Rows(i)!lce_anno = nNewAnno
        Next

      End If

      If bModTCO Then
        For i = 0 To ds.Tables("CORPOTC").Rows.Count - 1
          If strNewTipork <> "" Then ds.Tables("CORPOTC").Rows(i)!ec_tipork = strNewTipork
          If lNewProgr <> 0 Then ds.Tables("CORPOTC").Rows(i)!ec_numdoc = lNewProgr
          If strNewSerie <> "" Then ds.Tables("CORPOTC").Rows(i)!ec_serie = strNewSerie
          If nNewAnno <> 0 Then ds.Tables("CORPOTC").Rows(i)!ec_anno = nNewAnno
        Next
        For i = 0 To ds.Tables("CORPOIMPTC").Rows.Count - 1
          'If strNewTipork <> "" Then ds.Tables("CORPOIMPTC").Rows(i)!ec_tipork = strNewTipork    'rimane sempre un 'U'
          If lNewProgr <> 0 Then ds.Tables("CORPOIMPTC").Rows(i)!ec_numdoc = lNewProgr
          If strNewSerie <> "" Then ds.Tables("CORPOIMPTC").Rows(i)!ec_serie = strNewSerie
          If nNewAnno <> 0 Then ds.Tables("CORPOIMPTC").Rows(i)!ec_anno = nNewAnno
        Next
      End If

      For i = 0 To ds.Tables("SCHETRASP").Rows.Count - 1
        If lNewProgr <> 0 Then ds.Tables("SCHETRASP").Rows(i)!et_numdoc = lNewProgr
        If strNewSerie <> "" Then ds.Tables("SCHETRASP").Rows(i)!et_serie = strNewSerie
        If nNewAnno <> 0 Then ds.Tables("SCHETRASP").Rows(i)!et_anno = nNewAnno
      Next

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function


  Public Overridable Function IsRFsalvabile() As Boolean
    '--------------------------
    'controlla se la ricevuta fiscale è salvabile
    Dim dTmp As Decimal = 0
    Dim dTmp1 As Decimal = 0
    Dim dTmp2 As Decimal = 0
    Try
      With dttET.Rows(0)
        If !et_tipork.ToString = "F" And bNew = False And IsRFdaRiemettere() Then
          If NTSCInt(!et_valuta) > 0 Then
            dTmp = NTSCDec(!et_totdocv) - NTSCDec(!et_totomagv) - NTSCDec(!et_pagatov) - NTSCDec(!et_abbuonov)
            dTmp1 = NTSCDec(!et_imponibv_1) + NTSCDec(!et_imponibv_2) + NTSCDec(!et_imponibv_3) + NTSCDec(!et_imponibv_4) + NTSCDec(!et_imponibv_5) + NTSCDec(!et_imponibv_6) + NTSCDec(!et_imponibv_7) + NTSCDec(!et_imponibv_8)
            'parte considerata riemessa con omaggi+pagato+abbuono
            dTmp2 = dTmp1 - ArrDbl((dTmp * dTmp1) / NTSCDec(!et_totdocv), ocldBase.TrovaNdec(NTSCInt(!et_valuta)))
            If NTSCDec(!et_totriemrfv) > ArrDbl(dTmp2, ocldBase.TrovaNdec(NTSCInt(!et_valuta))) Or !et_salriemrf.ToString <> "N" Then
              'RF non modificabile xchè già parzilmente o totalmente riemessa
              Return False
            End If
          Else
            dTmp = NTSCDec(!et_totdoc) - NTSCDec(!et_totomag) - NTSCDec(!et_pagato) - NTSCDec(!et_pagato2) - NTSCDec(!et_abbuono)
            dTmp1 = NTSCDec(!et_imponib_1) + NTSCDec(!et_imponib_2) + NTSCDec(!et_imponib_3) + NTSCDec(!et_imponib_4) + NTSCDec(!et_imponib_5) + NTSCDec(!et_imponib_6) + NTSCDec(!et_imponib_7) + NTSCDec(!et_imponib_8)
            'parte considerata riemessa con omaggi+pagato+abbuono
            dTmp2 = dTmp1 - ArrDbl((dTmp * dTmp1) / NTSCDec(!et_totdoc), ocldBase.TrovaNdec(0))
            If NTSCDec(!et_totriemrf) > ArrDbl(dTmp2, ocldBase.TrovaNdec(0)) Or !et_salriemrf.ToString <> "N" Then
              'RF non modificabile xchè già parzilmente o totalmente riemessa
              Return False
            End If
          End If
        End If
      End With

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function IsRFdaRiemettere() As Boolean
    Dim dttTmp As New DataTable
    Try
      With dttET.Rows(0)
        If !et_tipork.ToString = "F" Then
          oCldBoll.ValCodiceDb(!et_tipobf.ToString, strDittaCorrente, "TABTPBF", "N", "", dttTmp)
          'Controlla se è una RF da riemettere
          If NTSCInt(!et_valuta) > 0 Then
            If NTSCDec(!et_totdocv) - NTSCDec(!et_totomagv) <> 0 Then
              If NTSCDec(!et_totdocv) - NTSCDec(!et_totomagv) > NTSCDec(!et_pagatov) + NTSCDec(!et_abbuonov) Then
                'Guarda se il tipo bolla/fatt è segue qualcosa
                If dttTmp.Rows(0)!tb_flresocl.ToString = "N" Then
                  Return True
                End If
              End If
            End If
          Else
            If NTSCDec(!et_totdoc) - NTSCDec(!et_totomag) <> 0 Then
              If NTSCDec(!et_totdoc) - NTSCDec(!et_totomag) > NTSCDec(!et_pagato) + NTSCDec(!et_pagato2) + NTSCDec(!et_abbuono) Then
                'Guarda se il tipo bolla/fatt è segue qualcosa
                If dttTmp.Rows(0)!tb_flresocl.ToString = "N" Then
                  Return True
                End If
              End If
            End If
          End If
        End If
      End With

      Return False

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function

  '------------------------

  Public Overridable Function GetQueryStampaPdf() As String
    Try
      Return oCldBoll.GetQueryStampaPdf(strDittaCorrente, dttET.Rows(0)!et_tipork.ToString, _
                                        NTSCInt(dttET.Rows(0)!et_anno), dttET.Rows(0)!et_serie.ToString, _
                                        NTSCInt(dttET.Rows(0)!et_numdoc.ToString))

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
      Return ""
    End Try
  End Function

  '------------------------

  Public Overridable Function GetDettaglioEvasione(ByVal lRiga As Integer, ByRef dttOut As DataTable) As Boolean
    Try
      With dttET.Rows(0)
        Return oCldBoll.GetDettaglioEvasioneNota(strDittaCorrente, NTSCStr(!et_tipork), NTSCInt(!et_anno), _
                                             NTSCStr(!et_serie), NTSCInt(!et_numdoc), lRiga, dttOut)
      End With

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

#Region "FORM BEORDEMO"
  Public bDemoHasChanges As Boolean = False
  Public dsDemoShared As DataSet
  Public strDemoPrevCelValue As String = ""

  Public Overridable Function DemoApri(ByRef dsDemo As DataSet) As Boolean
    Dim dReturn As Boolean = False
    Try

      '--------------------------------------
      'imposto i valori di default per i nuovi record
      DemoSetDefaultValue(dsDemo)
      dsDemoShared = dsDemo

      '--------------------------------------
      'creo gli eventi per la gestione del datatable dentro l'entity
      AddHandler dsDemoShared.Tables("DEMO").ColumnChanging, AddressOf DemoBeforeColUpdate
      AddHandler dsDemoShared.Tables("DEMO").ColumnChanged, AddressOf DemoAfterColUpdate

      '--------------------------------------
      'confermo tutto
      dsDemoShared.Tables("DEMO").AcceptChanges()
      bDemoHasChanges = False

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public Overridable Sub DemoSetDefaultValue(ByRef ds As DataSet)
    Try
      'ora imposto i valori di default diversi da quelli impostati nel database
      'ds.Tables("TABDEMO").Columns("ec_colli").DefaultValue = 
      'ds.Tables("TABDEMO").Columns("ec_quant").DefaultValue = 
      'ds.Tables("TABDEMO").Columns("ec_datcons").DefaultValue = 

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Sub DemoNuovo()
    Try
      '----------------------------------------
      'inserisco una nuova riga (da non usarsi con tabella collegata alla griglia)
      dsDemoShared.Tables("DEMO").Rows.Add(dsDemoShared.Tables("DEMO").NewRow)
      bDemoHasChanges = True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Function DemoRipristina(ByVal nRow As Integer, ByVal strFilter As String) As Boolean
    'non gestire l'eccezione in ripristino di una griglia: darebbe errore per un problema del framework
    Try
      dsDemoShared.Tables("DEMO").Select(strFilter)(nRow).RejectChanges()
      bDemoHasChanges = False
      Return True
    Catch ex As Exception
    End Try
  End Function

  Public Overridable Function DemoSalva(ByVal bDelete As Boolean) As Boolean
    Try
      '----------------------------------------
      'controlli pre-salvataggio (solo se non è una delete)
      If Not bDelete Then
        If Not DemoTestPreSalva() Then Return False
      End If

      '----------------------------------------
      'chiamo il dal per salvare
      dsDemoShared.Tables("DEMO").AcceptChanges()

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public ReadOnly Property DemoRecordIsChanged() As Boolean
    Get
      Return bDemoHasChanges
    End Get
  End Property

  Public Overridable Sub DemoBeforeColUpdate(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Dim strErr As String = ""
    Try
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strDemoPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If
      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "DemoBeforeColUpdate_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Sub DemoAfterColUpdate(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      If strDemoPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";") > -1 Then
        strDemoPrevCelValue = strDemoPrevCelValue.Remove(strDemoPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bDemoHasChanges = True

      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "DemoAfterColUpdate_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Function DemoAfterColUpdate_ec_colli(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs) As Boolean
    Dim dQuant As Decimal = 0
    Dim strErrore As String = ""

    Try
      If e.Row!ec_codart.ToString = "D" Or e.Row!ec_codart.ToString = "M" Then
        e.Row!ec_quant = e.Row!ec_colli
      Else
        If CType(oCleComm, CLELBMENU).ConvQuantUMP(strDittaCorrente, e.Row!ec_codart.ToString, e.Row!ec_unmis.ToString, _
                        NTSCDec(e.Row!ec_colli), _
                        NTSCDec(e.Row!ec_misura1), NTSCDec(e.Row!ec_misura2), _
                        NTSCDec(e.Row!ec_misura3), dQuant, False, strErrore, oApp.NDecQta) Then
          e.Row!ec_quant = dQuant
        Else
          e.Row!ec_quant = 0
        End If
        If strErrore <> "" Then ThrowRemoteEvent(New NTSEventArgs("", strErrore))
      End If
      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public Overridable Function DemoTestPreSalva() As Boolean
    Dim dtrTmp() As DataRow
    Dim i As Integer = 0
    Try
      dtrTmp = dsDemoShared.Tables("DEMO").Select(Nothing, Nothing, DataViewRowState.Added Or DataViewRowState.ModifiedCurrent)
      For i = 0 To dtrTmp.Length - 1

      Next

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
      Return False
    End Try
  End Function

#End Region

#Region "FORM BNVECAST"
  Public dsCastShared As DataSet
  Public strCastPrevCelValue As String = ""


  Public Overridable Function CastApri(ByRef dsCast As DataSet) As Boolean
    Dim dReturn As Boolean = False
    Try
      dsCastShared = dsCast

      '--------------------------------------
      'creo gli eventi per la gestione del datatable dentro l'entity
      AddHandler dsCastShared.Tables("IVA").ColumnChanging, AddressOf CastBeforeColUpdateIVA
      AddHandler dsCastShared.Tables("IVA").ColumnChanged, AddressOf CastAfterColUpdateIVA

      AddHandler dsCastShared.Tables("CONTROP").ColumnChanging, AddressOf CastBeforeColUpdateCONTROP
      AddHandler dsCastShared.Tables("CONTROP").ColumnChanged, AddressOf CastAfterColUpdateCONTROP

      '--------------------------------------
      'confermo tutto
      dsCastShared.AcceptChanges()

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public Overridable Function CastControllaCastelletti() As Boolean
    Dim dTotImpIVA As Decimal = 0
    Dim dTotImpCont As Decimal = 0
    Dim dTotImpIVAval As Decimal = 0
    Dim dTotImpContval As Decimal = 0
    Dim i As Integer = 0

    Try
      dTotImpIVA = 0
      dTotImpIVAval = 0
      For i = 0 To 7
        If NTSCInt(dsCastShared.Tables("IVA").Rows(i)!xx_codiva) <> 0 Then
          dTotImpIVA = dTotImpIVA + NTSCDec(dsCastShared.Tables("IVA").Rows(i)!xx_imponib)
          dTotImpIVAval = dTotImpIVAval + NTSCDec(dsCastShared.Tables("IVA").Rows(i)!xx_imponibv)
        Else
          Exit For
        End If
      Next

      dTotImpCont = 0
      dTotImpContval = 0
      For i = 0 To 19
        If NTSCInt(dsCastShared.Tables("CONTROP").Rows(i)!xx_ccontr) <> 0 Then
          dTotImpCont = dTotImpCont + NTSCDec(dsCastShared.Tables("CONTROP").Rows(i)!xx_impcont)
          dTotImpContval = dTotImpContval + NTSCDec(dsCastShared.Tables("CONTROP").Rows(i)!xx_impcontv)
        Else
          Exit For
        End If
      Next

      Return ControllaCastelletti(dTotImpIVA, dTotImpCont, dTotImpIVAval, dTotImpContval)

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function


  Public Overridable Function CastRipristinaIva(ByVal nRow As Integer, ByVal strFilter As String) As Boolean
    'non gestire l'eccezione in ripristino di una griglia: darebbe errore per un problema del framework
    Try
      dsCastShared.Tables("IVA").Select(strFilter)(nRow).RejectChanges()
      Return True
    Catch ex As Exception
    End Try
  End Function
  Public Overridable Function CastSalvaIva(ByVal bDelete As Boolean) As Boolean
    Dim dtrTmp() As DataRow
    Dim i As Integer = 0
    Dim bTrov As Boolean = True
    Try
      '----------------------------------------
      'controlli pre-salvataggio (solo se non è una delete)
      dtrTmp = dsCastShared.Tables("IVA").Select(Nothing, Nothing, DataViewRowState.Added Or DataViewRowState.ModifiedCurrent)
      For i = 0 To dtrTmp.Length - 1
        If NTSCInt(dtrTmp(i)!xx_codiva) <> 0 Then
          If Not oCldBoll.ValCodiceDb(NTSCInt(dtrTmp(i)!xx_codiva).ToString, strDittaCorrente, "TABCIVA", "N") Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666480656406250, "Codice IVA |" & NTSCInt(dtrTmp(i)!xx_codiva).ToString & "| inesistente")))
            Return False
          End If
        End If
      Next

      'Controllo consecutivita'
      bTrov = True
      dtrTmp = dsCastShared.Tables("IVA").Select("", "xx_idiva")
      For i = 0 To 7
        With dtrTmp(i)
          If NTSCInt(!xx_codiva) = 0 Then
            bTrov = False
            If NTSCDec(!xx_imponib) <> 0 Or NTSCDec(!xx_imponibv) <> 0 Or NTSCDec(!xx_imposta) <> 0 Or NTSCDec(!xx_impostav) <> 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666483517968750, "Imponibili ed imposte devono essere uguali a 0 se non è impostato il codice IVA")))
              Return False
            End If
          Else
            If bTrov = False Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666482261875000, "Manca consecutività nel castelletto IVA.")))
              Return False
            End If
          End If
        End With
      Next

      '----------------------------------------
      'chiamo il dal per salvare
      dsCastShared.Tables("IVA").AcceptChanges()

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Sub CastBeforeColUpdateIVA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Dim strErr As String = ""
    Try
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strCastPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If
      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "CastBeforeColUpdateIVA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub CastAfterColUpdateIVA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      If strCastPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";") > -1 Then
        strCastPrevCelValue = strCastPrevCelValue.Remove(strCastPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bDemoHasChanges = True

      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "CastAfterColUpdateIVA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub CastAfterColUpdateIVA_xx_imponib(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      'propongo l'iva
      If NTSCDec(e.ProposedValue) <> 0 And NTSCInt(e.Row!xx_codiva) <> 0 Then
        e.Row!xx_imposta = oCldBoll.CalcolaIva(NTSCDec(e.ProposedValue), NTSCInt(e.Row!xx_codiva), oCldBoll.TrovaNdec(0))
      End If

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Function CastRipristinaControp(ByVal nRow As Integer, ByVal strFilter As String) As Boolean
    'non gestire l'eccezione in ripristino di una griglia: darebbe errore per un problema del framework
    Try
      dsCastShared.Tables("CONTROP").Select(strFilter)(nRow).RejectChanges()
      Return True
    Catch ex As Exception
    End Try
  End Function
  Public Overridable Function CastSalvaControp(ByVal bDelete As Boolean) As Boolean
    Dim dtrTmp() As DataRow
    Dim i As Integer = 0
    Dim bTrov As Boolean = True
    Try
      '----------------------------------------
      'controlli pre-salvataggio (solo se non è una delete)
      dtrTmp = dsCastShared.Tables("CONTROP").Select(Nothing, Nothing, DataViewRowState.Added Or DataViewRowState.ModifiedCurrent)
      For i = 0 To dtrTmp.Length - 1
        If NTSCInt(dtrTmp(i)!xx_ccontr) <> 0 Then
          If Not oCldBoll.ValCodiceDb(NTSCInt(dtrTmp(i)!xx_ccontr).ToString, strDittaCorrente, "TABCOVE", "N") Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666486932343750, "Codice Contropartita |" & NTSCInt(dtrTmp(i)!xx_ccontr).ToString & "| inesistente")))
            Return False
          End If
        End If
      Next

      'Controllo consecutivita'
      bTrov = True
      dtrTmp = dsCastShared.Tables("CONTROP").Select("", "xx_id")
      For i = 0 To 19
        With dtrTmp(i)
          If NTSCInt(!xx_ccontr) = 0 Then
            bTrov = False
            If NTSCDec(!xx_impcont) <> 0 Or NTSCDec(!xx_impcontv) <> 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666487221875000, "Gli importi devono essere uguali a 0 se non è impostato il codice CONTROPARTITA")))
              Return False
            End If
          Else
            If bTrov = False Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128666487231718750, "Manca consecutività nel castelletto CONTROPARTITE.")))
              Return False
            End If
          End If
        End With
      Next

      '----------------------------------------
      'chiamo il dal per salvare
      dsCastShared.Tables("CONTROP").AcceptChanges()

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function
  Public Overridable Sub CastBeforeColUpdateCONTROP(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Dim strErr As String = ""
    Try
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strCastPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If
      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "CastBeforeColUpdateCONTROP_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub CastAfterColUpdateCONTROP(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      If strCastPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";") > -1 Then
        strCastPrevCelValue = strCastPrevCelValue.Remove(strCastPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper & ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bDemoHasChanges = True

      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "CastAfterColUpdateCONTROP_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

#End Region

  Public Overridable Sub BeforeColUpdate_MOVMATR(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return
    Dim strErr As String = ""
    Try
      'memorizzo il valore corrente di cella per testarlo nella AfterColUpdate
      'solo se il dato è uguale a quello precedentemente contenuto nella cella
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If

      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "BeforeColUpdate_MOVMATR_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub AfterColUpdate_MOVMATR(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return

    Try
      'non valido la colonna se il dato non è cambiato
      If strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";") > -1 Then
        strPrevCelValue = strPrevCelValue.Remove(strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bHasChangesET = True
      'comunico che una cella è cambiata, per fare in modo che se il dato è contenuto in una griglia 
      'vengano fatte le routine di validazione del caso
      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "AfterColUpdate_MOVMATR_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Sub BeforeColUpdate_MOVCLA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return
    Dim strErr As String = ""
    Try
      'memorizzo il valore corrente di cella per testarlo nella AfterColUpdate
      'solo se il dato è uguale a quello precedentemente contenuto nella cella
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If

      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "BeforeColUpdate_MOVCLA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub AfterColUpdate_MOVCLA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return

    Try
      'non valido la colonna se il dato non è cambiato
      If strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";") > -1 Then
        strPrevCelValue = strPrevCelValue.Remove(strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bHasChangesET = True
      'comunico che una cella è cambiata, per fare in modo che se il dato è contenuto in una griglia 
      'vengano fatte le routine di validazione del caso
      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "AfterColUpdate_MOVCLA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

  Public Overridable Sub BeforeColUpdate_MOVCONA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return
    Dim strErr As String = ""
    Try
      'memorizzo il valore corrente di cella per testarlo nella AfterColUpdate
      'solo se il dato è uguale a quello precedentemente contenuto nella cella
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If

      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "BeforeColUpdate_MOVCONA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub AfterColUpdate_MOVCONA(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    If bInUnload Then Return
    If bNonValidare Then Return

    Try
      'non valido la colonna se il dato non è cambiato
      If strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";") > -1 Then
        strPrevCelValue = strPrevCelValue.Remove(strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      bHasChangesET = True
      'comunico che una cella è cambiata, per fare in modo che se il dato è contenuto in una griglia 
      'vengano fatte le routine di validazione del caso
      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "AfterColUpdate_MOVCONA_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub

#Region "Picking/Ricevimento"
  Public Overridable Function ControlloStatoPicking(ByVal lIdPick As Integer) As Boolean
    Dim dttTmp As New DataTable
    Try
      If bInCreaDocDaGnor Then Return False

      ' Controlla se ci sono più note di prelievo collegate al picking
      If Not oCldBoll.PickingConPiuNote(strDittaCorrente, lIdPick, dttTmp) Then Return False

      If dttTmp.Rows.Count <> 0 Then
        If dttTmp.Rows.Count > 1 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128872768308826027, "Attenzione! Il documento selezionato risulta essere collegato ad un picking contenente diverse note di prelievo. Il documento non sarà modificabile/cancellabile.")))
          Return True
        End If
      End If

      ' controlla lo stato del picking
      If Not oCldBoll.StatoPickingRicevimento(strDittaCorrente, lIdPick, dttTmp) Then Return False

      If dttTmp.Rows.Count <> 0 Then
        If NTSCStr(dttTmp.Rows(0)!tb_chiuso) <> "G" And NTSCStr(dttTmp.Rows(0)!tb_chiuso) <> "S" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128872770874936200, "Attenzione! Per il documento selezionato è stato generato un picking e risulta essere stato preso in carico da un terminale. Non sarà possibile salvare o cancellare il documento.")))
          Return True
        End If
      End If

      Return False ' è corretto il return false, se ritorna true non permette di salvare
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function ControlloStatoRicevimento(ByVal lIdPick As Integer) As Boolean
    Dim dttTmp As New DataTable
    Dim evnt As NTSEventArgs
    Try
      If bInCreaDocDaGnor Then Return False
      If lIdPick = 0 Then Return False

      ' controlla lo stato del ricevimento
      If Not oCldBoll.StatoPickingRicevimento(strDittaCorrente, lIdPick, dttTmp) Then Return False

      If dttTmp.Rows.Count <> 0 Then
        If NTSCStr(dttTmp.Rows(0)!tb_chiuso) <> "S" And NTSCStr(dttTmp.Rows(0)!tb_chiuso) <> "E" Then
          If NTSCStr(dttET.Rows(0)!et_tipork) = "W" Then
            If Not oCldBoll.CheckNotaPrelVistatoDB(strDittaCorrente, NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc), dttTmp) Then Return False
            If NTSCStr(dttTmp.Rows(0)!tb_chiuso) = "G" Then
              evnt = New NTSEventArgs(ThMsg.MSG_NOYES, oApp.Tr(Me, 129967740123593750, "Attenzione! Per questa nota di prelievo è già stato generato un picking." & vbCrLf & "Per poter continuare con il salvataggio è prima necessario cancellare il vecchio picking." & vbCrLf & "Procedere con la cancellazione del picking?"))
              ThrowRemoteEvent(evnt)
              If evnt.RetValue = ThMsg.RETVALUE_YES Then
                oCldBoll.CancellaTabellePickingRicevimento(strDittaCorrente, lIdPick)
                dttET.Rows(0)!et_vistato = "N"
                dttET.Rows(0)!et_idpick = 0
                Return False
              Else
                Return True
              End If
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129967740148437500, "Attenzione! Per il documento selezionato è iniziato il ricevimento da un terminale. Non sarà possibile salvare o cancellare il documento.")))
              Return True
            End If
          Else
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 128872814243964488, "Attenzione! Per il documento selezionato è iniziato il ricevimento da un terminale. Non sarà possibile salvare o cancellare il documento.")))
            Return True
          End If
        End If
      ElseIf NTSCStr(dttET.Rows(0)!et_tipork) <> "W" Then
        'Controlla se sono già state stampate delle etichette
        If Not oCldBoll.RicevimentoEtichetteGenerate(strDittaCorrente, dttET, dttTmp) Then Return False

        If dttTmp.Rows.Count <> 0 Then
          If NTSCStr(dttET.Rows(0)!et_vistato) <> "E" Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129397263445156250, "Attenzione! La modifica del documento non è possibile in quanto risultano già stampate le etichette per il ricevimento merci." & vbCrLf & _
                                                                                  "Procedere con la cancellazione delle etichette per poter modificare il documento.")))
            Return True
          Else
            evnt = New NTSEventArgs(ThMsg.MSG_NOYES, oApp.Tr(Me, 129428351807352212, "Attenzione! Sono state stampate delle etichette delle unità di carico, ma non risulta che siano state prese in carico. " & vbCrLf & _
                                                                                     "Per continuare con il salvataggio è necessario cancellare prima le etichette." & vbCrLf & _
                                                                                     "Procedere con la cancellazione delle etichette e completare il salvataggio?"))
            ThrowRemoteEvent(evnt)

            If evnt.RetValue = ThMsg.RETVALUE_YES Then
              'Cancello le etichette e continuo con il salvataggio.
              If Not oCldBoll.CancellaEtichetteUdC(dttET) Then Return False
              dttET.Rows(0)!et_vistato = "N"
              dttET.Rows(0)!et_idpick = 0
            Else
              Return True
            End If
          End If
        End If
      End If

      Return False ' è corretto il return false, se ritorna true non permette di salvare
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
#End Region

  Protected Overrides Sub Finalize()
    MyBase.Finalize()
  End Sub

  Public Overridable Function TCOOrdiniCollegati(ByVal dtrRow As DataRow, ByRef dttOut As DataTable) As Boolean
    Try
      Return oCldBoll.TCOOrdiniCollegati(dtrRow, dttOut)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function GetOrdiniPerAutoevasione(ByVal strCodart As String, ByVal nFase As Integer, _
                                                       ByVal lConto As Integer, ByVal nValuta As Integer, ByVal strScorpo As String, _
                                                       ByRef dttOut As DataTable) As Boolean
    Try
      Return oCldBoll.GetOrdiniPerAutoevasione(strDittaCorrente, strCodart, nFase, lConto, nValuta, strScorpo, dttOut)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

#Region "Conto Visione"
  Public Overridable Function CreaSaldiCtoVisione(ByRef dsSaldi As DataSet) As Boolean
    'ottiene i saldi di c/to visione sul magazzino indicato per il cliente / destinazione diversa, 
    'escludendo i movimenti contenuti nel documento corrente
    'tb_tipcaum = 'V' = CARICO, tb_tipcaum = 'U' = SCARICO
    'no articoli 'D' e 'M'

    'al momento non è possibile passare l'articolo come filtro per limitare l'elaborazione, 
    'ma il DAL è già stato predisposto
    Dim nMagaz As Integer = 0
    Dim dttTmp As New DataTable
    Dim dtrT1() As DataRow = Nothing
    Dim dtrTco() As DataRow = Nothing
    Dim i As Integer = 0
    Try
      With dttET.Rows(0)

        If dttET.Rows(0)!et_tipork.ToString = "T" Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129605732295898437, "Funzione non utilizzabile nei Carichi da produzione")))
          Return False
        End If

        'cerco il magazzino associato alla causale di scarico c/to visione
        oCldBoll.ValCodiceDb(NTSCInt(dttET.Rows(0)!et_causale).ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
        If dttTmp.Rows(0)!tb_tipcaum.ToString = "U" Then
          nMagaz = NTSCInt(dttET.Rows(0)!et_magaz)
          If nMagaz = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129605718270263672, "ATTENZIONE: Indicare prima in testata documento il magazzino 1 da cui scaricare il c/to visione. Operazione annullata")))
            Return False
          End If
        End If

        If nMagaz = 0 And NTSCInt(dttTabucamTesta.Rows(0)!tb_causec) <> 0 Then
          oCldBoll.ValCodiceDb(NTSCInt(dttTabucamTesta.Rows(0)!tb_causec).ToString, strDittaCorrente, "TABCAUM", "N", "", dttTmp)
          If dttTmp.Rows(0)!tb_tipcaum.ToString = "U" Then
            nMagaz = NTSCInt(dttET.Rows(0)!et_magaz2)
            If nMagaz = 0 Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129605718864892578, "ATTENZIONE: Indicare prima in testata documento il magazzino 2 da cui scaricare il c/to visione. Operazione annullata")))
              Return False
            End If
          End If
        End If

        If nMagaz = 0 Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129605717632509766, "ATTENZIONE: nessuna delle causali di magazzino di testata scaricano il c/to visione. Operazione annullata")))
          Return False
        End If

        If Not oCldBoll.CreaSaldiCtoVisione(strDittaCorrente, !et_tipork.ToString, NTSCInt(!et_anno), _
                                            !et_serie.ToString, NTSCInt(!et_numdoc), nMagaz, _
                                            NTSCInt(!et_conto), NTSCInt(!et_coddest), "", 0, dsSaldi) Then Return False
      End With

      'ora devo togliere quanto già contenuto nel documento corrente
      If dsSaldi.Tables("SALDI").Rows.Count > 0 Then
        For Each dtrT As DataRow In dttEC.Rows
          If NTSCInt(dtrT!ec_cvnum) <> 0 And (nMagaz = NTSCInt(dtrT!ec_magaz) Or nMagaz = NTSCInt(dtrT!ec_magaz2)) Then
            dtrT1 = dsSaldi.Tables("SALDI").Select("mm_codart = " & CStrSQL(NTSCStr(dtrT!ec_codart)) & _
                                                  " AND mm_fase = " & NTSCInt(dtrT!ec_fase) & _
                                                  " AND mm_cvtipo = " & CStrSQL(dtrT!ec_cvtipo) & _
                                                  " AND mm_cvanno = " & NTSCInt(dtrT!ec_cvanno) & _
                                                  " AND mm_cvserie = " & CStrSQL(dtrT!ec_cvserie) & _
                                                  " AND mm_cvnum = " & NTSCInt(dtrT!ec_cvnum) & _
                                                  " AND mm_cvriga = " & NTSCInt(dtrT!ec_cvriga))
            If dtrT1.Length > 0 Then
              dtrT1(0)!mm_qtares = NTSCDec(dtrT1(0)!mm_qtares) - NTSCDec(dtrT!ec_quant)

              'per TCO
              If bModTCO Then
                dtrTco = dttECTC.Select("ec_tipork = " & CStrSQL(dtrT!ec_tipork) & _
                                        " AND ec_anno = " & NTSCInt(dtrT!ec_anno) & _
                                        " AND ec_serie = " & CStrSQL(dtrT!ec_serie) & _
                                        " AND ec_numdoc = " & NTSCInt(dtrT!ec_numdoc) & _
                                        " AND ec_riga = " & NTSCInt(dtrT!ec_riga))
                If dtrTco.Length > 0 Then
                  For i = 1 To 24
                    dtrT1(0)("mm_qtares_" & i.ToString("00")) = NTSCDec(dtrT1(0)("mm_qtares_" & i.ToString("00"))) - NTSCDec(dtrTco(0)("ec_quant" & i.ToString("00")))
                  Next
                End If

              End If    'If bModTCO Then

              If NTSCDec(dtrT1(0)!mm_qtares) = 0 Then dtrT1(0).Delete()

            End If
          End If
        Next    'For Each dtrT As DataRow In dttEC.Rows
      End If    'If dttSaldi.Rows.Count > 0 Then

      dsSaldi.AcceptChanges()

      AddHandler dsSaldi.Tables("SALDI").ColumnChanging, AddressOf BeforeColUpdate_SALDICV
      AddHandler dsSaldi.Tables("SALDI").ColumnChanged, AddressOf AfterColUpdate_SALDICV

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function InserisciDaCtoVisione(ByRef dttSaldi As DataTable) As Boolean
    'dato il datatable con le righe di c/to visione da inserire, eseguo l'import.
    'NON E' POSSIBILE GESTIRE, IN QUESTA MODALITA', L'evasione di ordini o note di prelievo
    'non ha neanche senso: la merce è già dal cliente ...
    Dim strErrore As String = ""
    Dim dQuant As Decimal = 0
    Dim i As Integer = 0
    Dim dttTmp As New DataTable
    Try

      RemoveHandler dttSaldi.ColumnChanging, AddressOf BeforeColUpdate_SALDICV
      RemoveHandler dttSaldi.ColumnChanged, AddressOf AfterColUpdate_SALDICV

      For Each dtrT As DataRow In dttSaldi.Select("mm_quadaeva <> 0", "mm_codart, mm_fase")
        bInInsertArticoDaZoom = True    'per togliere i messaggi al salvataggio della riga se qualche dato manca (i test verranno fatti al salvataggio del documento)
        dttEC.Rows.Add(dttEC.NewRow)

        With dttEC.Rows(dttEC.Rows.Count - 1)
          'forzo la MovordOnAddNewRow
          !codditt = "."
          !codditt = strDittaCorrente
          !ec_codart = dtrT!mm_codart
          !ec_descr = dtrT!mm_descr
          !ec_desint = dtrT!mm_desint
          !ec_note = dtrT!mm_note
          !ec_fase = dtrT!mm_fase
          !ec_quant = NTSCDec(dtrT!mm_quadaeva)
          'ricalcolo i colli all'indietro
          If CType(oCleComm, CLELBMENU).ConvQuantUM(strDittaCorrente, !ec_codart.ToString, !ec_ump.ToString, _
          NTSCDec(!ec_quant), NTSCDec(!ec_misura1), NTSCDec(!ec_misura2), _
          NTSCDec(!ec_misura3), !ec_unmis.ToString, dQuant, strErrore, oApp.NDecQta) Then
            bInValidazQuant = True      'altrimenti al cambio dei colli viene ricalcolata la quantità
            !ec_colli = dQuant
            bInValidazQuant = False
          End If
          !xxo_lottox = dtrT!mm_lotto
          !ec_commeca = dtrT!mm_commeca
          !ec_subcommeca = dtrT!mm_subcommeca
          !ec_cvtipo = dtrT!mm_cvtipo
          !ec_cvanno = dtrT!mm_cvanno
          !ec_cvserie = dtrT!mm_cvserie
          !ec_cvnum = dtrT!mm_cvnum
          !ec_cvriga = dtrT!mm_cvriga

          If bUsaPrezziScontiCtoVisione Then
            'se richiesto imposto prezzi e sconti uguali a quelli dle documento che ha aperto il c/to visione
            If Not oCldBoll.GetMovmagRiga(strDittaCorrente, dtrT!mm_cvtipo.ToString, NTSCInt(dtrT!mm_cvanno), _
                                          dtrT!mm_cvserie.ToString, NTSCInt(dtrT!mm_cvnum), NTSCInt(dtrT!mm_cvriga), _
                                          dttTmp) Then Return False
            If dttTmp.Rows.Count > 0 Then
              !ec_prelist = dttTmp.Rows(0)!mm_prelist
              !ec_prezvalc = dttTmp.Rows(0)!mm_prezvalc
              If NTSCStr(dttET.Rows(0)!et_scorpo) = "S" Then
                !ec_preziva = dttTmp.Rows(0)!mm_preziva
              Else
                !ec_prezzo = dttTmp.Rows(0)!mm_prezzo
              End If
              !ec_scont1 = dttTmp.Rows(0)!mm_scont1
              !ec_scont2 = dttTmp.Rows(0)!mm_scont2
              !ec_scont3 = dttTmp.Rows(0)!mm_scont3
              !ec_scont4 = dttTmp.Rows(0)!mm_scont4
              !ec_scont5 = dttTmp.Rows(0)!mm_scont5
              !ec_scont6 = dttTmp.Rows(0)!mm_scont6
            End If
          End If    'If bUsaPrezziScontiCtoVisione Then
        End With

        If bModTCO And NTSCInt(dttEC.Rows(dttEC.Rows.Count - 1)!xxo_codtagl) <> 0 Then
          'dettaglio taglie: correggo le quantità da scaricare
          For i = 1 To 24
            dttECTC.Rows(dttECTC.Rows.Count - 1)("ec_quant" & i.ToString("00")) = NTSCDec(dtrT("mm_quadaeva_" & i.ToString("00")))
          Next
        End If

        If Not RecordSalva(dttEC.Rows.Count - 1, False, Nothing) Then
          If bModTCO And NTSCInt(dttEC.Rows(dttEC.Rows.Count - 1)!xxo_codtagl) <> 0 Then
            dttECTC.Rows(dttEC.Rows.Count - 1).Delete()
          End If
          dttEC.Rows(dttEC.Rows.Count - 1).Delete()
          Return False
        End If
      Next    'For Each dtrT As DataRow In dttSaldi.Select("mm_quadaeva <> 0")

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
      bInInsertArticoDaZoom = False
    End Try
  End Function

  Public Overridable Sub BeforeColUpdate_SALDICV(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Dim strErr As String = ""
    Try
      'memorizzo il valore corrente di cella per testarlo nella AfterColUpdate
      'solo se il dato è uguale a quello precedentemente contenuto nella cella
      If ValoriUguali(e.ProposedValue.ToString, e.Row(e.Column.ColumnName).ToString) Then
        strPrevCelValue = e.Column.ColumnName.ToUpper & ";"
        Return
      End If

      '-------------------------------------------------------------
      'controllo che in una cella short non venga inserito un numero troppo grande
      If Not CheckCellaShort(e, strErr) Then Throw New NTSException(strErr)
      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "BeforeColUpdate_SALDICV_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub BeforeColUpdate_SALDICV_mm_quadaeva(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      If NTSCDec(e.ProposedValue) = 0 Then
        e.Row!xx_selez = "N"
      Else
        e.Row!xx_selez = "S"
      End If

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Sub
  Public Overridable Sub AfterColUpdate_SALDICV(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Try
      'non valido la colonna se il dato non è cambiato
      If strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";") > -1 Then
        strPrevCelValue = strPrevCelValue.Remove(strPrevCelValue.IndexOf(e.Column.ColumnName.ToUpper + ";"), e.Column.ColumnName.ToUpper.Length + 1)
        Return
      End If

      'comunico che una cella è cambiata, per fare in modo che se il dato è contenuto in una griglia 
      'vengano fatte le routine di validazione del caso
      ThrowRemoteEvent(New NTSEventArgs("GRIAGG", e.Column.Table.TableName & "§" & e.Column.ColumnName))
      e.Row.EndEdit()
      e.Row.EndEdit()

      '-------------------------------------------------------------
      'cerco e, se la trovo, eseguo la funzione specifica per la colonna modificata
      Dim strFunction As String = "AfterColUpdate_SALDICV_" & e.Column.ColumnName.ToLower
      Dim fun As System.Reflection.MethodInfo = Me.GetType.GetMethod(strFunction)  'occhio: è case_sensitive!!!!
      If Not fun Is Nothing Then fun.Invoke(Me, New Object() {sender, e})

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Sub
  Public Overridable Sub AfterColUpdate_SALDICV_xx_selez(ByVal sender As Object, ByVal e As DataColumnChangeEventArgs)
    Dim i As Integer = 0
    Try
      If NTSCStr(e.ProposedValue) = "S" Then
        e.Row!mm_quadaeva = NTSCDec(e.Row!mm_qtares)
        For i = 1 To 24
          e.Row("mm_quadaeva_" & i.ToString("00")) = NTSCDec(e.Row("mm_qtares_" & i.ToString("00")))
        Next
      Else
        e.Row!mm_quadaeva = 0
        For i = 1 To 24
          e.Row("mm_quadaeva_" & i.ToString("00")) = 0
        Next
      End If

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Sub
#End Region

  Public Overridable Function EsisteCollaudo(ByVal lRiga As Integer) As Boolean
    Try
      '-------------------------------------------------------------------------------------------------------------
      Return oCldBoll.EsisteCollaudo(strDittaCorrente, NTSCStr(dttET.Rows(0)!et_tipork), _
        NTSCInt(dttET.Rows(0)!et_anno), NTSCStr(dttET.Rows(0)!et_serie), NTSCInt(dttET.Rows(0)!et_numdoc), lRiga)
      '-------------------------------------------------------------------------------------------------------------
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      Return False
    End Try
  End Function

  Public Overridable Function TestaBlocchi(ByVal bNew As Boolean) As Boolean
    Dim i As Integer = 0
    Dim strMsg As String = ""
    Dim strTmp As String = ""
    Dim strPwd As String = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "PwdDocContab", "nts", " ", "nts").ToUpper
    Dim strPwdFatt As String = oCldBoll.GetSettingBusDitt(strDittaCorrente, "Bsveboll", "Opzioni", ".", "PwdDocFatt", "nts", " ", "nts").ToUpper
    Dim strT() As String = Nothing
    Dim evnt As NTSEventArgs = Nothing
    Dim dttTmp As New DataTable

    'stampe definitive su registri fiscali
    Dim nEscomp As Integer = 0
    Dim strTipoChiusure As String = "S"
    Dim bOk As Boolean = True

    Try
      '--------------------------------------------------------------------------------------------------------------
      bNuovoDocDaPrec = True
      bRipristinaDocumento = False
      '--------------------------------------------------------------------------------------------------------------
      If bNew = True Then Return True
      '--------------------------------------------------------------------------------------------------------------
      If dttET.Rows.Count = 0 Then Return True

      If bCallFromFdin Then
        'altrimenti in apertira documento avviserebbe che è già stato fatturato, ma lo sto chiamando da una fattura !!!!
        bCallFromFdin = False
        Return True
      End If
      '--------------------------------------------------------------------------------------------------------------
      With dttET.Rows(0)
        '------------------------------------------------------------------------------------------------------------
        '--- Avverte che il documento è contabilizzato
        '--- riporto anche gli estremi del pagamento, altrimenti in caso di contabilizzazione di solo incasso, 
        '--- il messaggio è fuorviante
        '------------------------------------------------------------------------------------------------------------
        If !et_flcont.ToString <> "N" Then

          '----------------------------
          'controllo se già stampato su CG o RI
          If BORDINI = False Then
            oCldDocu.EscompFromDate(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef), nEscomp, Nothing)
            If nEscomp <> 0 Then
              oCldDocu.ValCodiceDb(strDittaCorrente, strDittaCorrente, "ANADITAC", "S", "", dttTmp)
              strTipoChiusure = dttTmp.Rows(0)!ac_flgiobol.ToString
              dttTmp.Clear()
              'test su libro giornale
              oCldDocu.ValCodiceDb(strDittaCorrente, strDittaCorrente, "TABANAZ", "S", "", dttTmp)
              With dttTmp.Rows(0)
                If strTipoChiusure <> "S" And nEscomp <> NTSCInt(dttTmp.Rows(0)!tb_escomp) Then
                  If NTSCDate(dttET.Rows(0)!et_datregef) < NTSCDate(dttTmp.Rows(0)!tb_dtullgp) Or (NTSCDate(dttET.Rows(0)!et_datregef) = NTSCDate(dttTmp.Rows(0)!tb_dtullgp) And NTSCInt(dttET.Rows(0)!et_numregef) <= NTSCInt(dttTmp.Rows(0)!tb_rgullgp)) Then
                    bOk = False
                  End If
                Else
                  If NTSCDate(dttET.Rows(0)!et_datregef) < NTSCDate(dttTmp.Rows(0)!tb_dtullg) Or (NTSCDate(dttET.Rows(0)!et_datregef) = NTSCDate(dttTmp.Rows(0)!tb_dtullg) And NTSCInt(dttET.Rows(0)!et_numregef) <= NTSCInt(dttTmp.Rows(0)!tb_rgullg)) Then
                    bOk = False
                  End If
                End If
              End With
              dttTmp.Clear()
            End If
            If bOk Then
              'test su reg. iva
              If Not oCldBoll.GetTabduri(strDittaCorrente, NTSCDate(dttET.Rows(0)!et_datregef).ToShortDateString, _
                                         NTSCInt(dttET.Rows(0)!et_numregef), dttTmp) Then Return False
              'ritorna dei record se la registraz. iva è stata stampata sui registri IVA
              If dttTmp.Rows.Count > 0 Then
                bOk = False
              End If
            End If
            dttTmp.Clear()

            If bOk = False Then
              If bProteggiDocContab = False Then
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130415926494411213, "Il documento è collegato ad una registrazione di contabilità già stampata su Libro Giornale e/o registri IVA. Il documento non potrà essere salvato o cancellato.")))
                bDocNonModificabile = True
                Return True
              Else
Riprova1:
                strMsg = oApp.Tr(Me, 130485975647490754, "Attenzione!" & vbCrLf & _
                  "Il documento è collegato ad una registrazione di contabilità già stampata su Libro Giornale e/o registri IVA")
                strMsg &= oApp.Tr(Me, 130485984148454380, vbCrLf & "Inserire la Password per sbloccare l'apertura:")
                evnt = New NTSEventArgs(CLN__STD.ThMsg.INPUTPWD, strMsg)
                ThrowRemoteEvent(evnt)
                If evnt.RetValue.Trim <> "" Then
                  'Controlla PWD
                  If evnt.RetValue.ToUpper <> strPwd Then GoTo Riprova1
                Else
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130485984222779850, "Non è stata digitata (o non è valida) la password per lo sblocco documenti. Il documento non potrà essere salvato o cancellato.")))
                  bDocNonModificabile = True
                  Return True
                End If
              End If
            End If    'If bOk = False Then
          End If    'If BORDINI = False Then

          '----------------------------
          If bOk Then 'se registrazione so su lg o ri ...
            If bProteggiDocContab = False Then
              strMsg = oApp.Tr(Me, 129738611422509473, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già contabilizzato con la registrazione n° |" & !et_numregef.ToString & "| del |" & NTSCDate(!et_datregef).ToShortDateString & "|")
              If NTSCInt(!et_numrgin) > 0 Then
                strMsg &= oApp.Tr(Me, 129738611448887439, vbCrLf & "e relativo incasso/pagamento" & vbCrLf & "con la registrazione n° |" & !et_numrgin.ToString & "| del |" & NTSCDate(!et_datregin).ToShortDateString & "|")
              End If
              ThrowRemoteEvent(New NTSEventArgs("", strMsg))
            Else
Riprova:
              strMsg = oApp.Tr(Me, 129738611478683505, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già contabilizzato con la registrazione n° |" & !et_numregef.ToString & "| del |" & NTSCDate(!et_datregef).ToShortDateString & "|")
              If NTSCInt(!et_numrgin) > 0 Then
                strMsg &= oApp.Tr(Me, 129738611509085063, vbCrLf & "e relativo incasso/pagamento" & vbCrLf & "con la registrazione n° |" & !et_numrgin.ToString & "| del |" & NTSCDate(!et_datregin).ToShortDateString & "|")
              End If
              strMsg &= oApp.Tr(Me, 129738611535033325, vbCrLf & "Inserire la Password per sbloccare l'apertura:")
              evnt = New NTSEventArgs(CLN__STD.ThMsg.INPUTPWD, strMsg)
              ThrowRemoteEvent(evnt)
              If evnt.RetValue.Trim <> "" Then
                'Controlla PWD
                If evnt.RetValue.ToUpper <> strPwd Then GoTo Riprova
              Else
                ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738611578931495, "Non è stata digitata (o non è valida) la password per lo sblocco documenti contabilizzati. Il documento non potrà essere salvato o cancellato.")))
                bDocNonModificabile = True
              End If
            End If
          End If    'If bOk Then
        End If
        '------------------------------------------------------------------------------------------------------------
        '--- Avverte che il documento è già fatturato
        '------------------------------------------------------------------------------------------------------------
        If (!et_flfatt.ToString <> "N") And (NTSCInt(!et_numfat) <> 0) Then
          If NTSCStr(!et_tiporkfat) = "A" Then 'Sono fatture figurative
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130628698730567597, "Attenzione!" & vbCrLf & _
                           "Il documento aperto è collegato alla Fattura Figurativa n° |" & IIf(!et_alffat.ToString.Trim = "", !et_numfat.ToString, !et_numfat.ToString & "/" & !et_alffat.ToString.Trim).ToString & "| del |" & NTSCDate(!et_datfat).ToShortDateString & "|." & vbCrLf & _
                           "Pertanto non sarà possibile apportare modifiche al documento.")))
            bDocNonModificabile = True
          ElseIf bProteggiDocFatt = False Then
            If bFlagRielabFattDiffSuVariazioneDDT = False Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738616781709399, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già collegato alla Fattura differita n° |" & IIf(!et_alffat.ToString.Trim = "", !et_numfat.ToString, !et_numfat.ToString & "/" & !et_alffat.ToString.Trim).ToString & "| del |" & NTSCDate(!et_datfat).ToShortDateString & "|." & vbCrLf & _
                "Ricordarsi di rielaborarla per mantenerla allineata al D.D.T.")))
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130159275161715521, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già collegato alla Fattura differita n° |" & IIf(!et_alffat.ToString.Trim = "", !et_numfat.ToString, !et_numfat.ToString & "/" & !et_alffat.ToString.Trim).ToString & "| del |" & NTSCDate(!et_datfat).ToShortDateString & "|." & vbCrLf & _
                "Se si modifica questo documento è obbligatorio rielaborare la Fattura Differita, prima di procedere alla contabilizzazione/estrazione provvigioni." & vbCrLf & _
                "Se la Fattura Differita è stata contabilizzata rimuovere, prima, il saldo scadenze quindi la registrazione contabile della fattura." & vbCrLf & _
                "Ricordarsi di rielaborarla per mantenerla allineata al D.D.T.")))
            End If
          Else
RiprovaFatt:
            If bFlagRielabFattDiffSuVariazioneDDT = False Then
              strMsg = oApp.Tr(Me, 129738617841308975, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già collegato alla Fattura differita n° |" & IIf(!et_alffat.ToString.Trim = "", !et_numfat.ToString, !et_numfat.ToString & "/" & !et_alffat.ToString.Trim).ToString & "| del |" & NTSCDate(!et_datfat).ToShortDateString & "|." & vbCrLf & _
                "(Ricordarsi di rielaborarla per mantenerla allineata al D.D.T.)")
            Else
              strMsg = oApp.Tr(Me, 130159277346359955, "Attenzione!" & vbCrLf & _
                "Il documento aperto è già collegato alla Fattura differita n° |" & IIf(!et_alffat.ToString.Trim = "", !et_numfat.ToString, !et_numfat.ToString & "/" & !et_alffat.ToString.Trim).ToString & "| del |" & NTSCDate(!et_datfat).ToShortDateString & "|." & vbCrLf & _
                "Se si modifica questo documento è obbligatorio rielaborare la Fattura Differita, prima di procedere alla contabilizzazione/estrazione provvigioni." & vbCrLf & _
                "Se la Fattura Differita è stata contabilizzata rimuovere, prima, il saldo scadenze quindi la registrazione contabile della fattura." & vbCrLf & _
                "(Ricordarsi di rielaborarla per mantenerla allineata al D.D.T.)")
            End If
            ThrowRemoteEvent(New NTSEventArgs("", strMsg))
            evnt = New NTSEventArgs(CLN__STD.ThMsg.INPUTPWD, oApp.Tr(Me, 130187184591659714, _
              "Inserire la Password per sbloccare l'apertura:"))
            ThrowRemoteEvent(evnt)
            If evnt.RetValue.Trim <> "" Then
              If evnt.RetValue.ToUpper <> strPwdFatt Then GoTo RiprovaFatt
            Else
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738619155191871, "Non è stata digitata (o non è valida) la password per lo sblocco documenti fatturati. Il documento non potrà essere salvato o cancellato.")))
              bDocNonModificabile = True
            End If
          End If
        End If
        '------------------------------------------------------------------------------------------------------------
        '--- Verifica se RICEVUTA FISCALE salvabile
        '------------------------------------------------------------------------------------------------------------
        If (!et_tipork.ToString = "F") And (IsRFsalvabile() = False) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738614969452311, "Attenzione!" & vbCrLf & _
            "La Ricevuta fiscale non può essere aggiornata in quanto è stata parzialmente o totalmente riemessa." & vbCrLf & _
            "E' possibile solo ripristinare.")))
          bDocNonModificabile = True
        End If

        If BORDINI = False Then
          If !et_tipork.ToString <> "W" And CBool(ModuliDittaDitt(strDittaCorrente) And bsModIC) And NTSCStr(!et_intra) <> "N" Then
            'avviso se intra estratto 
            If oCldBoll.CheckDatiIntra(strDittaCorrente, !et_tipork.ToString, NTSCInt(!et_anno), !et_serie.ToString, NTSCInt(!et_numdoc)) Then
              ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130415257900235232, "Il documento risulta già essere stato estratto nei movimenti intrastat." & vbCrLf & _
                                                "In caso di modifica/cancellazione sarà necessario riesegure l'estrazione dei dati con l'apposito programma.")))
            End If
          End If    'If !et_tipork.ToString <> "W" And CBool(ModuliDittaDitt(strDittaCorrente) And bsModIC) Then
        End If

        '--------------------------------------------------------------------------------------------------------------
        '--- Se si tratta di una Nota di Prelievo ed è attiva l'opzione di registro che ne consente l'operazione di
        '--- Inserimento/Modifica/Cancellazione, salta il test/blocco/messaggio relativi
        '--------------------------------------------------------------------------------------------------------------
        If (!et_tipork.ToString = "W") And (bConsModifNoteAnteChiusuraMag = True) Then
          'posso proseguire
        Else
          '------------------------------------------------------------------------------------------------------------
          '--- Avverte che si stà aprendo un doc. con data < a data ultimo agg. progressivi
          '------------------------------------------------------------------------------------------------------------
          If NTSCDate(!et_datdoc) <= dtUlap Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738620158949957, "Attenzione!" & vbCrLf & _
              "La data del documento è precedente o uguale alla data ultimo aggiornamento progressivi di magazzino; non è consentito apportare modifiche a questo documento.")))
            bDocNonModificabile = True
          End If
        End If

        'Questi programmi non devono dare messaggio devono essere bloccati dai picking, visto che lavorano su quei file.
        If strProgChiamante <> "BEPKPICK" And strProgChiamante <> "BERMPICK" And strProgChiamante <> "BERMRICM" And strProgChiamante <> "BERMMOVI" Then
          '------------------------------------------------------------------------------------------------------------
          '--- Verifico se per il Picking è già stato emesso il file ed è già stato preso in carico dal terminalino
          '--- se il file non è stato preso in carico posso modificarlo solo se nel file c'è una sola nota di prelievo
          '------------------------------------------------------------------------------------------------------------
          If (!et_tipork.ToString = "W") And (NTSCInt(!et_idpick) <> 0) Then
            If CType(oCleComm, CLELBMENU).GetAscServDir <> "" Then
              strT = System.IO.Directory.GetFiles(CType(oCleComm, CLELBMENU).GetPikDir, "PIK" & NTSCInt(!et_idpick).ToString("000000000") & "*.PIK")
              If strT.Length > 0 Then
                If strT(0).ToUpper = ((CType(oCleComm, CLELBMENU).GetPikDir.TrimEnd("\"c) & "\") & "PIK" & NTSCInt(!et_idpick).ToString("000000000") & ".PIK").ToUpper Then
                  Dim r1 As New System.IO.StreamReader(strT(0))
                  Do While Not r1.EndOfStream
                    strTmp = r1.ReadLine
                    If strTmp.Substring(0, 1) = "1" Then i += 1
                  Loop
                  r1.Close()
                  If i > 1 Then
                    ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738624729038312, "Attenzione!" & vbCrLf & _
                      "Il documento selezionato risulta essere collegato ad un file di picking contenente diverse note di prelievo. Il documento non sarà modificabile/cancellabile.")))
                    bDocNonModificabile = True
                    bNonModificabileperPicking = True
                  End If
                Else
                  ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129738625010992922, "Attenzione!" & vbCrLf & _
                    "Per il documento selezionato è stato generato un picking ed il file risulta essere stato preso in carico da un terminale. Non sarà possibile salvare o cancellare il documento.")))
                  bDocNonModificabile = True
                  bNonModificabileperPicking = True
                End If
              End If
            End If
          End If
          '------------------------------------------------------------------------------------------------------------
          '--- Aggiunta per il nuovo picking, faccio lo stesso controllo sopra anche sulle tabelle.
          '--- Controllo se c'è il modulo attivo, se è attivo ci devono essere anche le tabelle collegate aggiuntive.
          '------------------------------------------------------------------------------------------------------------
          If CBool(ModuliSupDittaDitt(strDittaCorrente) And bsModSupRME) Then
            If ControlloStatoPicking(NTSCInt(!et_idpick)) Then
              bDocNonModificabile = True
              bNonModificabileperPicking = True
              bNuovoDocDaPrec = False
            End If
          End If
          '------------------------------------------------------------------------------------------------------------
          '--- Se la fattura figurativa è evade dei corrispettivi non è possibile modificare il documento.
          '------------------------------------------------------------------------------------------------------------
          If IsFatturaFigurativa(NTSCStr(!et_tipork), NTSCInt(!et_anno), NTSCStr(!et_serie)) AndAlso _
             oCldBoll.VerificaInEvasioneFattFigurativa(NTSCStr(!codditt), NTSCStr(!et_tipork), NTSCInt(!et_anno), _
                                                       NTSCStr(!et_serie), NTSCInt(!et_numdoc)) Then bInEvasioneDaFattFigurativa = True
        End If
      End With
      '--------------------------------------------------------------------------------------------------------------
      '--- CRM
      '--------------------------------------------------------------------------------------------------------------
      If CheckCrm(bRipristinaDocumento) = False Then Return False
      '--------------------------------------------------------------------------------------------------------------
      Return True
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      Return False
    End Try
  End Function

  Public Overridable Function NetProCheckOrdModifCanc(ByVal bOpen As Boolean) As Boolean
    'per ogni riga del documento di produzione interno (che viene avanzato da NetPro) 
    'verifico se su netpro l'ordine è in evsione: se lo è non faccio ne salvare ne cancellare
    Dim dttGr As New DataTable
    Dim oDttgr As New CLEGROUPBY
    Try
      If strNetProDB = "" Then Return True
      If bInBNNPIENP Then Return True
      If dttET.Rows.Count = 0 Then Return True

      If dttET.Rows(0)!et_tipork.ToString = "T" Then
        If bTerzista Then Return True
      Else
        Return True
      End If

      If bNetProOrdLock Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129932150324547199, "Documento non modificabile/cancellabile: contiene degli ordini che su Net@Pro sono in corso di evasione. Per poterlo modificare riportare su Net@Pro lo status su 'REL'")))
        Return False
      End If

      oDttgr = New CLEGROUPBY
      dttGr.Clear()
      If Not oDttgr.NTSGroupBy(dttEC, dttGr, "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga", "ec_ornum <> 0 AND ec_ortipo IN ('R', 'O', 'H')", "ec_ortipo, ec_oranno, ec_orserie, ec_ornum, ec_orriga") Then
        Return False
      End If
      For Each dtrT As DataRow In dttGr.Rows
        'se l'ordine è in status EXE su netpro non posso salvare!!!!
        If oCldBoll.GetStatusEXEOrdineNetpro(strDittaCorrente, NTSCStr(dtrT!ec_ortipo), NTSCInt(dtrT!ec_oranno), _
                                             NTSCStr(dtrT!ec_orserie), NTSCInt(dtrT!ec_ornum), NTSCInt(dtrT!ec_orriga)) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129932143269873695, "Documento non modificabile/cancellabile: contiene degli ordini che su Net@Pro sono in corso di evasione. Per poterlo modificare riportare su Net@Pro lo status su 'REL'")))
          bNetProOrdLock = True
          Return False
        End If
      Next

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

#Region "Carico da prod automatico al salva di documento emesso"
  Public Overridable Function GetMovmagPerAutoCarprod(ByVal strTipoDoc As String, _
                                                     ByVal nAnno As Integer, ByVal strSerie As String, _
                                                     ByVal lNumdoc As Integer, ByVal bTestEsist As Boolean, _
                                                     ByRef dttMMOut As DataTable, ByRef dttMatrOut As DataTable) As Boolean
    Try
      Return GetMovmagPerAutoCarprod(strTipoDoc, nAnno, strSerie, lNumdoc, bTestEsist, dttMMOut, dttMatrOut, Nothing)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function GetMovmagPerAutoCarprod(ByVal strTipoDoc As String, _
                                                    ByVal nAnno As Integer, ByVal strSerie As String, _
                                                    ByVal lNumdoc As Integer, ByVal bTestEsist As Boolean, _
                                                    ByRef dttMMOut As DataTable, ByRef dttMatrOut As DataTable, _
                                                    ByRef dttTCOut As DataTable) As Boolean
    Try
      '----------------
      'per compatibilita' con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {strTipoDoc, nAnno, strSerie, lNumdoc, bTestEsist, dttMMOut, dttMatrOut, dttTCOut})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then
        dttMMOut = CType(oIn(5), DataTable)
        dttMatrOut = CType(oIn(6), DataTable)
        dttTCOut = CType(oIn(7), DataTable)
        Return CBool(oOut)
      End If
      '----------------


      Return oCldBoll.GetMovmagPerAutoCarprod(strDittaCorrente, strTipoDoc, nAnno, strSerie, lNumdoc, bTestEsist, dttMMOut, dttMatrOut, dttTCOut)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function CreaCarprodDaDocEmesso(ByVal strTipoDoc As String, ByVal nAnno As Integer, _
                                                     ByVal strSerie As String, ByVal lNumdoc As Integer, _
                                                     ByVal nCarProdInVendita As Integer, _
                                                     ByRef dttTestaCopy As DataTable, _
                                                     ByRef dttMM As DataTable, ByRef dttMatr As DataTable) As Boolean
    Try
      Return CreaCarprodDaDocEmesso(strTipoDoc, nAnno, strSerie, lNumdoc, nCarProdInVendita, dttTestaCopy, dttMM, dttMatr, Nothing)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function CreaCarprodDaDocEmesso(ByVal strTipoDoc As String, ByVal nAnno As Integer, _
                                                     ByVal strSerie As String, ByVal lNumdoc As Integer, _
                                                     ByVal nCarProdInVendita As Integer, _
                                                     ByVal dttTestaCopy As DataTable, _
                                                     ByVal dttMM As DataTable, ByVal dttMatr As DataTable, _
                                                     ByVal dttTc As DataTable) As Boolean
    'è stata settata l'opzione di registro per creare un carico da prod al salva del doc evemsso, 
    'contenente gli articoli appena venduti (solo quelli che hanno artico_ar_coddb <> '' e ar_makeorbuy <> 'B')
    Dim dtrT() As DataRow = Nothing
    Dim nTipobfTmp As Integer = 0
    Try
      '----------------
      'per compatibilita' con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {strTipoDoc, nAnno, strSerie, lNumdoc, nCarProdInVendita, dttTestaCopy, dttMM, dttMatr, dttTc})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then Return CBool(oOut)
      '----------------
      'ottengo il documento emesso appena salvato
      dtrT = dsTabmaga.Tables("TABMAGA").Select("tb_flclavo = ' ' AND tb_magconto <> 0", "tb_codmaga ASC")
      If dtrT.Length = 0 Then
        ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129948589296554823, "Creazione carico da produzione interrotto. Nella tabella dei magazzini non è stato trovato nessun magazzino di tipo 'Merce propria' con un codice cliente/fornitore diverso da 0")))
        Return False
      End If

      With dttET.Rows(0)
        nTipobfTmp = NTSCInt(!et_tipobf)
        !et_datdoc = dttTestaCopy.Rows(0)!et_datdoc
        !et_riferim = strTipoDoc & "-" & nAnno.ToString & "-" & strSerie & "-" & lNumdoc.ToString
        !et_conto = NTSCInt(dtrT(0)!tb_magconto)
        If nTipobfTmp = NTSCInt(!et_tipobf) Then
          'se non è previsto un tipobf specifico per fornitore, Come tipo bolla/fattura verrà preso o quello 
          'associato allanagrafica del fornitore o, se mancante, il primo tipo bolla/fattura con impostato 
          'un magazzino 1 e magazzino impegni di tipo merce propria
          nTipobfTmp = oCldBoll.GetTipoBfProdInterna(strDittaCorrente)
          If nTipobfTmp = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129948639609629013, "Creazione carico da produzione interrotto. Nella tabella dei tipi bolle/fatture non è stato trovato nessun codice con magazzino impegni diverso da 0 e magazzino 1 di tipo 'Merce propria'")))
            Return False
          End If
          !et_tipobf = nTipobfTmp
        End If

        !et_magaz = dttTestaCopy.Rows(0)!et_magaz
        !et_magimp = dttTestaCopy.Rows(0)!et_magaz
        !et_codcena = dttTestaCopy.Rows(0)!et_codcena
        !et_codcfam = dttTestaCopy.Rows(0)!et_codcfam
        !et_commeca = dttTestaCopy.Rows(0)!et_commeca
        !et_subcommeca = dttTestaCopy.Rows(0)!et_subcommeca
        !et_coddivi = dttTestaCopy.Rows(0)!et_coddivi
        !et_codcli = dttTestaCopy.Rows(0)!et_codcli
      End With


      For Each dtrM As DataRow In dttMM.Rows
        AggiungiRigaCorpo(False, NTSCStr(dtrM!mm_codart), NTSCInt(dtrM!mm_fase), 0)
        With dttEC.Rows(dttEC.Rows.Count - 1)
          !ec_unmis = NTSCStr(dtrM!mm_unmis)
          !ec_colli = NTSCDec(dtrM!mm_colli)
          !ec_misura1 = NTSCDec(dtrM!mm_misura1)
          !ec_misura2 = NTSCDec(dtrM!mm_misura2)
          !ec_misura3 = NTSCDec(dtrM!mm_misura3)
          !ec_quant = NTSCDec(dtrM!mm_quant)
          !ec_lotto = NTSCInt(dtrM!mm_lotto)
          !ec_ubicaz = NTSCStr(dtrM!mm_ubicaz)
          !ec_codcena = NTSCInt(dtrM!mm_codcena)
          !ec_codcfam = NTSCStr(dtrM!mm_codcfam)
          !ec_commeca = NTSCInt(dtrM!mm_commeca)
          !ec_subcommeca = NTSCStr(dtrM!mm_subcommeca)
          !ec_coddivi = NTSCInt(dtrM!mm_coddivi)
          'matricole
          For Each dtrMa As DataRow In dttMatr.Select("mma_riga = " & dtrM!mm_riga.ToString, "mma_rigaa")
            dttMOVMATR.ImportRow(dtrMa)
          Next
          'Cerca la riga delle taglie già creata e gli riversa i dati delle taglie del documetno di partenza
          Dim dtrEcTc() As DataRow
          If Not dttECTC Is Nothing Then
            dtrEcTc = dttECTC.Select("ec_riga = " & !ec_riga.ToString) 'Deve trovare sempre e solo una riga.
            If dtrEcTc.Length > 0 Then
              Dim dtrMMTc() As DataRow = dttTc.Select("mm_riga = " & dtrM!mm_riga.ToString)
              If dtrMMTc.Length > 0 Then
                For i As Integer = 1 To 24
                  dtrEcTc(0)("ec_quant" & i.ToString("00")) = dtrMMTc(0)("mm_quant" & i.ToString("00"))
                Next
              End If
            End If
          End If
        End With    'For Each dtrM As DataRow In dttMM.Rows
        If Not RecordSalva(dttEC.Rows(dttEC.Rows.Count - 1), False, Nothing) Then
          For Each dtrMa As DataRow In dttMOVMATR.Select("mma_riga = " & dttEC.Rows(dttEC.Rows.Count - 1)!ec_riga.ToString, "mma_rigaa")
            dtrMa.Delete()
          Next
          For Each dtrEcTc As DataRow In dttECTC.Select("ec_riga = " & dtrM!mm_riga.ToString) 'Deve trovare sempre e solo una riga.
            dtrEcTc.Delete()
          Next
          dttEC.Rows(dttEC.Rows.Count - 1).Delete()
        End If
        dttMOVMATR.AcceptChanges()
        If Not dttECTC Is Nothing Then
          dttECTC.AcceptChanges()
        End If
        dttEC.AcceptChanges()
      Next    'For Each dtrM As DataRow In dttMM.Rows

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
#End Region

  Public Overridable Function CreaPnfa() As Boolean
    Try
      '------------------------
      'inizializzo BEVEPNFA
      If Not oClePnfa Is Nothing Then Return True

      'ThrowRemoteEvent(New NTSEventArgs("AGGIOLABEL", oApp.Tr(Me, 128764816973482000, "Inizializzazione motore per contabilizzazione fatture ...")))

      Dim strErr As String = ""
      Dim oTmp As Object = Nothing
      If CLN__STD.NTSIstanziaDll(oApp.ServerDir, oApp.NetDir, "BEVEBOLL", "BEVEPNFA", oTmp, strErr, False, "", "") = False Then
        Throw New NTSException(oApp.Tr(Me, 128607611686875000, "ERRORE in fase di creazione Entity:" & vbCrLf & "|" & strErr & "|"))
        Return False
      End If
      oClePnfa = CType(oTmp, CLEVEPNFA)
      '------------------------------------------------
      AddHandler oClePnfa.RemoteEvent, AddressOf GestisciEventiEntityPnfa
      If oClePnfa.Init(oApp, oScript, oCleComm, "", False, "", "") = False Then Return False

      'ThrowRemoteEvent(New NTSEventArgs("AGGIOLABEL", ".".PadRight(100)))

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Sub GestisciEventiEntityPnfa(ByVal sender As Object, ByRef e As NTSEventArgs)
    Try
      'gli eventuali messaggi dati da BEVEPNFA tramite la ThrowRemoteEvent li passo a chi mi ha chiamato
      'solo se non sono messaggi dove viene chiesta una conferma ...
      Dim e1 As New NTSEventArgs(e.TipoEvento, oApp.Tr(Me, 130416134507244696, "Messaggio da contabilizzazione documenti:") & vbCrLf & e.Message)
      ThrowRemoteEvent(e1)
      e.RetValue = e1.RetValue
      e1 = Nothing

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Sub

  Public Overridable Function CheckSoloSerieInTRKTPBF(ByVal strDitta As String, ByVal strTipoDoc As String, _
                                                      ByVal strSerie As String) As Boolean
    Try
      If bSoloSerieInTRKTPBF Then
        If Not oCldBoll.CheckSoloSerieInTRKTPBF(strDitta, strTipoDoc, strSerie) Then
          ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 130512911001454327, "Con attiva l'opzione SoloSerieInTRKTPBF non è presente un tipo bolla/fattura per il doc |'" & DescrTipork(strTipoDoc) & "'| serie '|" & strSerie & "|'." & vbCrLf & "Creazione documento annullata.")))
          Return False
        End If
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function RitornaCodicePagamentoPerScaglioni(ByVal strTipork As String, ByVal nCodtpbf As Integer, ByVal lConto As Integer, _
                                                                 ByVal lImportoIn As Decimal, ByRef lImportoOut As Decimal, _
                                                                 ByVal nCodpagaIn As Integer, ByRef nCodpagaOut As Integer, ByRef strDespagaOut As String, _
                                                                 ByRef bInferioreAImportoMinimo As Boolean) As Boolean
    Try
      'obsoleta
      Return RitornaCodicePagamentoPerScaglioni(strTipork, nCodtpbf, lConto, lImportoIn, lImportoOut, nCodpagaIn, nCodpagaOut, strDespagaOut, bInferioreAImportoMinimo, 0, False)
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function
  Public Overridable Function RitornaCodicePagamentoPerScaglioni(ByVal strTipork As String, ByVal nCodtpbf As Integer, ByVal lConto As Integer, _
                                                                 ByVal lImportoIn As Decimal, ByRef lImportoOut As Decimal, ByVal nCodpagaIn As Integer, _
                                                                 ByRef nCodpagaOut As Integer, ByRef strDespagaOut As String, ByRef bInferioreAImportoMinimo As Boolean, _
                                                                 ByRef lImportoOut2 As Decimal, ByRef bInferioreAImportoMassimo As Boolean) As Boolean
    Try
      '----------------
      'per compatibilita' con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {strTipork, nCodtpbf, lConto, lImportoIn, lImportoOut, nCodpagaIn, nCodpagaOut, strDespagaOut, bInferioreAImportoMinimo, lImportoOut2, bInferioreAImportoMassimo})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then
        lImportoOut = NTSCDec(oIn(4))
        nCodpagaOut = NTSCInt(oIn(6))
        strDespagaOut = NTSCStr(oIn(7))
        bInferioreAImportoMinimo = CBool(oIn(8))
        lImportoOut2 = NTSCDec(oIn(9))
        bInferioreAImportoMassimo = CBool(oIn(10))
        Return CBool(oOut)
      End If
      '----------------

      'obsoleta
      Return RitornaCodicePagamentoPerScaglioni(strTipork, nCodtpbf, lConto, lImportoIn, lImportoOut, nCodpagaIn, nCodpagaOut, strDespagaOut, bInferioreAImportoMinimo, lImportoOut2, bInferioreAImportoMassimo, False)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try

  End Function
  Public Overridable Function RitornaCodicePagamentoPerScaglioni(ByVal strTipork As String, ByVal nCodtpbf As Integer, ByVal lConto As Integer, _
                                                              ByVal lImportoIn As Decimal, ByRef lImportoOut As Decimal, ByVal nCodpagaIn As Integer, _
                                                              ByRef nCodpagaOut As Integer, ByRef strDespagaOut As String, ByRef bInferioreAImportoMinimo As Boolean, _
                                                              ByRef lImportoOut2 As Decimal, ByRef bInferioreAImportoMassimo As Boolean, ByVal bDocArtDeterior As Boolean) As Boolean
    Try
      '----------------
      'per compatibilita' con funzioni ereditate da rive in versioni precedenti
      Dim oOut As Object = Nothing
      Dim oIn As New ArrayList(New Object() {strTipork, nCodtpbf, lConto, lImportoIn, lImportoOut, nCodpagaIn, nCodpagaOut, strDespagaOut, bInferioreAImportoMinimo, lImportoOut2, bInferioreAImportoMassimo, bDocArtDeterior})
      If CLN__STD.CheckInvokeCustomFunction(CustomClass, Me, System.Reflection.MethodInfo.GetCurrentMethod, oIn, oOut) Then
        lImportoOut = NTSCDec(oIn(4))
        nCodpagaOut = NTSCInt(oIn(6))
        strDespagaOut = NTSCStr(oIn(7))
        bInferioreAImportoMinimo = CBool(oIn(8))
        lImportoOut2 = NTSCDec(oIn(9))
        bInferioreAImportoMassimo = CBool(oIn(10))
        Return CBool(oOut)
      End If
      '----------------

      '--------------------------------------------------------------------------------------------------------------
      Return oCldBoll.RitornaCodicePagamentoPerScaglioni(strDittaCorrente, strTipork, nCodtpbf, lConto, _
                                                         lImportoIn, lImportoOut, nCodpagaIn, nCodpagaOut, strDespagaOut, bInferioreAImportoMinimo, _
                                                         lImportoOut2, bInferioreAImportoMassimo, bDocArtDeterior)
      '--------------------------------------------------------------------------------------------------------------
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function

  Public Overridable Function IsSoggettoconDichiarazioni(ByVal lConto As Integer) As Boolean
    Try
      Return oCldBoll.IsSoggettoconDichiarazioni(strDittaCorrente, lConto)
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      Return False
    End Try
  End Function

  Public Overridable Function GetDichint(ByRef dsHldi As DataSet, ByVal lConto As Integer, ByVal strDatval As String) As Boolean
    Dim dttTmp As New DataTable
    Try
      Return oCldBoll.GetDichint(strDittaCorrente, lConto, "T", False, False, True, strDatval, dsHldi)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    End Try
  End Function

  Public Overridable Function AlertConfrontoPrezzi(ByVal strState As String) As Boolean
    '----------------------------------------------------------------------------------------------------------------
    '--- Dopo il salvataggio del documento se:
    '--- l'opzione di registro relativa è attiva;
    '--- il tipo documento rientra nell'elenco indicato nell'opzione di rgistro relativa
    '--- controlla, sulle righe che evadono ordini, che il prezzo al netto degli sconti di riga NON sia superiore
    '--- al prezzo, al netto degli sconti di riga, della riga ordine relativa evasa
    '----------------------------------------------------------------------------------------------------------------
    Try
      '--------------------------------------------------------------------------------------------------------------
      '--- Se si è in cancellazione di un documento, esce
      '--------------------------------------------------------------------------------------------------------------
      If strState = "D" Then Return True
      '--------------------------------------------------------------------------------------------------------------
      '--- Esce, somunque, se nell'opzione di registro è stato in dicato un documento di tipo:
      '----- Scarico a Produzione            ("U")
      '----- Nota di Prelievo                ("W")
      '----- Bolla di Movimentazione Interna ("Z")
      '--------------------------------------------------------------------------------------------------------------
      Select Case dttET.Rows(0)!et_tipork.ToString
        Case "U", "W", "Z" : Return True
      End Select
      '--------------------------------------------------------------------------------------------------------------
      '--- Se l'opzione di registro BSVEBOLL/OPZIONI/Conf_Prz_DocRic_DocEv NON è attiva, esce (default non attiva)
      '--------------------------------------------------------------------------------------------------------------
      If CBool(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", _
        "Conf_Prz_DocRic_DocEv", "0", " ", "0")) = False Then Return True
      '--------------------------------------------------------------------------------------------------------------
      '--- Se il tipo documento non rientra nell'elenco dei tipi documento da controllare, esce
      '--- (default: M=D.D.T. Ricevuto, L=Fattura Immediata Ricevuta, T=Carico da Produzione (su magazzino terzista)
      '--------------------------------------------------------------------------------------------------------------
      If InStr(oCldBoll.GetSettingBusDitt(strDittaCorrente, "BSVEBOLL", "OPZIONI", ".", _
        "TipiDocumentiPerConfronto", "L,M,T", " ", "L,M,T").ToUpper, dttET.Rows(0)!et_tipork.ToString) = 0 Then
        Return True
      End If
      '--------------------------------------------------------------------------------------------------------------
      '--- Se il documento è di tipo Carico da Produzione ma il magazzino di testata NON è "Terzista", esce
      '--------------------------------------------------------------------------------------------------------------
      If (dttET.Rows(0)!et_tipork.ToString = "T") And (bTerzista = False) Then Return True
      '--------------------------------------------------------------------------------------------------------------
      Dim dttTmp As New DataTable
      If oCldBoll.GetRigheMovmagMovord(strDittaCorrente, dttET.Rows(0), dttTmp) = False Then Return True
      '--------------------------------------------------------------------------------------------------------------
      Dim dttAlert As New DataTable
      dttAlert = CType(oCleComm, CLELBMENU).CreaDynasetAlert
      dttAlert.Rows.Add(dttAlert.NewRow)
      dttAlert.Rows(0)!codditt = strDittaCorrente
      '--------------------------------------------------------------------------------------------------------------
      Dim strTmp As String = ""
      Select Case dttET.Rows(0)!et_tipork.ToString
        Case "A" : strTmp = oApp.Tr(Me, 130586171790040181, "Fattura Immediata Emessa")
        Case "B" : strTmp = oApp.Tr(Me, 130586171806763255, "D.D.T. Emesso")
        Case "C" : strTmp = oApp.Tr(Me, 130586171822471627, "Corrispettivo Emesso")
        Case "E" : strTmp = oApp.Tr(Me, 130586171837399459, "Nota di Addebito Emessa")
        Case "F" : strTmp = oApp.Tr(Me, 130586171852171183, "Ricevuta Fiscale Emessa")
        Case "I" : strTmp = oApp.Tr(Me, 130586171866942907, "Riemissione Ricevuta Fiscale")
        Case "J" : strTmp = oApp.Tr(Me, 130586171881129235, "Nota di Accredito Ricevuta")
        Case "L" : strTmp = oApp.Tr(Me, 130586171895900959, "Fattura Immediata Ricevuta")
        Case "M" : strTmp = oApp.Tr(Me, 130586171910672683, "D.D.T. Ricevuto")
        Case "N" : strTmp = oApp.Tr(Me, 130586171924819975, "Nota Accredito Emessa")
        Case "S" : strTmp = oApp.Tr(Me, 130586171939513647, "Fattura/Ricevuta Fiscale Emessa")
        Case "T" : strTmp = oApp.Tr(Me, 130586171956002559, "Carico da Produzuzione")
      End Select
      strTmp += oApp.Tr(Me, 130586178180037684, " N°|" & dttET.Rows(0)!et_numdoc.ToString & _
        IIf(dttET.Rows(0)!et_serie.ToString.Trim <> "", "/", "").ToString & dttET.Rows(0)!et_serie.ToString.Trim & "|" & _
        " del |" & NTSCDate(dttET.Rows(0)!et_datdoc).ToShortDateString & "|" & vbCrLf & _
        "con prezzi, al netto dei SOLI sconti di riga," & vbCrLf & _
        "diversi da Ordine Fornitore." & vbCrLf & _
        "Righe trovate:" & vbCrLf)
      '--------------------------------------------------------------------------------------------------------------
      For i As Integer = 0 To (dttTmp.Rows.Count - 1)
        With dttTmp.Rows(i)
          strTmp += oApp.Tr(Me, 130586178543478345, " . Riga: '|" & NTSCStr(!mm_riga) & "|'," & _
                                                    " articolo: '|" & NTSCStr(!mm_codart) & "|'" & _
                                                    IIf(NTSCStr(!mm_descr).Trim <> "", " - ", "").ToString & NTSCStr(!mm_descr).Trim & "|," & _
                                                    " prezzo documento: |" & Format(NTSCDec(!PrezzoDoc), oApp.FormatPrzUn) & "|" & _
                                                    " <-->" & _
                                                    " prezzo ordine: |" & Format(NTSCDec(!PrezzoOrd), oApp.FormatPrzUn) & "|")
        End With
      Next
      dttTmp.Clear()
      dttTmp.Dispose()
      '--------------------------------------------------------------------------------------------------------------
      dttAlert.Rows(0)!strMsg = strTmp
      dttAlert.AcceptChanges()
      '--------------------------------------------------------------------------------------------------------------
      CType(oCleComm, CLELBMENU).Verifica_Genera_Alert(2, strDittaCorrente, "BSVEBOLL", 3, 0, dttAlert)
      '--------------------------------------------------------------------------------------------------------------
      dttAlert.Clear()
      dttAlert.Dispose()
      '--------------------------------------------------------------------------------------------------------------
      Return True
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function

  Public Overridable Function IsFatturaFigurativa(ByVal strTipork As String, ByVal nAnno As Integer, _
    ByVal strSerie As String) As Boolean
    Try
      '--------------------------------------------------------------------------------------------------------------
      Return oCldBoll.IsFatturaFigurativa(strDittaCorrente, strTipork, nAnno, strSerie)
      '--------------------------------------------------------------------------------------------------------------
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
    End Try
  End Function

  Public dsNewDocArt62 As DataSet = Nothing
  Public lDeteriorNumDoc As Integer = 0
  Public dDeteriorResiduoAbbuono As Decimal = 0
  Public Overridable Function SpezzaDocArt62() As Boolean
    Dim dttArt As New DataTable
    Dim dNoDeterior As Decimal = 0
    Dim dDeterior As Decimal = 0
    Dim dAltro As Decimal
    Try
      'Negli ordini e nei documenti ricevuti non devo fare nulla. 
      If BORDINI OrElse Not bDocEmesso Then Return Not bNew

      'Se la forma di pagamento utilizzata è contanti non devo fare nulla.
      If VerificaCodicePagamentoContanti(NTSCInt(dttET.Rows(0)!et_codpaga)) Then Return Not bNew 'Se nuovo dovumento deve ritorna false, altrimenti true
      If VerificaCodicePagamentoContanti(NTSCInt(dttET.Rows(0)!et_codpaga2)) Then Return Not bNew

      'Se il codice pagamento deteriorabile e il codice pagamento sono uguale o se il codice pagamento deteriorabile è 0 non devo spezzare
      Dim dttAnagra As New DataTable
      oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_conto), strDittaCorrente, "ANAGRA", "N", , dttAnagra)
      If NTSCInt(dttAnagra.Rows(0)!an_codpag) = NTSCInt(dttAnagra.Rows(0)!an_codpagadet) OrElse NTSCInt(dttAnagra.Rows(0)!an_codpagadet) = 0 Then Return Not bNew

      'Scorre le righe e determina se l'articolo è deteriorabile oppure no (e relativo importo).
      For Each dtrEc As DataRow In dttEC.Rows
        If Not oCldBoll.ValCodiceDb(NTSCStr(dtrEc!ec_codart), strDittaCorrente, "ARTICO", "S", , dttArt) Then Return False

        'Se è arrivato fin qui l'articolo DEVE esserci!
        Select Case NTSCStr(dttArt.Rows(0)!ar_deterior)
          Case "S" : dDeterior += NTSCDec(dtrEc!ec_valore)
          Case "N" : dNoDeterior += NTSCDec(dtrEc!ec_valore)
          Case Else : dAltro += NTSCDec(dtrEc!ec_valore)
        End Select
      Next

      'Non ci sono articoli deteriorabili e non deteriorabili.
      If dDeterior = 0 OrElse dNoDeterior = 0 Then Return Not bNew 'Se nuovo dovumento deve ritorna false, altrimenti true

      'Cambia il messaggio e il comportamento tra i documenti nuovi (da spezzare) e aperti (chiede solo conferma di salvare).
      If bNew Then
        Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130952584022259478, _
                      "Attenzione!" & vbCrLf & "Questo nuovo documento contiene prodotti alimentario deteriorabili (valore merce " & dDeterior.ToString(oApp.FormatImporti) & ")" & vbCrLf & _
                      "insieme a prodotti alimentari non deteriorabili (valore merce " & dNoDeterior.ToString(oApp.FormatImporti) & ")." & vbCrLf & _
                      "Spezzare il documento?"))
        ThrowRemoteEvent(evnt)
        If evnt.RetValue = ThMsg.RETVALUE_NO Then Return False
      Else
        Dim evnt As New NTSEventArgs(ThMsg.MSG_YESNO, oApp.Tr(Me, 130952584022259479, _
                      "Attenzione! Questo documento aperto contiene prodotti alimentario deteriorabili (valore merce " & dDeterior.ToString(oApp.FormatImporti) & ")" & _
                      "insieme a prodotti alimentari non deteriorabili (valore merce " & dNoDeterior.ToString(oApp.FormatImporti) & ")." & vbCrLf & _
                      "Procedere comunque?"))
        ThrowRemoteEvent(evnt)
        Return evnt.RetValue <> ThMsg.RETVALUE_NO 'Sui documenti aperti non deve spezzare.
      End If

      'Stacco le righe deteriorabili che aggiungerò ad un nuovo documento.
      dsNewDocArt62 = New DataSet 'Inizializzo il dataset temporaneo con le nuove informazioni da spostare
      dsNewDocArt62.Tables.Add(dttEC.Clone)
      If dttECTC IsNot Nothing Then dsNewDocArt62.Tables.Add(dttECTC.Clone)
      If dttMOVMATR IsNot Nothing Then dsNewDocArt62.Tables.Add(dttMOVMATR.Clone)

      For i As Integer = dttEC.Rows.Count - 1 To 0 Step -1
        With dttEC.Rows(i)
          If Not oCldBoll.ValCodiceDb(NTSCStr(!ec_codart), strDittaCorrente, "ARTICO", "S", , dttArt) Then Return False

          'Se è arrivato fin qui l'articolo DEVE esserci!
          If NTSCStr(dttArt.Rows(0)!ar_deterior) = "S" Then
            dsNewDocArt62.Tables("CORPO").Rows.Add(.ItemArray)
            If dttECTC IsNot Nothing Then 'tratto il dettaglio taglie (se presente)
              For Each dtrEctc As DataRow In dttECTC.Select("ec_riga = " & NTSCInt(!ec_riga))
                dsNewDocArt62.Tables("CORPOTC").Rows.Add(dtrEctc.ItemArray)
                dttECTC.AcceptChanges()
              Next
            End If
            If dttMOVMATR IsNot Nothing Then 'tratto il dettaglio taglie (se presente)
              For Each dtrMovmatr As DataRow In dttMOVMATR.Select("mma_riga = " & NTSCInt(!ec_riga))
                dsNewDocArt62.Tables("MOVMATR").Rows.Add(dtrMovmatr.ItemArray)
                dtrMovmatr.Delete()
              Next
            End If
            .Delete()
          End If
        End With
      Next

      dttEC.AcceptChanges()
      If dttECTC IsNot Nothing Then dttECTC.AcceptChanges()
      If dttMOVMATR IsNot Nothing Then dttMOVMATR.AcceptChanges()

      CalcolaTotali()
      bCodicePagamentoRicalcolato = False
      CambiaFormaDiPagamento(False)

      'Se l'abbuono è superiore al valore del nuovo documento, lo riduce e la parte in eccesso andrà sul nuovo documento
      dDeteriorResiduoAbbuono = NTSCDec(dttET.Rows(0)!et_abbuono) - (NTSCDec(dttET.Rows(0)!et_totdoc) - NTSCDec(dttET.Rows(0)!et_totomag))
      If dDeteriorResiduoAbbuono < 0 Then
        dDeteriorResiduoAbbuono = 0
      Else
        dttET.Rows(0)!et_abbuono = (NTSCDec(dttET.Rows(0)!et_totdoc) - NTSCDec(dttET.Rows(0)!et_totomag))
      End If

      Return True
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function GeneraDocumentoArticoliDeteriorabili() As Boolean
    Dim dttEtOld As DataTable = dttET.Copy
    Dim dttEtcOld As DataTable = dttETC.Copy
    Try
      'Non devo fare nulla in mancanza dell'opzione di registro o se il documento non era da spezzare
      If Not bSpezzaDocArt62Deterior OrElse dsNewDocArt62 Is Nothing OrElse dsNewDocArt62.Tables("CORPO").Rows.Count = 0 Then Return True

      With dttEtOld.Rows(0)
        Dim lNum As Integer = LegNuma(NTSCStr(!et_tipork), NTSCStr(!et_serie), NTSCInt(!et_anno))
        'Crea il nuovo documento (calcolando il nuovo progressivo)
        NuovoDocumento(NTSCStr(!codditt), NTSCStr(!et_tipork), NTSCInt(!et_anno), NTSCStr(!et_serie), lNum)
      End With

      'tiene in memoria il nuovo numero di documento, per poterlo riassegnare dopo la copia
      Dim lNumdoc As Integer = NTSCInt(dttET.Rows(0)!et_numdoc)

      'Copia tutte le informazioni ad eccezione del numero documento (visto che copia tutte le colonne non è necessario far scattare tutte le validazioni. Sono dati già corretti!)
      RemoveHandler dttET.ColumnChanging, AddressOf BeforeColUpdate_TESTA
      RemoveHandler dttET.ColumnChanged, AddressOf AfterColUpdate_TESTA
      RemoveHandler dttETC.ColumnChanging, AddressOf BeforeColUpdate_TESTAC
      RemoveHandler dttETC.ColumnChanged, AddressOf AfterColUpdate_TESTAC

      For Each oColumn As DataColumn In dttET.Columns
        If oColumn.ColumnName = "et_numdoc" Then Continue For
        dttET.Rows(0)(oColumn.ColumnName) = dttEtOld.Rows(0)(oColumn.ColumnName)
      Next
      For Each oColumn As DataColumn In dttETC.Columns
        If oColumn.ColumnName = "tm_numdoc" Then Continue For
        dttETC.Rows(0)(oColumn.ColumnName) = dttEtcOld.Rows(0)(oColumn.ColumnName)
      Next

      'Riaggancio gli eventi
      AddHandler dttET.ColumnChanging, AddressOf BeforeColUpdate_TESTA
      AddHandler dttET.ColumnChanged, AddressOf AfterColUpdate_TESTA
      AddHandler dttETC.ColumnChanging, AddressOf BeforeColUpdate_TESTAC
      AddHandler dttETC.ColumnChanged, AddressOf AfterColUpdate_TESTAC

      dttET.Rows(0)!et_abbuono = dDeteriorResiduoAbbuono 'Se è rimasto un residuo di abbuono il programma lo riporta sul secondo documento (altrimenti lo svuota)

      dttET.AcceptChanges()
      dttETC.AcceptChanges()

      'Aggiunge le righe del corpo
      For Each dtrEc As DataRow In dsNewDocArt62.Tables("CORPO").Rows
        dttEC.Rows.Add(dtrEc.ItemArray)
        dttEC.Rows(dttEC.Rows.Count - 1)!ec_numdoc = lNumdoc
      Next
      dttEC.AcceptChanges()
      If dttECTC IsNot Nothing Then
        'Aggiunge il taglie e colori
        For Each dtrEctc As DataRow In dsNewDocArt62.Tables("CORPOTC").Rows
          dttECTC.Rows.Add(dtrEctc.ItemArray)
          dttECTC.Rows(dttECTC.Rows.Count - 1)!ec_numdoc = lNumdoc
        Next
        dttECTC.AcceptChanges()
      End If
      If dttMOVMATR IsNot Nothing Then
        'Aggiunge il dettaglio matricole
        For Each dtrMovmatr As DataRow In dsNewDocArt62.Tables("MOVMATR").Rows
          dttMOVMATR.Rows.Add(dtrMovmatr.ItemArray)
          dttMOVMATR.Rows(dttMOVMATR.Rows.Count - 1)!mma_numdoc = lNumdoc
        Next
        dttMOVMATR.AcceptChanges()
      End If
      dsNewDocArt62 = Nothing

      'Operazioni finali prima del salvataggio
      CalcolaTotali()
      Dim dttConto As New DataTable
      oCldBoll.ValCodiceDb(NTSCStr(dttET.Rows(0)!et_conto), strDittaCorrente, "ANAGRA", "N", , dttConto)
      If NTSCInt(dttConto.Rows(0)!an_codpagadet) <> 0 Then dttET.Rows(0)!et_codpaga = NTSCInt(dttConto.Rows(0)!an_codpagadet)
      bCodicePagamentoRicalcolato = False
      CambiaFormaDiPagamento(True)

      'Salva il numero del vecchio documento per la stampa
      lDeteriorNumDoc = NTSCInt(dttEtOld.Rows(0)!et_numdoc)

      Return SalvaDocumento("N")
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dsNewDocArt62 = Nothing
    End Try
  End Function

  Public Overridable Function DecodificaTipoDocumento(ByVal strTipork As String) As String
    Try
      '--------------------------------------------------------------------------------------------------------------
      Select Case strTipork
        Case "A" : Return "Fattura Immediata Emessa"
        Case "B" : Return "D.D.T. Emesso"
        Case "C" : Return "Corrispettivo Emesso"
        Case "E" : Return "Nota di Addebito Emessa"
        Case "F" : Return "Ricevuta Fiscale Emessa"
        Case "I" : Return "Riemissione Ricevuta Fiscale"
        Case "J" : Return "Nota di Accredito Ricevuta"
        Case "L" : Return "Fattura Immediata Ricevuta"
        Case "M" : Return "D.D.T. Ricevuto"
        Case "N" : Return "Nota di Accredito Emessa"
        Case "S" : Return "Fattura/Ricevuta Fiscale Emessa"
        Case "T" : Return "Carico da Produzione"
        Case "W" : Return "Nota di Prelievo"
        Case "Z" : Return "Bolla di Movimentazione Interna"
      End Select
      '--------------------------------------------------------------------------------------------------------------
      Return ""
    Catch ex As Exception
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      Return ""
    End Try
  End Function

End Class