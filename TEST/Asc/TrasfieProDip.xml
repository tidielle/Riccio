<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<NTSIEPROCEDDIPNET_table>
  <NTSIEPROCEDDIPNET>
    <pr_codice>2</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvDataSQL</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvDataSQL(vIn, fLocale, bConnection)
   Dim strIn
   Dim bConn
   Dim s
   Dim g
   Dim ss
    'If IsMissing(bConnection) Then
    '   bConn = False
   ' Else
       bConn = bConnection
   'End If
   
    If Not IsNull(vIn) Then
      strIn = CStr(vIn)
    End If
    If strIn = "" Or vIn = Null Then
        ConvDataSQL = "NULL"
        Exit Function
    End If
    If Left(strIn, 1) = "0" Then
       g = Mid(strIn, 2, 1)
    Else
       g = Left(strIn, 2)
    End If
    If Len(strIn) = 10 Then
      s = Mid(strIn, 4, 2) &amp; "/" &amp; g &amp; "/" &amp; Right(strIn, 4)
    Else
      s = Mid(strIn, 4, 2) &amp; "/" &amp; g &amp; "/" &amp; Right(strIn, 2)
    End If
   If fLocale = True Then fLocale = False
   If fLocale = False Then
       Select Case gstrDataType
         Case  "Access"
           If bConn = False Then
              s = "DateValue(""" &amp; strIn &amp; """)"
           Else
            Select Case gstrSubDataType
              Case "(Nessuno)"
                s = "DateValue(""" &amp; strIn &amp; """)"
              Case "SQLServer", "SQLServer7"
                s = ConvDataSqlPasst(strIn, False)
            End Select
           End If
         Case  "ODBC"
            Select Case gstrSubDataType
              Case  "(Nessuno)"
                s = "#" &amp; s &amp; "#"
              Case ""
                s = "#" &amp; s &amp; "#"
              Case "Informix"
                s = "" &amp; s &amp; ""
              Case "Transoft"
                s = "#" &amp; s &amp; "#"
              Case "SQLServer"
                s = "'" &amp; s &amp; "'"
            End Select
       End Select
    End If
     ConvDataSQL = s
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>3</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvDblSql</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Public Function ConvDblSQL(dNum)
Dim str
  str = CStr(dNum)
  If InStr(str, ",") &gt; 0 Then
    ConvDblSQL = Left(str, InStr(str, ",") - 1) &amp; "." &amp; Right(str, Len(str) - InStr(str, ","))
  Else
    ConvDblSQL = str
  End If
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>4</pr_codice>
    <pr_tipo>I</pr_tipo>
    <pr_nome>Now</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Now</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>5</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvOra100Ora60</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvOra100Ora60(dValore)
Dim i
Dim strValore
Dim strOut
Dim lIntero
Dim dMinuti
Dim lInteroMinuti
Dim lSecondi
Dim dAppo
Dim dRimasti
Dim dA1, dA2, dA0

lIntero = Fix(dValore)
' trasforma i dec. in secondi
lSecondi = (dValore - lIntero + 0.00000000001) * 10000
lSecondi = lSecondi * 3600 / 10000 + 0.5
' ora trasforma i secondi in minuti
dMinuti = Fix(lSecondi / 60)
dRimasti = Fix(lSecondi - (dMinuti * 60))
If dRimasti &gt; 59 Then 
  dMinuti = dMinuti + 1
  dRimasti = dRimasti - 60
End If
If dMinuti &gt; 59 Then 
  lIntero = lIntero + 1
  dMinuti = dMinuti - 60
End If

dAppo = lIntero + dMinuti / 100 + dRimasti / 10000

ConvOra100Ora60 = ArrDbl(dAppo, 4)
  
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>6</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ArrDbl</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ArrDbl(ByVal dValore, nDec)
  dValore = dValore * 10 ^ nDec
  dValore = Int(dValore) + Int((dValore - Int(dValore)) * 2)
  ArrDbl = dValore / 10 ^ nDec
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>7</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvNullStr</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvNullStr(fval)
 If IsNull(fval) Then
    ConvNullStr = ""
  Else
    ConvNullStr = CStr(fval)
  End If
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>8</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvNullDbl</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvNullDbl(fval)
  If IsNull(fval) Then
    ConvNullDbl = 0
  Else
    ConvNullDbl = CDbl(fval)
  End If
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>9</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>AggiornaDoc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Sub AggiornaDoc
  Dim strDitta as String = ""
  Dim oCldBase As CLD__BASE = Nothing
  Dim strSQL As String = ""
  Dim strTipork As String = ""
  Dim strSerie As String = ""
  Dim lNumdoc As Integer = 0
  Dim nAnno As Integer = 0
  Dim dttTmp As DataTable = Nothing
  Try
    strTipork = NTSCStr(VARS!IeOu1Row!tm_tipork)
    if strTipork="£" or strTipork="D" or strTipork="K" or strTipork="P" then return 
    strSerie = NTSCStr(VARS!IeOu1Row!tm_serie)
    lNumdoc = NTSCInt(VARS!IeOu1Row!tm_numdoc)
    nAnno = NTSCInt(VARS!IeOu1Row!tm_anno)

    strDitta = oApp.Ditta.ToString
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    strSQl ="SELECT COUNT(mm_numdoc) AS xx_count FROM movmag" &amp; _
            " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
            " AND mm_anno = " &amp; nAnno &amp; _
            " AND mm_numdoc = " &amp; lNumdoc &amp; _
            " AND mm_serie = " &amp; CStrSQL(strSerie) &amp; _
            " AND mm_tipork = " &amp; CStrSQL(strTipork)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If NTSCInt(dttTmp.Rows(0)!xx_count) = 0 Then
      'TESTMAG
      strSQl ="DELETE FROM testmag" &amp; _
              " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
              " AND tm_anno = " &amp; nAnno &amp; _
              " AND tm_numdoc= " &amp; lNumdoc &amp; _
              " AND tm_serie = " &amp; CStrSQL(strSerie) &amp; _
              " AND tm_tipork = " &amp; CStrSQL(strTipork)
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      'TESTMAGC
      strSQl ="DELETE FROM testmagc" &amp; _
              " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
              " AND tm_anno = " &amp; nAnno &amp; _
              " AND tm_numdoc= " &amp; lNumdoc &amp; _
              " AND tm_serie = " &amp; CStrSQL(strSerie) &amp; _
              " AND tm_tipork = " &amp; CStrSQL(strTipork)
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      'LAVCENT
      strSQl ="DELETE FROM lavcent" &amp; _
              " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
              " AND lce_anno = " &amp; nAnno &amp; _
              " AND lce_numdoc= " &amp; lNumdoc &amp; _
              " AND lce_serie = " &amp; CStrSQL(strSerie) &amp; _
              " AND lce_tipork = " &amp; CStrSQL(strTipork)
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      oCleImex.WriteLog("Il documento anno/serie/numero = " &amp; nAnno &amp; _
                        "/" &amp; CStrSQL(strSerie) &amp; "/" &amp; lNumdoc &amp; _
                        " non e stato salvato: non ci sono le righe del corpo.")
      Else
        RicalcolaDoc(strDitta, strTipork, nAnno, strSerie, lNumdoc, True)
      End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'AggiornaDoc':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>10</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>AggiornaOrd</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub AggiornaOrd
  Dim strDitta as String = ""
  Dim oCldBase As CLD__BASE = Nothing
  Dim strSQL As String = ""
  Dim strTipork As String = ""
  Dim strSerie As String = ""
  Dim lNumord As Integer = 0
  Dim nAnno As Integer = 0
  Dim dttTmp As DataTable = Nothing
  Try
    strDitta = oApp.Ditta.ToString
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    strTipork = NTSCStr(VARS!IeOu1Row!td_tipork)
    strSerie = NTSCStr(VARS!IeOu1Row!td_serie)
    lNumord = NTSCInt(VARS!IeOu1Row!td_numord)
    nAnno = NTSCInt(VARS!IeOu1Row!td_anno)

    strSQl ="SELECT COUNT(mo_numord) AS xx_count FROM movord" &amp; _
            " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
            " AND mo_anno = " &amp; nAnno &amp; _
            " AND mo_numord= " &amp; lNumord &amp; _
            " AND mo_serie = " &amp; CStrSQL(strSerie) &amp; _
            " AND mo_tipork = " &amp; CStrSQL(strTipork)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If NTSCInt(dttTmp.Rows(0)!xx_count) = 0 Then
      strSQl ="DELETE FROM testord" &amp; _
              " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
              " AND td_anno = " &amp; nAnno &amp; _
              " AND td_numord = " &amp; lNumord &amp; _
              " AND td_serie = " &amp; CStrSQL(strSerie) &amp; _
              " AND td_tipork = " &amp; CStrSQL(strTipork)
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      oCleImex.WriteLog("L'ordine anno/serie/numero = " &amp; nAnno &amp; _
                        "/" &amp; CStrSQL(strSerie) &amp; "/" &amp; lNumord &amp; _
                        " non e stato salvato: non ci sono le righe del corpo.")
      Else
        RicalcolaOrd(strDitta, strTipork, nAnno, strSerie, lNumord, True)
      End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'AggiornaOrd':" &amp; ex.Message)
  End Try
End Sub
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>11</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvDataOraSQL</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvDataOraSQL(vIn, fLocale)
Dim dtData
  'Testa la validita' della data
  If IsDate(vIn) Then
    dtData = CDate(vIn)
  Else
    ConvDataOraSQL = "Null"
    Exit Function
  End If
  ConvDataOraSQL = "'" &amp; Right("0000" &amp; Year(dtData), 4) &amp; "-" &amp; _
                   Right("00" &amp; Month(dtData), 2) &amp; "-" &amp; _
                   Right("00" &amp; Day(dtData), 2) &amp; " " &amp; _
                   Right("00" &amp; Hour(dtData), 2) &amp; ":" &amp; _
                   Right("00" &amp; Minute(dtData), 2) &amp; ":" &amp; _
                   Right("00" &amp; Second(dtData), 2) &amp; "'"
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>13</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvDataSqlPasst</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvDataSqlPasst(vIn, fLocale)
Dim dtData
  Select Case fLocale
    Case False,True
      Select Case gstrSubDataType
        Case "(Nessuno)" 'bsDbSubTipoNessuno
          'Access
          ConvDataSqlPasst = ConvDataSQL(vIn, fLocale)
        Case "SQLServer", "SQLServer7" 'bsDbSubTipoSqlsvr
          'SQL Server
          If Not IsNull(vIn) Then
            If IsDate(vIn) Then
              dtData = CDate(vIn)
            Else
              ConvDataSqlPasst = "Null"
              Exit Function
            End If
          Else
            ConvDataSqlPasst = "Null"
            Exit Function
          End If
          ConvDataSqlPasst = "'" &amp; Year(dtData) &amp; "/" &amp; Month(dtData) &amp; "/" &amp; Day(dtData) &amp; "'"
      End Select
    Case 2 'bsDbArcproc
      Select Case gstrPrcSubDataType
        Case "(Nessuno)" 'bsDbSubTipoNessuno
          'Access
          ConvDataSqlPasst = ConvDataSQL(vIn, fLocale)
        Case "SQLServer", "SQLServer7" 'bsDbSubTipoSqlsvr
          'SQL Server
          If Not IsNull(vIn) Then
            If IsDate(vIn) Then
              dtData = CDate(vIn)
            Else
              ConvDataSqlPasst = "Null"
              Exit Function
            End If
          Else
            ConvDataSqlPasst = "Null"
            Exit Function
          End If
          ConvDataSqlPasst = "'" &amp; Year(dtData) &amp; "/" &amp; Month(dtData) &amp; "/" &amp; Day(dtData) &amp; "'"
      End Select
  End Select
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>14</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GetArticoFromCodarfo</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function GetArticoFromCodarfo(lConto, strCodarfo)
  Dim strSQL
  Dim snaCodarfo
  strSQL = "SELECT caf_codart FROM codarfo WHERE caf_conto = " &amp; lConto &amp; " AND caf_codarfo = " &amp; ConvStrNullSql(strCodarfo)
  Set snaCodarfo = gdb.OpenRecordset(strSQL, 4)
  If snaCodarfo.EOF Then 
    GetArticoFromCodarfo =""
  else
    GetArticoFromCodarfo = snaCodarfo("caf_codart")
  end if
  snacodarfo.close
  set snacodarfo = nothing
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>15</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvStrSql</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvStrSQL(strIn)
Dim strOut
Dim nPos
Dim nRis
  strOut = ""
  nPos = 1
  nRis = InStr(strIn, "'")
  Do While nRis &lt;&gt; 0
    strOut = strOut &amp; Mid(strIn, nPos, nRis + 1 - nPos) &amp; "'"
    nPos = nRis + 1
    nRis = InStr(nPos, strIn, "'")
  Loop
  ConvStrSQL = strOut &amp; Mid(strIn, nPos, Len(strIn))
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>16</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConvStrNullSql</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Function ConvStrNullSql(vIn)
  If IsNull(vIn) Then
    ConvStrNullSql = "Null"
  Else
    If vIn = "" Then
      ConvStrNullSql = "Null"
    Else
      ConvStrNullSql = "'" &amp; ConvStrSQL(vIn) &amp; "'"
    End If
  End If
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>18</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAOpnome</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAOpnome As String
  Try
    Return oApp.User.Nome
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAOpnome':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>19</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAUltagg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAUltagg As Date
  Try
    Return NTSCDate(Date.Now)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAUltagg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>20</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>REAInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public strDitta As String = ""
Public oCldBase As CLD__BASE = Nothing
Public CONST REA_CONTO As Integer = 4019998
Public Const MASTRO_CLIENTI_1 As Integer = 401
Public Const MASTRO_CLIENTI_2 As Integer = 402
Public Const CODPAGA_1 As Integer = 1 
Public Const CODPAGA_2 As Integer = 2 
Public Const MOLTIPLICA_CONTO As Integer = 10000

'Dati della nuova anagrafica
Public strPDC As String = ""
Public strPartite As String = ""
Public strScad As String = ""

Sub REAInit
  Dim dttTmp As New DataTable
  Try
    strDitta = oApp.Ditta.ToString
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

   If oCldBase.ValCodiceDb(strDitta, strDitta, "TABANAZ", "S", "", dttTmp) Then
      strPDC = NTSCStr(dttTmp.Rows(0)!tb_azcodpcon)
      strPartite = NTSCStr(IIf(dttTmp.Rows(0)!tb_ventil.ToString = "C" Or dttTmp.Rows(0)!tb_ventil.ToString = "S", "S", "N"))
      strScad = NTSCStr(IIf(dttTmp.Rows(0)!tb_azgestscad.ToString = "C" Or dttTmp.Rows(0)!tb_azgestscad.ToString = "S", "S", "N"))
    Else
      oCleImex.WriteLog("L'importazione documenti non può essere eseguita." &amp; _
                        " Impossibile leggere i dati dell'azienda.")
      VARS!IECancelAll=True
      Return
    End If

    If oCldBase.ValCodiceDb(MASTRO_CLIENTI_1, strDitta, "TABMAST", "N", "", dttTmp, strPDC) Then
      If NTSCStr(dttTmp.Rows(0)!tb_tipomast) &lt;&gt; "C" Then 
        oCleImex.WriteLog("L'importazione documenti non può essere eseguita." &amp; _
                        " Il mastro " &amp; MASTRO_CLIENTI_1 &amp; " non è del tipo 'C' - clienti.")
        VARS!IECancelAll=True
        Return
      End If
    Else
      oCleImex.WriteLog("L'importazione documenti non può essere eseguita." &amp; _
                        " Il mastro " &amp; MASTRO_CLIENTI_1 &amp; " non è esistente.")
      VARS!IECancelAll=True
      Return
    End If

    If oCldBase.ValCodiceDb(MASTRO_CLIENTI_2, strDitta, "TABMAST", "N", "", dttTmp, strPDC) Then
      If NTSCStr(dttTmp.Rows(0)!tb_tipomast) &lt;&gt; "C" Then 
        oCleImex.WriteLog("L'importazione documenti non può essere eseguita." &amp; _
                        " Il mastro " &amp; MASTRO_CLIENTI_2 &amp; " non è del tipo 'C' - clienti.")
        VARS!IECancelAll=True
        Return
      End If
    Else
      oCleImex.WriteLog("L'importazione documenti non può essere eseguita." &amp; _
                        " Il mastro " &amp; MASTRO_CLIENTI_2 &amp; " non è esistente.")
      VARS!IECancelAll=True
      Return
    End If

    If Not oCldBase.ValCodiceDb(NTSCStr(CODPAGA_1), "", "TABPAGA", "N", "", dttTmp) Then
      oCleImex.WriteLog("L'importazione documenti  non può essere eseguita." &amp; _
                        " Il codice pagamento " &amp; CODPAGA_1 &amp; " non è esistente.")
      VARS!IECancelAll=True
      Return
    End If

    If Not oCldBase.ValCodiceDb(NTSCStr(CODPAGA_2), "", "TABPAGA", "N", "", dttTmp) Then
      oCleImex.WriteLog("L'importazione documenti  non può essere eseguita." &amp; _
                        " Il codice pagamento " &amp; CODPAGA_2 &amp; " non è esistente.")
      VARS!IECancelAll=True
      Return
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAInit':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>21</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAConto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAConto As Integer
  Dim lProgr As Integer = 0
  Dim lConto As Integer = 0
  Dim strSQL As String = ""
  Dim dttTmp As DataTable = Nothing
  Dim dtUltagg As Date = Nothing
  Dim nMastro As Integer = 0
  Try
    dtUltagg = NTSCDate(Date.Now)
    If NTSCStr(VARS!IeIn1Row!piva).Length = 0 Then
      lConto = REA_CONTO 
      Return lConto 
    End If
    If Not IsNumeric(NTSCStr(VARS!IeIn1Row!piva)) Then
      lConto = REA_CONTO 
      Return lConto 
    End If

    'Controlla se esiste in anagrafica
    strSQL = "SELECT an_conto FROM anagra WHERE an_pariva = '" &amp; NTSCStr(VARS!IeIn1Row!piva) &amp; "'"  &amp; _
            " AND codditt = " &amp; CSTRSql(strDitta)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp.Rows.Count &gt; 0 Then
      lConto = NTSCInt(dttTmp.Rows(0)!an_conto)
      Return lConto 
    End If

    'Non esiste in anagra quindi è da creare
    lProgr = oCldBase.LegNuma(strDitta, "CC", "", MASTRO_CLIENTI_1, True)
    If lProgr = 0 Then
        oCleImex.WriteLog("L'importazione documento non può essere eseguita." &amp; _
                        " Impossibile determinare il codice del cliente sul mastro " &amp; MASTRO_CLIENTI_1)
        VARS!IeCancelRow = True
        Return lConto 
    End If

    If lProgr &lt; 10000 Then
      lConto = MASTRO_CLIENTI_1 * MOLTIPLICA_CONTO + lProgr
      nMastro = MASTRO_CLIENTI_1 
    Else
      lProgr = oCldBase.LegNuma(strDitta, "CC", "", MASTRO_CLIENTI_2, True)
      If lProgr = 0 Then 
        oCleImex.WriteLog("L'importazione documento non può essere eseguita." &amp; _
                        " Impossibile determinare il codice del cliente sul mastro " &amp; MASTRO_CLIENTI_2)
        VARS!IeCancelRow = True
        Return lConto
      End if
      lConto = MASTRO_CLIENTI_2 * MOLTIPLICA_CONTO + lProgr
      nMastro = MASTRO_CLIENTI_2
    End If

    'SALVA il conto 
    'Insert into ANAGRA
    strSQL = "INSERT INTO anagra" &amp; _
                 " (codditt, an_conto, an_tipo, an_descr1, an_descr2, an_codfis, an_pariva, an_indir, an_cap" &amp; _
                 ", an_citta, an_prov, an_ultagg, an_dtaper, an_codpcon, an_codmast, an_codpag " &amp; _
                 ", an_opnome, an_partite, an_scaden, an_siglaric, an_privacy, an_usaem)" &amp; _
                 " VALUES (" &amp; CStrSQL(strDitta) &amp;  ", " &amp; lConto &amp;  ", 'C', " &amp; _
                 CStrSQL(Left(NTSCStr(VARS!IeIn1Row!anagraf), 30)) &amp; _
                 ", " &amp; CStrSQL(Mid(NTSCStr(VARS!IeIn1Row!anagraf), 31)) &amp; _
                 ", " &amp; CStrSQL(NTSCStr(VARS!IeIn1Row!codfisc)) &amp; _
                 ", " &amp; CStrSQL(NTSCStr(VARS!IeIn1Row!piva)) &amp; _
                 ", " &amp; CStrSQL(Left(NTSCStr(VARS!IeIn1Row!indir), 35)) &amp; _
                 ", " &amp; CStrSQL(NTSCStr(VARS!IeIn1Row!cap)) &amp; _
                 ", " &amp; CStrSQL(Left(NTSCStr(VARS!IeIn1Row!citta), 28)) &amp; _
                 ", " &amp; CStrSQL(NTSCStr(VARS!IeIn1Row!prov)) &amp; _
                 ", " &amp; CDataOraSQL(dtUltagg) &amp; ", " &amp; CDataSQL(dtUltagg) &amp; _
                 ", " &amp; CStrSQL(strPDC) &amp; ", " &amp; nMastro &amp; _
                 ", " &amp; CODPAGA_1 &amp;  ", " &amp; CStrSQL(oApp.User.Nome) &amp; _
                 ", " &amp; CStrSQL(strPartite) &amp; ", " &amp; CStrSQL(strScad) &amp; _
                 ", " &amp; CStrSQL(Left(NTSCStr(VARS!IeIn1Row!anagraf), 20)) &amp; ", 'S', 'S')"
    oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)  


    oCldBase.AggNuma(strDitta, "CC", "", lConto/MOLTIPLICA_CONTO, lProgr, True, False, "")

    'INSERT into ANATRIC da MASTRIC
    strSQL = "INSERT INTO anatric (codditt, ant_conto, ant_codtric, ant_kpcrd, ant_kpcra)" &amp; _
             " SELECT " &amp; CStrSQL(strDitta) &amp; ", " &amp; lConto &amp; "," &amp; _
             " mst_codtric, mst_kpcrd, mst_kpcra FROM mastric" &amp; _
             " WHERE mst_codpcon = " &amp; CStrSQL(strPDC) &amp; _
             " AND mst_codmast = " &amp; nMastro
    oCldBase.Execute(strSQL, CLE__APP.DBTIPO.DBAZI) 
    Return lConto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAConto':" &amp; ex.Message)
    VARS!IeCancelRow = True
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>22</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivDescr1</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivDescr1 As String
  Dim strDescr As String = ""

  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = Left(NTSCStr(VARS!IeIn1Row!anagraf), 30)
    End If

  Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivDescr1':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>23</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivDescr2</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivDescr2 As String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = Mid(NTSCStr(VARS!IeIn1Row!anagraf), 31)
    End If

  Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivDescr2':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>24</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPRivIndir</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPRivIndir As String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = Left(NTSCStr(VARS!IeIn1Row!indir), 35)
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPRivIndir':" &amp; ex.Message)  
End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>25</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivProv</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivProv As String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = NTSCStr(VARS!IeIn1Row!prov)
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivProv':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>26</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivCitta</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivCitta As String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = Left(NTSCStr(VARS!IeIn1Row!citta), 28)
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivCitta':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>27</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivCap</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivCap As String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = NTSCStr(VARS!IeIn1Row!cap)
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivCap':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>28</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>REAPrivCodfisc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function REAPrivCodfisc as String
  Dim strDescr As String = ""
  Try
    If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr = NTSCStr(VARS!IeIn1Row!codfisc)
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REAPrivCodfisc':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>29</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>REATestmagc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub REATestmagc
  Dim strSQL As String = ""
  Try
    strsql = "INSERT INTO testmagc (tm_tipork, tm_anno, tm_serie, tm_numdoc, tm_ccontr_1, tm_ccontr_2, tm_ccontr_3, tm_ccontr_4," &amp; _
             " tm_impcont_1, tm_impcont_2, tm_impcont_3, tm_impcont_5)" &amp; _
             " VALUES (" &amp; CStrSQL(NTSCStr(VARS!IeOu1Row!tm_tipork)) &amp; ", " &amp; NTSCInt(VARS!IeOu1Row!tm_anno) &amp; _
             ", " &amp; CStrSQL(NTSCStr(VARS!IeOu1Row!tm_serie)) &amp; ", " &amp; NTSCInt(VARS!IeOu1Row!tm_numdoc) &amp; ", " &amp; _
             NTSCInt(VARS!IeOu1Row!tm_codiva_1) &amp; ", " &amp; NTSCInt(VARS!IeOu1Row!tm_codiva_2) &amp; ", " &amp; _
             NTSCInt(VARS!IeOu1Row!tm_codiva_3)  &amp; ", " &amp; NTSCInt(VARS!IeOu1Row!tm_codiva_4) &amp; ", " &amp; _
             CDblSQL(NTSCDec(VARS!IeOu1Row!tm_imponib_1)) &amp; ", " &amp;  CDblSQL(NTSCDec(VARS!IeOu1Row!tm_imponib_2)) &amp; ", " &amp; _
             CDblSQL(NTSCDec(VARS!IeOu1Row!tm_imponib_3)) &amp; ", " &amp;  CDblSQL(NTSCDec(VARS!IeOu1Row!tm_imponib_4))  &amp; ")"
     oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)  
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'REATestmagc':" &amp; ex.Message)
    VARS!IeCancelRow = True
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>30</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SeparatePathAndFileName</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>'Given a fully qualified filename, returns the path portion and the file
'   portion.
Public Sub SeparatePathAndFileName(FullPath, Path, FileName)

    Dim nSepPos
    Dim nSepPos2
    Dim fUsingDriveSep

    nSepPos = InStrRev(FullPath, "\")
    nSepPos2 = InStrRev(FullPath, "/")
    If nSepPos2 &gt; nSepPos Then
        nSepPos = nSepPos2
    End If
    nSepPos2 = InStrRev(FullPath, ":")
    If nSepPos2 &gt; nSepPos Then
        nSepPos = nSepPos2
        fUsingDriveSep = True
    End If

    If nSepPos = 0 Then
        'Separator was not found.
        Path = "C:\"
        FileName = FullPath
    Else
        If fUsingDriveSep Then
            Path = Left(FullPath, nSepPos)
        Else
            Path = Left(FullPath, nSepPos - 1)
        End If
        FileName = Mid(FullPath, nSepPos + 1)
    End If
End Sub

</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>31</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>sub SaremaInit
  'esce se documento negativo
  if iein1tm_totdoc &lt;= 0 then
    msgbox "Attenzione! corrispettivo con totale documento negativo o pari a zero. Stampa non possibile.", vbexclamation,"Stampa su reg. di cassa SAREMA" 
    iecancelall = true
    ieexitfalse = true 
    exit sub
  end if   
  'esce se abbuono negativo
  if iein1tm_abbuono &lt; 0 then
    msgbox "Attenzione! corrispettivo con abbuono negativo. Stampa non possibile.", vbexclamation,"Stampa su reg. di cassa SAREMA" 
    iecancelall = true
    ieexitfalse = true 
    exit sub
  end if   
end sub</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>32</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaAbbuoni</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaAbbuoni

  'Scarta la riga se quantità o prezzo a zero
  If IeIn1Prezzo = 0 Or IeIn1mm_quant = 0 Then
    IeCancelRow = True
    Exit Sub 
  End If

  'Scarta la riga se ci sono prezzi negativi
  If IeIn1Prezzo &lt; 0 Then
    MsgBox "ATTENZIONE! Riga " &amp; IeIn1mm_riga &amp; ", articolo " &amp; UCase(IeIn1mm_descr) &amp; " con prezzo negativo. Riga scartata dalla stampa dello scontrino.", vbExclamation,"Stampa su reg. di cassa SAREMA" 
    IeCancelRow = True
    Exit Sub 
  End If

  'Scarta le righe con sconti negativi
  If IeIn1tm_scont1 &lt; 0 Or IeIn1tm_scont2 &lt; 0 Or IeIn1tm_scopag &lt; 0 Or IeIn1mm_scont1 &lt; 0 Or IeIn1mm_scont2 &lt; 0 Or IeIn1mm_scont3 &lt; 0 Or IeIn1mm_scont4 &lt; 0 Or IeIn1mm_scont5 &lt; 0 Or IeIn1mm_scont6 &lt; 0 Then 
    MsgBox "ATTENZIONE! Riga " &amp; IeIn1mm_riga &amp; ", articolo " &amp; UCase(IeIn1mm_descr) &amp; " con uno o più sconti negativi (maggiorazioni). Riga scartata dalla stampa dello scontrino.", vbExclamation,"Stampa su reg. di cassa SAREMA" 
    IeCancelRow = True
    Exit Sub
  End If

  'Controllo righe speciali RETAIL: Abbuono/sconto, Subtotale
  If Not IsNull(IeIn1mms_tiporiga) then

    'Per le righe ABBUONO e SCONTO A VALORE le tratta allo stesso modo 
    'insendo uno sconto a valore pari al Prezzo (già x 100) * -1
    If IeIn1mms_tiporiga = "A" Or IeIn1mms_tiporiga = "S" Then
      objImex.WriteFileExport Ie1NumeroFile, "COUP,V" &amp; Int(IeIn1Prezzo) &amp; ";"
      IeCancelRow = True
    End If

    'Le righe SUBTOTALE le scarta
    If IeIn1mms_tiporiga = "Z" Then
      IeCancelRow = True
    End If

  End If

End Sub</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>33</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaSconti</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaSconti
Dim bScontoSingolo, dScont
Dim dValoreLordo, dValoreNetto, dValoreSconto

  'Non fa nulla se non ci sono sconti
  If IeIn1tm_scont1 = 0 And IeIn1tm_scont2 = 0 And IeIn1tm_scopag = 0 And IeIn1mm_scont1 = 0 And IeIn1mm_scont2 = 0 And IeIn1mm_scont3 = 0 And IeIn1mm_scont4 = 0 And IeIn1mm_scont5 = 0 And IeIn1mm_scont6 = 0 Then 
    Exit Sub
  End if
  
  'Determina se c'è uno o più sconti
  bScontoSingolo = True
  dScont = Cdbl(0)
  If IeIn1tm_scont1 &gt; 0 Then
    dScont = IeIn1tm_scont1
  End If
  If IeIn1tm_scont2 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1tm_scont2
  End If
  If IeIn1tm_scopag &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1tm_scopag
  End If
  If IeIn1mm_scont1 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont1
  End If
  If IeIn1mm_scont2 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont2
  End If
  If IeIn1mm_scont3 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont3
  End If
  If IeIn1mm_scont4 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont4
  End If
  If IeIn1mm_scont5 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont5
  End If
  If IeIn1mm_scont6 &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = IeIn1mm_scont6
  End If

  'Se c'è un solo sconto lo applica con una DISC,%
  If bScontoSingolo And dScont &gt; 0 Then
    dScont = ArrDbl(dScont, 2) 'Comunque deve essere già a 2
    objImex.WriteFileExport Ie1NumeroFile, "DISC,%" &amp; ConvDblSQL(dScont) &amp; ";"
  End If
  
  'Se ci sono più sconti di trasforma a valore e li applica con una COUP,V
  'Questo evita inevitabili problemi di differenze dovute ad arrotondamenti 
  If Not bScontoSingolo Then
    dValoreNetto = ArrDbl(ArrDbl((IeIn1Prezzo / 100) * IeIn1mm_quant * (100 - IeIn1mm_scont1) / 100 * (100 - IeIn1mm_scont2) / 100 * (100 - IeIn1mm_scont3) / 100 * (100 - IeIn1mm_scont4) / 100 * (100 - IeIn1mm_scont5) / 100 * (100 - IeIn1mm_scont6) / 100, 2) * (100 - IeIn1tm_scont1) / 100 * (100 - IeIn1tm_scont2) / 100 * (100 - IeIn1tm_scopag) / 100, 2)
    dValoreLordo = ArrDbl((IeIn1Prezzo / 100) * IeIn1mm_quant, 2)
    dValoreSconto = ArrDbl(dValoreLordo - dValoreNetto, 2)
    If dValoreSconto &gt; 0 Then
      objImex.WriteFileExport Ie1NumeroFile, "COUP,V" &amp; dValoreSconto * 100 &amp; ";"
    End If
  End If

End Sub</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>34</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaEnd</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaEnd
  objImex.WriteFileExport Ie1NumeroFile, "CLER,C001;"
  if iein1tm_abbuono &gt; 0 then
    objImex.WriteFileExport Ie1NumeroFile, "COST,V" &amp; cstr(iein1tm_abbuono * 100) &amp;  ";" 
  end if
  objImex.WriteFileExport Ie1NumeroFile, "CASH;"
End Sub</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>35</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaRTS1</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>sub SaremaRTS1
dim objIO, bFine
  'Crea nella cartella dove viene creato il file dati
  'il file SR_START.001 (1=COM1) con la password di RTS 
  set objIO=CreateObject("BS__IOST.CLS__IOST")
  objIO.FileCopy "c:\programmi\RTS wpos1\SR_STARX.001", "c:\programmi\RTS wpos1\SR_START.001"
  Do
    bFine = True
    If objIO.LastError &lt;&gt; 0 Then
      If MsgBox("Errore durante la rimonima del file C:\Programmi\RTS wpos1\SR_STARX.001" &amp; ": " &amp; objio.ErrorDescr &amp; Chr(13) &amp; Chr(10) &amp; Chr(13) &amp; Chr(10) &amp; "Riprovare?", 36, "Messaggio di Business") = 6 Then
        bFine = False
      Else
        Set objIO = Nothing
        IeCancelAll=true 
        Exit Sub
      End If
    End If
  Loop Until bFine 
  set objio=nothing
end sub</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>36</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaReparto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaReparto
  If IeIn1ar_reparto = 0 Then
    SaremaReparto = 1
  Else
    SaremaReparto = IeIn1ar_reparto
  End If
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>37</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaQuant</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaQuant
dim dQuant
  dQuant = CDbl(Abs(IeIn1mm_quant))
  if dQuant &gt; 9999 then
    MsgBox "Attenzione! impossibile stampare su registratore di cassa quantità superiori a 9999 (quantità indicata in riga: " &amp; IeIn1mm_quant &amp; "). Questa riga verrà scartata dalla stampa.", vbexclamation,"Stampa su reg. di cassa SAREMA" 
    iecancelrow = true 
  end if  
  SaremaQuant = cstr(convdblsql(dquant))
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>38</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaReso</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaReso

  SaremaReso=""
  If IeIn1mm_quant&lt;0 then
    SaremaReso=",R"
  End If



End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>40</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>AdoExecuteCP2</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Sub AdoExecuteCP2(fLocale, strSQL, lRecordsAffected)
  Dim lRecaff
  If fLocale = True Then fLocale = False
  Select Case fLocale
    Case bsDbAzienda
      gacn.Execute strSQL, lRecaff
    Case bsDbArcproc
      gacnAP.Execute strSQL, lRecaff
  End Select
  lRecordsAffected = lRecaff
End Sub </pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>41</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ApriAdoRecordsetCP2</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>Sub ApriAdoRecordsetCP2(fLocale, strSQL, dynRecordset, nRSType)
  Const adOpenForwardOnly = 0
  Const adOpenKeyset = 1
  Const adOpenStatic = 3
  Const adLockReadOnly = 1
  Const adLockOptimistic = 3
  Const adUseClient = 3
  Dim nLock
  Dim nCursorT
  Dim nCursorLoc
  Set dynRecordset = CreateObject("ADODB.RecordSet") 
  If fLocale = True Then fLocale = False
  Select Case nRSType
    Case bsOpenForwardOnly
      nCursorT = adOpenForwardOnly
      nCursorLoc = adUseClient
      nLock = adLockReadOnly
    Case bsOpenStatic
      nCursorT = adOpenStatic
      nCursorLoc = adUseClient
      nLock = adLockReadOnly
    Case bsOpenKeyset
      nCursorT = adOpenKeyset
      nCursorLoc = adUseClient
      nLock = adLockOptimistic
    Case bsOpenKeysetReadOnly
      nCursorT = adOpenKeyset
      nCursorLoc = adUseClient
      nLock = adLockReadOnly
    Case bsOpenStaticOptimistic
      nCursorT = adOpenStatic
      nCursorLoc = adUseClient
      nLock = adLockOptimistic
  End Select
  Select Case fLocale
    Case False
      dynRecordset.CursorLocation = nCursorLoc
      dynRecordset.Open strSQL, gacn, nCursorT, nLock
    Case 2
      dynRecordset.CursorLocation = nCursorLoc
      dynRecordset.Open strSQL, gacnAP, nCursorT, nLock
    Case 3
      dynRecordset.Open strSQL, gacnCmb, adOpenStatic, adLockReadOnly
  End Select

End Sub </pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>42</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CercaPrezzoCP2</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>'PARAMETRI
'INPUT:  strCodditt
'INPUT:  strCodart
'INPUT:  nCodlavo
'INPUT:  lConto
'INPUT:  nListino
'INPUT:  strUnmisin
'INPUT:  nFase
'INPUT:  strTipoVal
'INPUT:  bConspromo
'INPUT:  nCodpromoin
'INPUT:  lLottoin
'INPUT:  dtDatdoc
'INPUT:  nCodvalu
'INPUT:  dQuant
'OUTPUT: dPrezzo
'OUTPUT: dPrelist
'OUTPUT: nCodpromo
'OUTPUT: strPrzNet
'OUTPUT: nPerqta
'OUTPUT: dDaQuant
'OUTPUT: dAquant
'OUTPUT: dPerqta
'OUTPUT: strUnmisOut
'OUTPUT: strTipovalOut
'OUTPUT: dtDataggOut  
'INPUT:  vDum        -&gt; cod. Casella (passare una stringa; " " = se non indicato)

Function CercaPrezzoCP2(ByVal strCodditt, ByVal strCodart, ByVal nCodlavo, ByVal lConto, _
                        ByVal nListino, ByVal strUnmisin, ByVal nFase, ByVal strTipoVal, _
                        ByVal bConspromo, ByVal nCodpromoin, ByVal lLottoin, ByVal dtDatdoc, _
                        ByVal nCodvalu, ByVal dQuant, _
                        dPrezzo, dPrelist, nCodpromo, strPrzNet, nPerqta, dDaQuant, dAQuant, _
                        dPerQta, strUnMisOut, strTipoValOut, dtDataggOut, vDum)
  Dim strCodcas   
  Dim strCoda, strGesvar, strCodvar1, strCodroot, strPrevar
  Dim strUnmis, strConfez2, strUnMis2, dQtacon2, dConver
  Dim strSQL, snaTmp
  Dim dQuantabs 
  Dim dArPerqta
  Dim strSQLUM
    
  CercaPrezzoCP2 = False
  
  'Azzera risultati
  dPrezzo = 0
  dPrelist = 0
  nCodpromo = 0
  'Setto le altre variabili
  dDaQuant = 0
  dAquant = 9999999999
  dPerqta = 1
  strUnmisOut = strUnmisin
  strTipovalOut = strTipoval 'in via provvisoria
  dtDatAggOut = #1/1/1900# 
  
  strCodCas = vDum
  
  'Per comportamento diverso articoli a varianti
  strCoda = strCodart
  strGesvar = "N"
  strPrevar = "S"
  strCodroot = ""
  strCodvar1 = ""
  '---
  strUnmis = ""
  strConfez2 = ""
  dQtacon2 = 0
  strUnMis2 = ""
  dConver = 0
  
  'Prende in valore assoluto di dquant
  dQuantabs = Abs(dQuant)
  If dQuantabs = 0 Then dQuantabs = 1
  'e setta a non gestione prezzi per qta ...
  nPerqta = 1 'bsPrSetnoqta
  'prima verifica se l'articolo è gestito a varianti
  strSQL = " SELECT ar_gesvar, ar_prevar, ar_codroot, ar_codvar1, ar_perqta, ar_gesfasi, " &amp; _
           " ar_unmis, ar_confez2, ar_qtacon2, ar_unmis2, ar_conver" &amp; _
           " FROM artico " &amp; _
           " WHERE codditt = " &amp; convstrnullsql(strCodditt) &amp; _
           " and ar_codart = " &amp; convstrnullsql(strCodart) 
  ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
  If Not snaTmp.eof Then
    strGesvar = snaTmp("ar_gesvar")
    strPrevar = snaTmp("ar_prevar")
    strCodroot = ConvNullStr(snaTmp("ar_codroot"))
    strCodvar1 = ConvNullStr(snaTmp("ar_codvar1"))
    dArperqta = snaTmp("ar_perqta")
    If strGesvar = "S" Then ' se a varianti cambia la base di calcolo
      Select Case strPrevar
        Case "N": strCoda = strCodroot
        Case "S": strCoda = strCodart
        Case "1": strCoda = strCodroot &amp; strCodvar1
      End Select
    End If
    'neutralizza l'eventuale campo fase passato nella chiamata nell'ipotesi che l'articolo non sia gestito a fasi
    If snaTmp("ar_gesfasi") = "N" Then
      nFase = 0
    End If
    strUnmis = snaTmp("ar_unmis")
    strConfez2 = ConvNullStr(snaTmp("ar_confez2"))
    dQtacon2 = snaTmp("ar_qtacon2")
    strUnMis2 = ConvNullStr(snaTmp("ar_unmis2"))
    dConver = snaTmp("ar_conver")
  End If
  snaTmp.close
  Set snaTmp = Nothing
  
  'Per evitare errore 11 'division by zero' se il fattore di cenversione è zero sull'articolo
  If dConver = 0 Then dConver = 1
  
  strSQLUM = ""
  If Trim(strUnmisin) = "" Then
    strSQLUM = " And (lc_unmis = ' ' Or lc_unmis = " &amp; ConvStrNullSql(strUnmis) &amp; ")"
  Else
    strSQLUM = " And lc_unmis = " &amp; ConvStrNullSql(strUnmisin)
  End If
  
  'Cerca il prezzo di listino nella valuta zero (lire od euro...)(prelist è sempre relativo alla valuta zero!!)
  'da memorizzare in movmag/movord per statistiche sugli sconti medi applicati  
  If nListino &gt; 0 Then
    strSQL = " SELECT TOP 1 lc_prezzo, lc_daquant, lc_aquant " &amp; _
             " FROM listini" &amp; _
             " WHERE lc_codart = '" &amp; strCoda &amp; "'" &amp; _
             " AND lc_conto = 0" &amp; _
             " AND lc_codlavo = " &amp; nCodlavo &amp; _
             " AND lc_listino = " &amp; nListino &amp; _
             " AND lc_codvalu = 0" &amp; _
             " AND lc_codtpro = 0" &amp; _
             " AND lc_datagg &lt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_datscad &gt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_daquant &lt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_aquant &gt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_fase = " &amp; nFase &amp; _
             " AND lc_codcas = " &amp; ConvStrNullSql(strCodCas) &amp; _
             " AND codditt = " &amp; ConvStrNullSql(strCodditt)
    strSQL = strSQL &amp; strSQLUM
    strSQL = strSQL &amp; " ORDER BY lc_datagg DESC, lc_daquant"
    ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
    If Not snaTmp.EOF Then
      If Not (snaTmp("lc_daquant") = 0 And snaTmp("lc_aquant") = 9999999999) Then
        nPerqta = 2 'bsPrSetsiqta
      End If
      dPrelist = snaTmp("lc_prezzo")
    End If
    snaTmp.Close
    Set snaTmp = Nothing
  End If

  'se val. listino generico salta la valorizz. a prezzo speciale
  If strTipoval = "G" Then 
    'proseguo
  Else
    ' ora iniza la ricerca del prezzo vero e proprio ...
    ' cerca il prezzo richiesto o ultimo costo (ma nella valuta indicata!!!)
    ' per quel conto , se esiste
    If (nListino = 0 Or nListino &gt; 0) And lConto &gt; 0 Then
      strSQL = " SELECT TOP 1 lc_prezzo, lc_codtpro, lc_daquant, lc_aquant, lc_perqta," &amp; _
               " lc_unmis, lc_netto, lc_datagg " &amp; _
               " FROM listini" &amp; _
               " WHERE codditt = " &amp; ConvStrNullSql(strCodditt) &amp; _
               " AND lc_codart = '" &amp; strCoda &amp; "'" &amp; _
               " AND (lc_conto = " &amp; lConto &amp; ")" &amp; _
               " AND lc_codlavo = " &amp; nCodlavo &amp; _
               " AND (lc_listino = 0)" &amp; _
               " AND lc_codvalu = " &amp; nCodvalu &amp; _
               " AND lc_datagg &lt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
               " AND lc_datscad &gt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
               " AND lc_daquant &lt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
               " AND lc_aquant &gt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
               " AND lc_fase = " &amp; nFase &amp; _
               " AND lc_codcas = " &amp; ConvStrNullSql(strCodCas)
      If True Then 'gbPromozionicomeRel10
        If Not bConspromo Then
          strSQL = strSQL &amp; " AND lc_codtpro = 0"
        Else
          If nCodpromoin &gt; 0 Then
            strSQL = strSQL &amp; " AND lc_codtpro = " &amp; nCodpromoin
          End If
        End If
      Else
        If nCodpromoin &gt; 0 Then
          strSQL = strSQL &amp; " AND (lc_codtpro = " &amp; nCodpromoin &amp; " OR lc_codtpro = 0)"
        Else
          strSQL = strSQL &amp; " AND lc_codtpro = 0"
        End If
      End If
      strSQL = strSQL &amp; strSQLUM
      strSQL = strSQL &amp; " ORDER BY lc_codtpro DESC, lc_datagg DESC, lc_daquant"
      ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
      If Not snaTmp.EOF Then
        dPrezzo = snaTmp("lc_prezzo") 'ArrDbl(snaTmp("lc_prezzo"), objStd.TrovaNdecSuPrzUn(nCodvalu))
        nCodpromo = snaTmp("lc_codtpro")
        strPrzNet = snaTmp("lc_netto")
        strTipovalOut = "S"
        If Not (snaTmp("lc_daquant") = 0 And snaTmp("lc_aquant") = 9999999999) Then
          nPerqta = 2 'bsPrSetsiqta
        End If
        dDaQuant = snaTmp("lc_daquant")
        dAquant = snaTmp("lc_aquant")
        dPerqta = snaTmp("lc_perqta")
        strUnmisOut = snaTmp("lc_unmis")
        If Not IsNull(snaTmp("lc_datagg")) Then dtDatAggOut = snaTmp("lc_datagg")
      End If
      snaTmp.Close
      Set snaTmp = Nothing
      If dPrezzo &lt;&gt; 0 Then
        CercaPrezzoCP2 = True
        Exit Function
      End If
      If strTipoval = "S" Then
        CercaPrezzoCP2 = True
        Exit Function
      End If
    End If
  End If

  'Adesso il listino generico con listino &gt; 0
  If nListino &gt; 0 Then
    strSQL = " SELECT TOP 1 lc_prezzo, lc_codtpro, lc_daquant, lc_aquant, lc_perqta," &amp; _
             " lc_unmis, lc_netto, lc_datagg " &amp; _
             " FROM listini" &amp; _
             " WHERE codditt = " &amp; ConvStrNullSql(strCodditt) &amp; _
             " AND lc_codart = '" &amp; strCoda &amp; "'" &amp; _
             " AND (lc_conto = 0)" &amp; _
             " AND lc_codlavo = " &amp; nCodlavo &amp; _
             " AND (lc_listino = " &amp; nListino &amp; ")" &amp; _
             " AND lc_codvalu = " &amp; nCodvalu &amp; _
             " AND lc_datagg &lt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_datscad &gt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_daquant &lt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_aquant &gt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_fase = " &amp; nFase &amp; _
             " AND lc_codcas = " &amp; ConvStrNullSql(strCodCas)
    If True Then 'gbPromozionicomeRel10 Then
      If Not bConspromo Then
        strSQL = strSQL &amp; " AND lc_codtpro = 0"
      Else
        If nCodpromoin &gt; 0 Then
          strSQL = strSQL &amp; " AND lc_codtpro = " &amp; nCodpromoin
        End If
      End If
    Else
      If nCodpromoin &gt; 0 Then
        strSQL = strSQL &amp; " AND (lc_codtpro = " &amp; nCodpromoin &amp; " OR lc_codtpro = 0)"
      Else
        strSQL = strSQL &amp; " AND lc_codtpro = 0"
      End If
    End If
    strSQL = strSQL &amp; strSQLUM
    strSQL = strSQL &amp; " ORDER BY lc_codtpro DESC, lc_datagg DESC, lc_daquant"
    ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
    If Not snaTmp.EOF Then
      dPrezzo =  snaTmp("lc_prezzo") 'ArrDbl(snaTmp("lc_prezzo"), objStd.TrovaNdecSuPrzUn(nCodvalu))
      nCodpromo = snaTmp("lc_codtpro")
      strPrzNet = snaTmp("lc_netto")
      strTipovalOut = "G"
      If Not (snaTmp("lc_daquant") = 0 And snaTmp("lc_aquant") = 9999999999) Then
        nPerqta = 2 'bsPrSetsiqta
      End If
      dDaQuant = snaTmp("lc_daquant")
      dAquant = snaTmp("lc_aquant")
      dPerqta = snaTmp("lc_perqta")
      strUnmisOut = snaTmp("lc_unmis")
      If Not IsNull(snaTmp("lc_datagg")) Then dtDatAggOut = snaTmp("lc_datagg")
    End If
    snaTmp.Close
    Set snaTmp = Nothing
    If dPrezzo &lt;&gt; 0 Then 
      CercaPrezzoCP2 = True
      Exit Function
    End If
  End If

  'adesso se cercavo un prezzo in valuta listino &gt; 0 e non l'ho trovato,
  'cerca ev. listino in lire/euro corrispondente e lo trasformo, se lo trovo, in valuta
  If dPrezzo = 0 And nListino &gt; 0 And nCodvalu &gt; 0 Then
    strSQL = " SELECT TOP 1 lc_prezzo, lc_codtpro, lc_daquant, lc_aquant, lc_perqta," &amp; _
             " lc_unmis, lc_fase, lc_netto, lc_datagg " &amp; _
             " FROM listini" &amp; _
             " WHERE codditt = " &amp; ConvStrNullSql(strCodditt) &amp; _
             " AND lc_codart = '" &amp; strCoda &amp; "'" &amp; _
             " AND (lc_conto = 0)" &amp; _
             " AND lc_codlavo = " &amp; nCodlavo &amp; _
             " AND (lc_listino = " &amp; nListino &amp; ")" &amp; _
             " AND lc_codvalu = 0" &amp; _
             " AND lc_datagg &lt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_datscad &gt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; _
             " AND lc_daquant &lt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_aquant &gt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
             " AND lc_fase = " &amp; nFase &amp; _
             " AND lc_codcas = " &amp; ConvStrNullSql(strCodCas)
    If True Then 'gbPromozionicomeRel10 Then
      If Not bConspromo Then
        strSQL = strSQL &amp; " AND lc_codtpro = 0"
      Else
        If nCodpromoin &gt; 0 Then
          strSQL = strSQL &amp; " AND lc_codtpro = " &amp; nCodpromoin
        End If
      End If
    Else
      If nCodpromoin &gt; 0 Then
        strSQL = strSQL &amp; " AND (lc_codtpro = " &amp; nCodpromoin &amp; " OR lc_codtpro = 0)"
      Else
        strSQL = strSQL &amp; " AND lc_codtpro = 0"
      End If
    End If
    strSQL = strSQL &amp; strSQLUM
    strSQL = strSQL &amp; " ORDER BY lc_codtpro DESC, lc_datagg DESC, lc_daquant"
    ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
    If Not snaTmp.EOF Then
      dPrezzo = snaTmp("lc_prezzo") 'ArrDbl(snaTmp("lc_prezzo"), objStd.TrovaNdecSuPrzUn(0))
      nCodpromo = snaTmp("lc_codtpro")
      strPrzNet = snaTmp("lc_netto")
      If Not (snaTmp("lc_daquant") = 0 And snaTmp("lc_aquant") = 9999999999) Then
        nPerqta = 2 'bsPrSetsiqta
      End If
      dDaQuant = snaTmp("lc_daquant")
      dAquant = snaTmp("lc_aquant")
      dPerqta = snaTmp("lc_perqta")
      strUnmisOut = snaTmp("lc_unmis")
      If Not IsNull(snaTmp("lc_datagg")) Then dtDatAggOut = snaTmp("lc_datagg")
    End If
    snaTmp.Close
    Set snaTmp = Nothing
    'SEMPLIFICAZIONE X SCRIPT    
    'If dPrezzo &lt;&gt; 0 And nCodvalu &lt;&gt; 0 Then
    '  dCambio = objStd.CercaCambioDiOggi(nCodvalu, dtDatdoc)
    '  If dCambio &lt;&gt; 0 Then
    '    dPrezzo = objStd.ConvPrezzoUnLireur(dPrezzo, nCodvalu, dtDatdoc, dCambio)
    '  Else
    '    'Se il cambio di oggi non esiste (dCambio=0) ritorna comuque zero
    '    dPrezzo = 0
    '  End If
    'End If
  End If ' fine ultimo caso

  CercaPrezzoCP2 = True
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>43</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CercaScontiCP2</pr_nome>
    <pr_preload>S</pr_preload>
    <pr_testo>'PARAMETRI
'INPUT:  strCodditt
'INPUT:  strCodart
'INPUT:  lConto
'INPUT:  nClscar
'INPUT:  nClscan
'INPUT:  strTipoVal
'INPUT:  bConspromo
'INPUT:  nCodpromoin
'INPUT:  dtDatdoc
'INPUT:  dQuant
'OUTPUT: dSc1
'OUTPUT: dSc2
'OUTPUT: dSc3
'OUTPUT: dSc4
'OUTPUT: dSc5
'OUTPUT: dSc6
'OUTPUT: nPromo
'INPUT:  strPrzNet
'OUTPUT: nPerqta
'OUTPUT: dDaQuant
'OUTPUT: dAquant
'OUTPUT: strUnmisOut
'OUTPUT: strTipovalOut

Function CercaScontiCP2(ByVal strCodditt, ByVal strCodart, ByVal lConto, ByVal nClscar, ByVal nClscan, _
                        ByVal strTipoval, ByVal bConspromo, ByVal nCodpromoin, ByVal dtDatdoc, _
                        ByVal dQuant, dSc1, dSc2, dSc3, dSc4, dSc5, dSc6, nPromo, ByVal strPrzNet, _
                        nPerqta, dDaQuant, dAquant, strUnmisOut, strTipovalOut)
  
  Dim strSQL 
  Dim snaTmp, dQuantabs
  Dim strCoda, strGesvar, strCodvar1, strCodroot, strPrevar
    
  CercaSconti = False
       
  'Azzera risultati
  dSc1 = 0
  dSc2 = 0
  dSc3 = 0
  dSc4 = 0
  dSc5 = 0
  dSc6 = 0
  
  'setta le altre var...
  nPromo = 0
  nPerqta = 1 'bsPrSetnoqta
  dDaQuant = 0
  dAquant = 9999999999
  strUnmisOut = ""
  strTipovalOut = " "
  
  'se prezzo netto esce ...
  If strPrzNet = "S" Then 
    CercaScontiCP2 = True
    Exit Function
  End If

  strCoda = strCodart
  strGesvar = "N"
  strPrevar = "S"
  strCodroot = ""
  strCodvar1 = ""
  'prende in valore assoluto di dquant
  dQuantabs = Abs(dQuant)
  If dQuantabs = 0 Then dQuantabs = 1
  'prima verifica se l'articolo è gestito a varianti
  If strCoda &lt;&gt; "" Then 
    strSQL = " SELECT ar_gesvar, ar_prevar, ar_codroot, ar_codvar1 " &amp; _
             " FROM artico " &amp; _
             " WHERE codditt = " &amp; ConvStrNullSql(strCodditt) &amp; _
             " AND ar_codart = '" &amp; strCodart &amp; "'"
    ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
    If Not snaTmp.EOF Then
      strGesvar = snaTmp("ar_gesvar")
      strPrevar = snaTmp("ar_prevar")
      strCodroot = ConvNullStr(snaTmp("ar_codroot"))
      strCodvar1 = ConvNullStr(snaTmp("ar_codvar1"))
      If strGesvar = "S" Then ' se  a varianti cambia la base di calcolo ..
        Select Case strPrevar
          Case "N": strCoda = strCodroot
          Case "S": strCoda = strCodart
          Case "1": strCoda = strCodroot &amp; strCodvar1
        End Select
      End If
    End If
    snaTmp.close
    Set snaTmp = Nothing
    ' adesso cerca sconto ..
  End If

  strSQL = " SELECT TOP 1 so_scont1, so_scont2, so_scont3, so_codtpro, so_daquant, so_aquant " &amp; _
           " FROM sconti " &amp; _
           " WHERE codditt = " &amp; ConvStrNullSql(strCodditt) &amp; _
           " AND (so_codart = '" &amp; strCoda &amp; "' OR so_codart = ' ') AND (so_conto = " &amp; lConto &amp; " OR so_conto = 0) " &amp; _
           " AND (so_clscan = " &amp; nClscan &amp; " OR so_clscan = 0) AND (so_clscar = " &amp; nClscar &amp; " OR so_clscar = 0) " &amp; _
           " AND so_datagg &lt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; " AND so_datscad &gt;= " &amp; ConvDataSQL(dtDatdoc, True, True) &amp; " " &amp; _
           " AND so_daquant &lt;= " &amp; ConvDblSQL(dQuantabs) &amp; " AND so_aquant &gt;= " &amp; ConvDblSQL(dQuantabs) &amp; _
           " ORDER BY so_codart DESC, so_conto DESC, so_clscan DESC, so_clscar DESC, so_datagg DESC, so_daquant"
  ApriAdoRecordsetCP2 False, strSQL, snaTmp, bsOpenStatic
  If Not snaTmp.EOF Then
    dSc1 = snaTmp("so_scont1")
    dSc2 = snaTmp("so_scont2")
    dSc3 = snaTmp("so_scont3")
    dSc4 = snaTmp("so_scont4")
    dSc5 = snaTmp("so_scont5")
    dSc6 = snaTmp("so_scont6")
    nPromo = snaTmp("so_codtpro")
    If Not (snaTmp("so_daquant") = 0 And snaTmp("so_aquant") = 9999999999) Then
      nPerqta = 2 'bsPrSetsiqta
    End If
  End If
  snaTmp.close
  Set snaTmp = Nothing

  CercaSconti = True
 
End Function</pr_testo>
    <pr_scriptnet>N</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>61</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ConadInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public lProgr As Integer = 0
Public dValorev As Decimal = 0d
Public oCldBase As CLD__BASE = Nothing
Sub ConadInit
  Try
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadInit':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>62</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadAddProgr</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadAddProgr As Integer
  Try
    lProgr = lProgr +1
    Return lProgr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadAddProgr':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>63</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadGetProgr</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadGetProgr As Integer
  Try
    Return lProgr 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadGetProgr':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>64</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadCodart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadCodart As String
  Dim strCodart As String = ""
  Try
    If NTSCStr(VARS!IeIn2Row!caf_codarfo).Length = 0 Then
      strCodart = Right("               " &amp; NTSCStr(VARS!IeIn2Row!mm_codart), 15)
    Else
      strCodart = Right("               " &amp; NTSCStr(VARS!IeIn2Row!caf_codarfo), 15)
    End If

    Return strCodart
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadCodart':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>65</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadPrezzo</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadPrezzo As Decimal
  Dim dPrezzo As Decimal = 0d
  Try
    If Not NTSCDec(VARS!IeIn2Row!mm_quant) = 0 Then
      If oApp.ValutaCorrente = "LIT" Then
        'azienda in lire
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 99 Then
          'FILCONAD in euro
          dValorev = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * Math.Abs(NTSCDec(VARS!IeIn2Row!mm_prezvalc)) _
                   / NTSCDec(VARS!IeIn2Row!mm_perqta) * (100 - NTSCDec(VARS!IeIn2Row!mm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont3)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont4)) / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont5)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont6)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scopag)) _
                   / 100, oCldBase.TrovaNdec(99))
          dPrezzo = ArrDbl(dValorev / Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * 1000d, 0)
        Else
          'FILCONAD in lire
          dPrezzo = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn2Row!mm_valore)) / Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * 100d, 0) 
        End If
      Else
        'azienda in euro
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 100 Then
          'FILCONAD in lire
          dValorev = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * Math.Abs(NTSCDec(VARS!IeIn2Row!mm_prezvalc)) _
                   / NTSCDec(VARS!IeIn2Row!mm_perqta) * (100 - NTSCDec(VARS!IeIn2Row!mm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont3)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont4)) / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont5)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn2Row!mm_scont6)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scopag)) _
                   / 100, oCldBase.TrovaNdec(100))
          dPrezzo = ArrDbl(dValorev / Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * 100d, 0)
        Else
        'FILCONAD in euro
          dPrezzo = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn2Row!mm_valore)) / Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * 1000d, 0) 
        End if
      End If
    End If

    Return dPrezzo
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadPrezzo':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>66</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadTipIva</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadTipIva As String
  Dim strTipiva As String = "2"
  Try
    If Not NTSCInt(VARS!IeIn2Row!tb_tipiva)= 0 Then
      Select Case NTSCInt(VARS!IeIn2Row!tb_tipiva)
        Case 1 
          strTipiva = " " 'imponibile
        Case 2
          strTipiva = "1" 'esente
        Case Else
          strTipiva = "2" 'escluso
      End Select
    End If

    Return strTipiva
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadTipIva':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>67</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadTipoCess</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadTipoCess As String
  Dim strTipocess As String = ""
  Try
    Select Case NTSCStr(VARS!IeIn2Row!mm_stasino)
      Case "O", "P"
        strTipocess = "6" 'Omaggi
      case "M"
        strTipocess = "7" 'sconto merce
      case "X"
        strTipocess = "8" 'sconto merce NC
      case else
        strTipocess = "1" 'cessione
    End Select


    Return strTipocess
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadTipoCess':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>68</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadCodForn</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadCodForn  As String
  Try
    Return Right("               " &amp; NTSCStr(VARS!IeIn1Row!an_codnscol), 15)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadCodForn':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>69</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadCodClie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadCodClie As String
  Try
    Return Right("               " &amp; NTSCStr(VARS!IeIn1Row!an_note), 15)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadCodClie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>70</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadCodSoc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadCodSoc As String
  Try
    Return Right("               " &amp; NTSCStr(VARS!IeIn1Row!tm_coddest), 15)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadCodSoc':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>71</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadNumBol</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadNumBol As Integer
  Dim nNumbol As Integer = 0
  Try
    If NTSCStr(VARS!IeIn1Row!tm_tipork) = "N" then
      nNumbol = NTSCInt(VARS!IeIn1Row!tm_numpar)
    Else
      nNumbol = NTSCInt(VARS!IeIn1Row!tm_numdoc)
    End if 

    Return nNumbol 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadNumBol':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>72</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadDataBol</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadDataBol As Date
  Dim dtDatabol As String = ""
  Try
    If NTSCStr(VARS!IeIn1Row!tm_tipork) = "N" then
      dtDatabol = NTSCDate(VARS!IeIn1Row!tm_datpar)
    Else
      dtDatabol = NTSCDate(VARS!IeIn1Row!tm_datdoc)
    End if 

    Return dtDatabol 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadDataBol':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>73</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadTipoReso</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadTipoReso as String
  Dim strTiporeso As String = ""
  Try
  	Select Case NTSCStr(VARS!IeIn1Row!tm_tipork)
	  	Case "N"
	  		strTiporeso = "1"
	  	Case "£"
	  		strTiporeso = "2"
	  	Case Else
	  	  If NTSCDec(VARS!IeIn2Row!mm_quant) &lt; 0 then
        	strTiporeso = "1"
        Else 
          strTiporeso = " "
        End if
  	End Select

    Return strTiporeso
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadTipoReso':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>74</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ConadCopiaSuA</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.IO


Sub ConadCopiaSuA
  Dim strFilePath As String = ""
  Dim strPathArr as String() = Nothing
  Dim strFile As String = ""
  Dim dRes As System.Windows.Forms.DialogResult = Nothing
  Try
    'Percorso completo + nome del file
    strFilePath = NTSCStr(VARS!Ie1NomeFileExt)
    'Definizione del nome di file
    strPathArr  = strFilePath.Split("\\")
    strFile = strPathArr(strPathArr.Length-1)

    dRes = oApp.MsgBoxInfoYesNo_DefYes("Copiare il file " &amp; strFilePath &amp; " sul disco A:?")
    If dRes.Equals(System.Windows.Forms.DialogResult.Yes) Then
      If  File.Exists("A:\" &amp; UCase(strFile)) Then
        dRes = oApp.MsgBoxInfoYesNo_DefYes("Esiste già un file di nome " &amp; UCase(strFile) &amp; " sul disco A:." &amp; _
                                             vbCrLf &amp; "Sovrascriverlo?")
        If Not dRes.Equals(System.Windows.Forms.DialogResult.Yes) Then
          Exit Sub
        End If
      End If

    FileCopy(strFilePath, "A:\" &amp; UCase(strFile))
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadCopiaSuA':" &amp; ex.Message)
  End Try
End Sub

Function FileCopy(strSourceFileName As String, strDestFileName As String) As Boolean
  Dim dRes As System.Windows.Forms.DialogResult = Nothing
  Try
    File.Copy(strSourceFileName, strDestFileName, True)

    Return True
  Catch ex As Exception
    dRes = oApp.MsgBoxInfoYesNo_DefYes("Errore durante la copia del file '" &amp; strSourceFileName &amp; "'" &amp; vbCrLf &amp; _
             " sul disco 'A'." &amp; vbCrLf &amp; " Riprovare?")
    If dRes.Equals(System.Windows.Forms.DialogResult.Yes) Then
      FileCopy(strSourceFileName, strDestFileName)
    Else
      Return False
    End If
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>75</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadLitEur</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadLitEur As String
  Dim strValuta As String = ""
  Try
    If (oApp.ValutaCorrente = "LIT" AndAlso NTSCInt(VARS!IeIn1Row!tm_valuta) = 99) OrElse _
       (oApp.ValutaCorrente = "EUR" AndAlso NTSCInt(VARS!IeIn1Row!tm_valuta) &lt;&gt; 100) Then
      Select Case NTSCStr(VARS!IeIn1Row!tm_tipork)
      	Case "N", "£"
      		strValuta = "NEUR"
      	Case Else
      		strValuta = "FEUR"
      End Select
    Else
    	Select Case NTSCStr(VARS!IeIn1Row!tm_tipork)
	    	Case "N", "£"
	      	strValuta = "NLIT"
	      Case Else
	      	strValuta = "FLIT"
    	End Select
    End If

    Return strValuta
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadLitEur':" &amp; ex.Message)
  End Try
End Function

 </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>76</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadImporto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadImporto As Decimal
  Dim dImporto As Decimal = 0d
  Try
      If oApp.ValutaCorrente = "LIT" Then
        'azienda in lire
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 99 Then
          'FILCONAD in euro
          dImporto = ArrDbl(dValorev * 1000d, 0)
        Else
          'FILCONAD in lire
          dImporto = Math.Abs(NTSCDec(VARS!IeIn2Row!mm_valore))
        End If
      Else
        'azienda in euro
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 100 Then         
          dImporto = dValorev
        Else
        'FILCONAD in euro
          dImporto = ArrDbl(NTSCDec(VARS!IeIn2Row!mm_valore) * 1000d, 0) 
        End if
      End If

    Return dImporto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadImporto':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>77</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadQuant</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadQuant As Decimal
  Dim dQuant As Decimal = 0d
  Try
    dQuant = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn2Row!mm_quant)) * 100d, 0)

    Return dQuant
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadQuant':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>78</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CoopTipoMov</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CoopTipoMov As Integer
  Dim nTipoMov As Integer = 0
  Try
    If NTSCStr(VARS!IeIn1Row!tm_tipork) = "N" Then
      nTipoMov = 36
    Else
      nTipoMov = 1
    End if 

    Return nTipoMov 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CoopTipoMov':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>79</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CoopQuant</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CoopQuant As Decimal
  Try
    Return ArrDbl(Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * 100, 0)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CoopQuant':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>80</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CoopPrezzo</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CoopPrezzo As Decimal
  Dim dValorev As Decimal = 0d
  Dim dPrezzo As Decimal = 0d
  Try
    If Not NTSCDec(VARS!IeIn1Row!mm_quant) = 0 Then
      If oApp.ValutaCorrente = "LIT" Then
        'azienda in lire
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 99 Then
          'FILCOOP in euro
          dValorev = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * Math.Abs(NTSCDec(VARS!IeIn1Row!mm_prezvalc)) _
                   / NTSCDec(VARS!IeIn1Row!mm_perqta) * (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont3)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont5)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scopag)) _
                   / 100, oCldBase.TrovaNdec(99))
          dPrezzo = ArrDbl(dValorev / Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * 1000d, 0)
        Else
          'FILCOOP in lire
          dPrezzo = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn1Row!mm_valore)) / Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * 100d, 0) 
        End If
      Else
        'azienda in euro
        If NTSCInt(VARS!IeIn1Row!tm_valuta) = 100 Then
          'FILCOOP in lire
          dValorev = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * Math.Abs(NTSCDec(VARS!IeIn1Row!mm_prezvalc)) _
                   / NTSCDec(VARS!IeIn1Row!mm_perqta) * (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont3)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont5)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont1)) _
                   / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * (100 -  NTSCDec(VARS!IeIn1Row!tm_scopag)) _
                   / 100, oCldBase.TrovaNdec(100))
          dPrezzo = ArrDbl(dValorev / Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * 100d, 0)
        Else
        'FILCOOP in euro
          dPrezzo = ArrDbl(Math.Abs(NTSCDec(VARS!IeIn1Row!mm_valore)) / Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant)) * 1000d, 0) 
        End if
      End If
    End If

    Return dPrezzo
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CoopPrezzo':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>81</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CoopCodart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CoopCodart As Integer
  Dim lCodart As Integer = 0
  Dim strCodart As String = ""
  Try
    strCodart = Left(NTSCStr(VARS!IeIn1Row!mm_codart), 6)
    If IsNumeric(strCodart) Then
      lCodart = NTSCInt(strCodart)
    End If

    Return lCodart
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CoopCodart':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>82</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ConadAliq</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ConadAliq As Decimal
Dim dAliq As Decimal = 0d
  Try
    dAliq = NTSCDec(VARS!IeIn2Row!tb_aliq)
    If ArrDbl(dAliq, 2) &lt;&gt; ArrDbl(dAliq, 0) Then
      oApp.MsgBoxInfo("Attenzione! Sul documento è presente un codice IVA con un'aliquota che presenta decimali " &amp; _
                      NTSCStr(dAliq) &amp; " non suppotata dal tracciato FILCONAD. Si procede troncando l'aliquota al valore intero.")
      dAliq = Int(dAliq)
    End If

    Return dAliq
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ConadAliq':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>83</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>CoopInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public oCldBase As CLD__BASE = Nothing
Sub CoopInit
  Try
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CoopInit':" &amp; ex.Message) 
  End Try
End Sub
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>91</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CatalogoFornAzienda</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CatalogoFornAzienda As String
  Try
    Return strCodditt
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornAzienda':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>92</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>CatalogoFornInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public lCodforn As Integer = 0
Public lCodiva As Integer = 0
Public lCodmarca As Integer = 0
Public strSiglaforn As String = ""
Public strCodditt as String = ""
Public oCldBase As CLD__BASE = Nothing

Sub CatalogoFornInit
  Dim bInput As Boolean = False
  Try
    strCodditt = oApp.Ditta.ToString

    If oCldBase Is Nothing Then
      oCldBase = New CLD__BASE
      oCldBase.Init(oApp)
    End If
    
    'Input codice fornitore
    Do
      If Not GetCodforn() Then
        VARS!IECancelAll=True
        Return
      End If
    Loop Until lCodforn&lt;&gt;0

    'Input sigla fornitore
    Do
      If Not GetSiglaforn() Then
        VARS!IECancelAll=True
        Return
      End If
    Loop Until strSiglaforn.Length&gt;0

    'Input codice IVA
    Do
      If Not GetCodiva() Then
        VARS!IECancelAll=True
        Return
      End If
    Loop Until lCodiva&lt;&gt;0

    'Input codice marca
    Do
      If Not GetCodmarca() Then
        VARS!IECancelAll=True
        Return
      End If 
    Loop Until lCodmarca &lt;&gt;0
 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornInit':" &amp; ex.Message)
  End Try
End Sub

Function GetCodforn() As Boolean
  Dim strRet As String = ""
  Try
    strRet = oApp.InputBoxNew("Inserire un codice fornitore di Business a cui associare il catalogo da importare. ", "0", "N", False)
    If strRet.Length = 0 Then
       Return False
    End If

    If IsNumeric(strRet) AndAlso strRet&gt;0 Then
        If oCldBase.ValCodiceDB(strRet, strCodditt, "ANAGRAF", "N", "") Then
          lCodforn = strRet 
        Else
          oApp.MsgBoxInfo("Indicare un valido codice fornitore di Business.")
        End If
    Else
      oApp.MsgBoxInfo("Indicare un valido codice fornitore di Business.")              
    End if
    
    Return True
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornInit.GetCodforn':" &amp; ex.Message)
  End Try
End Function


Function GetSiglaforn() As Boolean
  Dim strRet As String = ""
  Try
    strRet = oApp.InputBoxNew("Inserire la sigla fornitore. ", " ", "S", False)
    If strRet.Length = 0 Then
       Return False
    End If

    If strRet.Length &lt;= 10 Then
      strSiglaforn = strRet 
    Else
      oApp.MsgBoxInfo("Inserire la sigla fornitore al massimo di 10 caratteri.")              
    End if
    
    Return True
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornInit.GetCodforn':" &amp; ex.Message)
  End Try
End Function

Function GetCodiva() As Boolean
  Dim strRet As String = ""
  Try
    strRet = oApp.InputBoxNew("Inserire un codice IVA di Business. ", "0", "N", False)
    If strRet.Length = 0 Then
       Return False
    End If

    If IsNumeric(strRet) AndAlso strRet&gt;0 Then
        If oCldBase.ValCodiceDB(strRet, strCodditt, "TABCIVA", "N", "") Then
          lCodiva = strRet 
        Else
          oApp.MsgBoxInfo("Indicare un valido codice IVA di Business.")
        End If
      Else
        oApp.MsgBoxInfo("Indicare un valido codice IVA di Business.")              
      End if
    
    Return True
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornInit.GetCodiva':" &amp; ex.Message)
  End Try
End Function

Function GetCodmarca() As Boolean
  Dim strRet As String = ""
  Try
    strRet = oApp.InputBoxNew("Inserire un codice marca di Business. ", "0", "N", False)
    If strRet.Length = 0 Then
       Return False
    End If

    If IsNumeric(strRet) AndAlso strRet&gt;0 Then
        If oCldBase.ValCodiceDB(strRet, strCodditt, "TABMARC", "N", "") Then
          lCodmarca = strRet 
        Else
          oApp.MsgBoxInfo("Indicare un valido codice marca di Business.")
        End If
      Else
        oApp.MsgBoxInfo("Indicare un valido codice marca di Business.")              
      End if
    
    Return True
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornInit.GetCodmarca':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>93</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CatalogoFornCodForn</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CatalogoFornCodForn As Integer
  Try
    Return lCodforn
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornCodForn':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>94</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CatalogoFornCodIva</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CatalogoFornCodIva As Integer
  Try
    Return lCodiva
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornCodIva':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>95</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CatalogoFornCodMarca</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CatalogoFornCodMarca As Integer
  Try
    Return lCodmarca
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornCodMarca':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>96</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CatalogoFornSiglaForn</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CatalogoFornSiglaForn
  Try
    Return strSiglaforn
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CatalogoFornSiglaForn':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>100</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ImportProfiloInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public bIeCancelRel As Boolean = False 
Public bIeCancellaInserimentoProfilo As Boolean = False
Sub ImportProfiloInit
  Try

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportProfiloInit':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>101</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ImportProfiloMAPTBLBeforeAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub ImportProfiloMAPTBLBeforeAll
	Dim bProceduraStdPresente As Boolean = False
	Dim nCodprof As Integer = 0
	Dim strSQL As String = ""
	Dim oCldBase As CLD__BASE = Nothing
  Try  
    nCodprof = NTSCInt(VARS!IeIn2Row!mpt_codprof)
    'Se il profilo che viene importato è un profilo custom (codice profilo &gt;1000)
    'verrà controllato se ci sono delle procedure standard legate a questo profilo
    If nCodprof&gt;1000 Then
      For Each dtrTmp As DataRow In DATAIN.Tables(VARS!Ie2NomeTabIN).Rows
      	If (NTSCInt(dtrTmp!mpt_runafterall)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runafterall&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runaftercorafterins)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runaftercorafterins&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runaftercorafterupd)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runaftercorafterupd&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runaftercorbeforeins)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runaftercorbeforeins&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runaftercorbeforeupd)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runaftercorbeforeupd&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runafterins)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runafterins&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runafterupd)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runafterupd&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runbeforeall)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runbeforeall&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runbeforeins)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runbeforeins&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_runbeforeupd)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_runbeforeupd&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_initialize)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_initialize&lt;=1000)) _
      	OrElse (NTSCInt(dtrTmp!mpt_terminate)&gt;0 AndAlso NTSCInt(dtrTmp!mpt_terminate&lt;=1000)) Then
      		bProceduraStdPresente = True
      		Exit For
      	End If
      Next
    	
      If bProceduraStdPresente Then
      	Dim dRes As System.Windows.Forms.DialogResult = Nothing
      	Dim strProcStdMess As String = _
		      	"Ci sono delle procedure con i numeri &lt;=1000 legate al profilo custom da importare" &amp; vbCrLf &amp; _
		      	"(eventi della sezione 'Corrispondenza tabelle')." &amp; vbcrlf &amp; _
		      	"Nel caso in cui si decide di importare il profilo le procedure standard presenti verranno sovrascritte" &amp; _
		      	" con le procedure legate al profilo."
		    oCleImex.WriteLog(strProcStdMess)
      	dRes = oApp.MsgBoxInfoYesNo_DefNo(strProcStdMess &amp; vbCrLf &amp; vbCrLf &amp; _
      				 "Vuole procedere con l'importazione profilo?")
      	If dRes = System.Windows.Forms.DialogResult.No Then
      		VARS!IECancelAll = True
      		VARS!IeCancelRel = True
      		bIeCancelRel = True
      		
      		oCldBase = New CLD__BASE
          oCldBase.Init(oApp)
      		strSQL = "DELETE FROM profil WHERE prf_codice=" &amp; nCodprof
      		oCldBase.Execute(strSQL, CLE__APP.DBTIPO.DBPRC)
      	End If
      End If
    End If    

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportProfiloMAPTBLBeforeAll':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>102</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ImportProfiloMAPFLDBeforeAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub ImportProfiloMAPFLDBeforeAll
	Dim bProceduraStdPresente as Boolean = False
	Dim nCodprof As Integer = 0
	Dim strSQL As String = ""
	Dim oCldBase As CLD__BASE = Nothing
  Try
  	Try
    	nCodprof = NTSCInt(VARS!IeIn2Row!mpf_codprof)
    Catch ex As Exception
    	'Al secondo livello di relazione questa tabella si troverà durante esecuzione dei controlli 
    	'prima di inserire la 1° (e unica) riga nella tabella PROFIL.
    	'Quando la tabella si trova al livello diverso da 2, 
    	'e quindi l'istruzione NTSCInt(VARS!IeIn2Row!mpf_codprof) lancerà Exception, non trovando il campo 'mpf_codprof',
    	'si esce perchè i controlli non devono essere più eseguiti.
    	Return
    End Try
    
    'Se il profilo che viene importato è un profilo custom (codice profilo &gt;1000)
    'verrà controllato se ci sono delle procedure standard legate a questo profilo
    If nCodprof&gt;1000 Then
      For Each dtrTmp As DataRow In DATAIN.Tables(VARS!Ie2NomeTabIN).Rows
      	If NTSCInt(dtrTmp!mpf_runvalue)&gt;0 AndAlso NTSCInt(dtrTmp!mpf_runvalue&lt;=1000)  Then
      		bProceduraStdPresente = True
      		Exit For
      	End If
      Next
    	
      If bProceduraStdPresente Then 
      	Dim dRes As System.Windows.Forms.DialogResult = Nothing
      	Dim strProcStdMess As String = _
		      	"Ci sono delle procedure con i numeri &lt;= 1000 legate al profilo custom da importare" &amp; vbCrLf &amp; _
		      	"('Codice funzione' della sezione 'Corrispondenza campi')." &amp; vbcrlf &amp; _
		      	"Nel caso in cui si decide di importare il profilo le procedure standard presenti verranno sovrascritte" &amp; _
		      	" con le procedure legate al profilo."
		    oCleImex.WriteLog(strProcStdMess)
      	dRes = oApp.MsgBoxInfoYesNo_DefNo(strProcStdMess &amp; vbCrLf &amp; vbCrLf &amp; _
      				 "Vuole procedere con l'importazione profilo?")
      	If dRes = System.Windows.Forms.DialogResult.No Then
      		bIeCancellaInserimentoProfilo = True
      	End If
      End If
    End If   
    
    VARS!IECancelAll = True
		DATAIN.Tables().Remove(VARS!Ie2NomeTabIN)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportProfiloMAPFLDBeforeAll':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>103</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ImportProfiloRelTlbBeforeAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub ImportProfiloRelTlbBeforeAll
  Try
		If bIeCancelRel Then
			VARS!IECancelAll = True
		End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportProfiloRelTlbBeforeAll':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>104</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ImportProfiloAfterCorBeforeIns</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub ImportProfiloAfterCorBeforeIns
  Try
  	If bIeCancellaInserimentoProfilo Then
  		VARS!IeCancelRow = True
      VARS!IeCancelRel = True
  	End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportProfiloAfterCorBeforeIns':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>105</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>OlivettiPrezzo</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function OlivettiPrezzo As String
  Dim strTmp As String = ""
  Try
    strTmp = NTSCStr(ArrDbl(NTSCDec(VARS!IeIn2Row!mm_preziva), 2)).Replace(",",".")
    strTmp = strTmp.PadLeft(9, CChar("0"))

    Return strTmp
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'OlivettiPrezzo':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>111</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaNETInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>'Public Const WPOS1_PATH As String = "C:\Programmi\RTS Wpos1\"
Public WPOS1_PATH As String = ""

Sub SaremaNETInit
  Dim strPath as String = ""
  Dim strFileSaremaPath as String = ""
  Dim strPathArr as String() = Nothing
  Try
    strFileSaremaPath = NTSCStr(VARS!Ie1NomeFileExt)
    'Definizione del percorso
    strPathArr  = strFileSaremaPath.Split("\\")
    For i As Integer = 0 To strPathArr.Length-2
      strPath = strPath &amp; strPathArr(i) &amp; "\"  
    Next
    WPOS1_PATH = strPath

   'Esce se documento negativo
   If NTSCDec(VARS!IeIn1Row!tm_totdoc) &lt;= 0 Then
     oApp.MsgboxInfo("Attenzione! Corrispettivo con totale documento negativo o pari a zero. Stampa non è possibile.")
     VARS!IECancelAll = True
     Return
   End If  

   'Esce se abbuono negativo
   If NTSCDec(VARS!IeIn1Row!tm_abbuono) &lt; 0 then
     oApp.MsgboxInfo("Attenzione! corrispettivo con abbuono negativo. Stampa non é possibile.")
     VARS!IECancelAll = True
     Return
   End If   

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETInit':" &amp; ex.Message)
  End Try
End Sub

Public Sub SaremaWriteLine(strRiga As String)
  Dim dtrNew As DataRow = Nothing
  Try
    dtrNew = DATAOU.Tables(0).NewRow
    dtrNew!Filler3 = strRiga
    DATAOU.Tables(0).Rows.Add(dtrNew)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETInit.SaremaWriteLine':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>112</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaNETAbbuoni</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaNETAbbuoni
  Try
  'Scarta la riga se quantità o prezzo a zero
  If NTSCDec(VARS!IeIn1Row!Prezzo) = 0 OrElse NTSCDec(VARS!IeIn1Row!mm_quant) = 0 Then
    VARS!IECancelAll = True
    Return
  End If

  'Scarta la riga se ci sono prezzi negativi
  If NTSCDec(VARS!IeIn1Row!Prezzo) &lt; 0 Then
    oApp.MsgboxInfo("ATTENZIONE! Riga " &amp; NTSCInt(VARS!IeIn1Row!mm_riga) &amp; ", articolo " &amp; UCase(NTSCStr(VARS!IeIn1Row!mm_descr)) &amp; _
                    " con prezzo negativo. Riga scartata dalla stampa dello scontrino.") 
    VARS!IeCancelRow = True
    Return
  End If

  'Scarta le righe con sconti negativi
  If NTSCDec(VARS!IeIn1Row!tm_scont1) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!tm_scont2) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!tm_scopag) &lt; 0 _
  OrElse NTSCDec(VARS!IeIn1Row!mm_scont1) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!mm_scont2) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!mm_scont3) &lt; 0 _
  OrElse NTSCDec(VARS!IeIn1Row!mm_scont4) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!mm_scont5) &lt; 0 OrElse NTSCDec(VARS!IeIn1Row!mm_scont6) &lt; 0 Then 
    oApp.MsgboxInfo("ATTENZIONE! Riga " &amp;  NTSCInt(VARS!IeIn1Row!mm_riga) &amp; ", articolo " &amp; UCase(NTSCStr(VARS!IeIn1Row!mm_descr)) &amp; _
    " con uno o più sconti negativi (maggiorazioni). Riga scartata dalla stampa dello scontrino.") 
    VARS!IeCancelRow = True
    Return
  End If

  'Controllo righe speciali RETAIL: Abbuono/sconto, Subtotale
  If NTSCStr(VARS!IeIn1Row!mms_tiporiga).Trim.Length &lt;&gt; 0 Then
    'Per le righe ABBUONO e SCONTO A VALORE le tratta allo stesso modo 
    'inserendo uno sconto a valore pari al Prezzo (già x 100) * -1
    If  NTSCStr(VARS!IeIn1Row!mms_tiporiga) = "A" OrElse  NTSCStr(VARS!IeIn1Row!mms_tiporiga) = "S" Then
      SaremaWriteLine("COUP,V" &amp;  NTSCInt(VARS!IeIn1Row!Prezzo) &amp; ";")
      VARS!IeCancelRow = True
    End If

    'Le righe SUBTOTALE le scarta
    If NTSCStr(VARS!IeIn1Row!mms_tiporiga) = "Z" Then
      VARS!IeCancelRow = True
    End If
  End If

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETAbbuoni':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>113</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaNETSconti</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaNETSconti
  Dim bScontoSingolo As Boolean = True
  Dim dScont As Decimal = 0d
  Dim dValoreLordo As Decimal = 0d
  Dim dValoreNetto As Decimal = 0d 
  Dim dValoreSconto  As Decimal = 0d
  Try

  'Non fa nulla se non ci sono sconti
  If NTSCDec(VARS!IeIn1Row!tm_scont1) = 0 AndAlso NTSCDec(VARS!IeIn1Row!tm_scont2) = 0 And NTSCDec(VARS!IeIn1Row!tm_scopag) = 0 _
  AndAlso NTSCDec(VARS!IeIn1Row!mm_scont1) = 0 AndAlso NTSCDec(VARS!IeIn1Row!mm_scont2) = 0 AndAlso NTSCDec(VARS!IeIn1Row!mm_scont3) = 0 _
  AndAlso NTSCDec(VARS!IeIn1Row!mm_scont4) = 0 AndAlso NTSCDec(VARS!IeIn1Row!mm_scont5) = 0 AndAlso NTSCDec(VARS!IeIn1Row!mm_scont6) = 0 Then 
    Return
  End if
  
  'Determina se c'è uno o più sconti
  If NTSCDec(VARS!IeIn1Row!tm_scont1) &gt; 0 Then
    dScont = NTSCDec(VARS!IeIn1Row!tm_scont1)
  End If
  If NTSCDec(VARS!IeIn1Row!tm_scont2) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!tm_scont2)
  End If
  If NTSCDec(VARS!IeIn1Row!tm_scopag) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!tm_scopag)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont1) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont1)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont2) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont2)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont3) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont3)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont4) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont4)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont5) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont5)
  End If
  If NTSCDec(VARS!IeIn1Row!mm_scont6) &gt; 0 Then
    If dScont &gt; 0 Then bScontoSingolo = False
    If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont6)
  End If

  'Se c'è un solo sconto lo applica con una DISC,%
  If bScontoSingolo And dScont &gt; 0 Then
    dScont = ArrDbl(dScont, 2) 'Comunque deve essere già a 2
    SaremaWriteLine("DISC,%" &amp; CDblSQL(dScont) &amp; ";")
  End If
  
  'Se ci sono più sconti di trasforma a valore e li applica con una COUP,V
  'Questo evita inevitabili problemi di differenze dovute ad arrotondamenti 
  If Not bScontoSingolo Then
    dValoreNetto = ArrDbl(ArrDbl((NTSCDec(VARS!IeIn1Row!Prezzo)/100) * NTSCDec(VARS!IeIn1Row!mm_quant) * _
                  (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * _
                  (100 - NTSCDec(VARS!IeIn1Row!mm_scont3)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * _ 
                  (100 - NTSCDec(VARS!IeIn1Row!mm_scont5)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100, 2) * _
                  (100 - NTSCDec(VARS!IeIn1Row!tm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * _
                  (100 - NTSCDec(VARS!IeIn1Row!tm_scopag)) / 100, 2)
    dValoreLordo = ArrDbl((NTSCDec(VARS!IeIn1Row!Prezzo) / 100) * NTSCDec(VARS!IeIn1Row!mm_quant), 2)
    dValoreSconto = ArrDbl(dValoreLordo - dValoreNetto, 2)
    If dValoreSconto &gt; 0 Then
      SaremaWriteLine("COUP,V" &amp; dValoreSconto * 100 &amp; ";")
    End If
  End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETSconti':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>114</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaNETEnd</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaNETEnd
  Try

  SaremaWriteLine("CLER,C001;")
  If  NTSCDec(VARS!IeIn1Row!tm_abbuono) &gt; 0d then
    SaremaWriteLine("COST,V" &amp;  NTSCStr(NTSCDec(VARS!IeIn1Row!tm_abbuono) * 100) &amp;  ";" )
  End If
  SaremaWriteLine("CASH;")

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETEnd':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>115</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaNETRTS1</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SaremaNETRTS1
  Try
    'Crea nella cartella dove viene creato il file dati
    'Il file SR_START.001 (1=COM1) con la password di RTS 
    If Not CBool(VARS!IECancelAll) Then
      System.IO.File.Copy(WPOS1_PATH &amp; "SR_STARX.001", WPOS1_PATH &amp; "SR_START.001")
    End If
  Catch ex As Exception
    oApp.MsgBoxInfo("Errore durante la rimonima del file " &amp; UCase(WPOS1_PATH &amp; "SR_STARX.001") &amp; _
           " in " &amp; UCase(WPOS1_PATH &amp; "SR_START.001") &amp; ". " &amp; vbCrLf &amp; vbCrLf &amp; ex.Message)
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETRTS1':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>116</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaNETReparto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaNETReparto As String
  Dim strReparto As String = 1
  Try
    If NTSCInt(VARS!IeIn1Row!ar_reparto) &lt;&gt; 0 Then
      strReparto = NTSCInt(VARS!IeIn1Row!ar_reparto)
    End If
    Return strReparto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETReparto':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>117</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaNETQuant</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaNETQuant As Decimal
  Dim dQuant As Decimal = 0d
  Try
    dQuant = Math.Abs(NTSCDec(VARS!IeIn1Row!mm_quant))
    If dQuant &gt; 9999 Then
      oApp.MsgboxInfo("Attenzione! Impossibile stampare su registratore di cassa quantità superiori a 9999 (quantità indicata in riga: " &amp; _
                      NTSCStr(VARS!IeIn1Row!mm_quant) &amp; "). Questa riga verrà scartata dalla stampa.")
      VARS!IeCancelRow = True 
    End If  

    Return dQuant
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETQuant':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>118</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SaremaNETReso</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SaremaNETReso As String
  Dim strReso As String = ""
  Try
    If NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 Then
      strReso = ",R"
    End If 
 
    Return strReso
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaNETReso':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>140</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportClserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportClserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mm_clnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mm_clserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportClserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>141</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportAcserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportAcserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mm_acnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mm_acserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportAcserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>142</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportNpserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportNpserie  As String
  Try
    If NTSCInt(VARS!IeIn2Row!mm_npnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mm_npserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportNpserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>143</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportPrserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportPrserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mm_prnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mm_prserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportPrserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>144</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportCcserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportCcserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mm_ccnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mm_ccserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportCcserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>155</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportOaserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportOaserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mo_oanum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mo_oaserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportOaserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>156</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>ImportOqserie</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function ImportOqserie As String
  Try
    If NTSCInt(VARS!IeIn2Row!mo_oqnum) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn2Row!mo_oqserie).Length = 0 Then
      Return " "
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ImportOqserie':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>200</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>MetelStart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.Windows.Forms
Imports System.Globalization

Public Const DATE_FORMAT As String = "dd/MM/yyyy"

Public strDitta As String = ""
Public oCldBase As CLD__BASE = Nothing

Public nListino As Integer = 0
Public bInsertArtico As Boolean = False
Public strUnmis As String = ""
Public dtDatagg As Date = Nothing

Sub MetelStart
  Dim strDatagg  As String = ""
  Dim strRet As String = ""
  Dim dRes As DialogResult
  Try
    strDitta = oApp.Ditta.ToString
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    'Controllo marcatore METEL
    If Not Left(NTSCStr(VARS!IeIn1Row!sigla) &amp; NTSCStr(VARS!IeIn1Row!codart),13).Equals("LISTINO METEL") Then
      oCleImex.WriteLog("Formato file da importare non riconosciuto come Listino Metel. Importazione annullata.")
      VARS!IECancelAll=True
      Return
    End If

    'Controllo versione uguale a 020
    If Not NTSCStr(VARS!IeIn1Row!valuta).Equals("020") AndAlso _
       Not NTSCStr(VARS!IeIn1Row!valuta).Equals("021")Then
      oCleImex.WriteLog("Versione del tracciato listini Metel non supportata. Importazione annullata.")
      VARS!IECancelAll=True
      Return
    End If

    strDatagg = Mid(NTSCStr(VARS!IeIn1Row!descr), 15, 2) &amp; "/" &amp; Mid(NTSCStr(VARS!IeIn1Row!descr), 13, 2) &amp; _
        "/" &amp; Mid(NTSCStr(VARS!IeIn1Row!descr), 9, 4)
    
    If Not DateTime.TryParseExact(strDatagg, DATE_FORMAT, CultureInfo.InvariantCulture, DateTimeStyles.None, dtDatagg) Then
      oCleImex.WriteLog("Data inizio validità listino non valida: " &amp; strDatagg &amp; ". Importazione annullata.")
      VARS!IECancelAll=True
      Return
    End If

    'Chiede il numero di listino da importare
    strRet = oApp.InputBoxNew("Inserire il numero di listino da importare in Business (1-9999), che possiederà data inizio validità: " &amp; _
                  dtDatagg, 1, "N", False)
    If strRet.Trim.Length = 0 Then
      oCleImex.WriteLog("Indicare un numero di listino numerico. Importazione annullata.")
      VARS!IECancelAll=True
      Return 
    End If

    If Not IsNumeric(strRet) Then
      oApp.MsgBoxInfo("Indicare un numero di listino numerico. Importazione annullata.")
      VARS!IECancelAll=True
      Return    
    End If
    If NTSCInt(strRet) &lt; 1 OrElse NTSCInt(strRet) &gt; 9999 Then
      oApp.MsgBoxInfo("Il numero di listino deve essere compreso tra 1 e 9999.  Importazione annullata.")
      VARS!IECancelAll=True
      Return    
    End If     

    nListino = NTSCInt(strRet)
    'Chiede se creare gli articoli
    dRes = oApp.MsgBoxInfoYesNo_DefYes("Creare gli articoli in anagrafica se mancanti?")
    If dRes.Equals(DialogResult.Yes) Then
       bInsertArtico = True
    End If

    'La prima riga viene saltata perchè non contiene gli articoli ma solo la testata del listino
    VARS!IeCancelRow = True
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelStart':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>201</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelDatagg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelDatagg As Date
  Try
    Return dtDatagg
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelDatagg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>202</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCodart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCodart As String
  Dim strCodart As String = ""
  Dim dttArtico As New DataTable
  Dim dPerQta As Decimal = 0d
  Dim strSQL As String = ""
  Try
    strCodart = Left(NTSCStr(VARS!IeIn1Row!sigla) &amp; NTSCStr(VARS!IeIn1Row!codart), 18)
    If strCodart.Trim.Length &lt;&gt;0 AndAlso oCldBase.ValCodiceDb(strCodart, strDitta, "ARTICO", "S", "", dttArtico) Then
      dPerQta = NTSCDec(dttArtico.Rows(0)!ar_perqta)
      strUnmis = NTSCStr(dttArtico.Rows(0)!ar_unmis)
      'L'articolo esiste quindi controlla se il moltiplicatore è corretto
      If dPerQta &lt;&gt; NTSCDec(VARS!IeIn1Row!Perqta) Then
        oCleImex.WriteLog("L'articolo " &amp; UCase(strcodart) &amp; " di cui si stà importando il listino, possiede in anagrafica un moltiplicatore prezzo (" &amp; _
                       dPerQta &amp; ") diverso da quello presente nel listino da importare (" &amp; NTSCDec(VARS!IeIn1Row!Perqta) &amp; _
                       "). Il listino di questo articolo non verrà importato.")
        VARS!IeCancelRow = True
      End if
    Else
      strUnmis = NTSCstr(VARS!IeIn1Row!unmis)
      'L'articolo non esiset in anagrafica di Bsuiness
      If bInsertArtico Then
            'inserisco l'articolo in Business
        strsql = "INSERT INTO artico (codditt, ar_codart, ar_descr, ar_unmis, ar_perqta, ar_datins, ar_ultagg) VALUES (" &amp; _
                 CStrSQL(strDitta) &amp; ", " &amp; CStrSQL(strCodart) &amp; ", " &amp;  CStrSQL(Left(NTSCStr(VARS!IeIn1Row!descr),40)) &amp; _
                 ", " &amp;  CStrSQL(strUnmis) &amp; ", " &amp; CDblSQL(NTSCDec(VARS!IeIn1Row!perqta)) &amp; ", " &amp; CDataSQL(Date.Now) &amp; _
                 ", " &amp; CDataSQL(Date.Now)  &amp; ")"
        oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      Else
        VARS!IeCancelRow = True
      End If
    End If

    Return strCodart
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCodart':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>203</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelUnmis</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelUnmis As String
  Try
    Return strUnmis
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelUnmis':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>204</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>MetelAggList</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub MetelAggList
  Dim strSQL As String = ""
  Dim dttTmp As DataTable = Nothing
  Try
    '--- Aggiorna la data di scadenza dell'eventuale listino
    '--- immediatamente precedente
    strSQL = "UPDATE listini" &amp; _
             " SET lc_datscad = " &amp; CDataSQL(DateAdd("d", -1, NTSCDate(VARS!IeOu1Row!lc_datagg))) &amp; " " &amp; _
             " WHERE lc_codart = " &amp; CStrSQL(NTSCStr(VARS!IeOu1Row!lc_codart)) &amp; _
             " AND codditt = " &amp; CStrSQL(strDitta) &amp; _
             " AND lc_conto = 0 " &amp;  _
             " AND lc_codlavo = 0 " &amp; _
             " AND lc_codvalu = 0 " &amp; _
             " AND lc_listino = " &amp; NTSCInt(VARS!IeOu1Row!lc_listino) &amp; _
             " AND lc_codtpro = 0 " &amp; _
             " AND lc_datagg &lt; " &amp; CDataSQL(VARS!IeOu1Row!lc_datagg) &amp; _
             " AND lc_daquant = " &amp; CDblSQL(NTSCDec(VARS!IeOu1Row!lc_daquant)) &amp; _
             " AND lc_datscad &gt;= " &amp; CDataSQL(VARS!IeOu1Row!lc_datagg)
    oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)

    '--- Aggiorna la data di scadenza del record appena inserito
    '--- se esiste un record con data di aggiornamento posteriore
    strSQL = "SELECT lc_datagg FROM listini" &amp; _
             " WHERE lc_codart = " &amp; CStrSQL(NTSCStr(VARS!IeOu1Row!lc_codart)) &amp; _
             " AND codditt = " &amp; CStrSQL(strDitta) &amp; _
             " AND lc_conto = 0 " &amp; _
             " AND lc_codlavo = 0 " &amp; _
             " AND lc_codvalu = 0 " &amp; _
             " AND lc_listino = " &amp; NTSCInt(VARS!IeOu1Row!lc_listino) &amp; _
             " AND lc_codtpro = 0 " &amp; _
             " AND lc_datagg &gt; " &amp; CDataSQL(VARS!IeOu1Row!lc_datagg) &amp; _
             " AND lc_daquant = " &amp; CDblSQL(NTSCDec(VARS!IeOu1Row!lc_daquant)) &amp; _
             " ORDER BY lc_codart, lc_conto, lc_codvalu, lc_codtpro, lc_listino," &amp; _
             " lc_datagg, lc_daquant"
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp IsNot Nothing AndAlso dttTmp.Rows.Count &gt; 0 Then
      oCleImex.WriteLog("Aggiornamento listino vecchio trovato: articolo=" &amp; NTSCStr(VARS!IeOu1Row!lc_codart) &amp; _
                        ", vecchia datagg=" &amp; NtsCStr(dttTmp.Rows(0)!lc_datagg) &amp; _
                        ", nuovo datagg=" &amp; NTSCStr(VARS!IeOu1Row!lc_datagg))
      strSQL = "UPDATE listini" &amp; _
               " SET lc_datscad = " &amp; CDataSQL(DateAdd("d", -1, NTSCDate(VARS!IeOu1Row!lc_datagg))) &amp; " " &amp; _
               " WHERE lc_codart = " &amp; CStrSQL(NTSCStr(VARS!IeOu1Row!lc_codart)) &amp; _
               " AND codditt = " &amp; CStrSQL(strDitta)&amp; _
               " AND lc_conto = 0 " &amp; _
               " AND lc_codlavo = 0 " &amp; _
               " AND lc_codvalu = 0 " &amp; _
               " AND lc_listino = " &amp; NTSCInt(VARS!IeOu1Row!lc_listino) &amp; _
               " AND lc_codtpro = 0 "  &amp; _
               " AND lc_datagg = " &amp; CDataSQL(VARS!IeOu1Row!lc_datagg) &amp; _
               " AND lc_daquant = " &amp;  CDblSQL(NTSCDec(VARS!IeOu1Row!lc_daquant))
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelAggList':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>205</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelListino</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelListino as Integer
  Try
    Return nListino
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelListino':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>240</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>MetelCatalogoStart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public strUMP2 as string 
Public lConto as Long
Public iCodMarca as Integer
Public iCodIVA as Integer
Public strCodditt as String

Sub MetelCatalogoStart

  Try
    Dim strRet
    strCodditt = oApp.Ditta.ToString
  
    'Controllo marcatore METEL
    If Microsoft.VisualBasic.Left(VARS!IeIn1Row!sigla &amp; VARS!IeIn1Row!codart, 13)&lt;&gt;"LISTINO METEL" Then
      MsgBox("Formato file da importare non riconosciuto come Catalogo Metel. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    End if
  
    'Controllo versione uguale a 020
    If VARS!IeIn1Row!valuta&lt;&gt;"020"  andalso VARS!IeIn1Row!valuta &lt;&gt; "021" Then
      MsgBox("Versione del tracciato Catalogo Metel non supportata. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    end if
  
    VARS!IeCancelRow = True
  
    'Chiede il numero di conto del fornitore
    strRet=InputBox("Inserire il numero di conto del Fornitore dei prodotti nel catalogo: " , "Importazione Catalogo Metel","000000000")
    if not isnumeric(strRet) Then
      MsgBox("Indicare un numero di conto fornitore numerico. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    else
      lConto = strRet    
    end if
  
    'Chiede il codice della marca
    strRet=InputBox("Inserire il codice della marca (obbligatorio) dei prodotti nel catalogo: " , "Importazione Catalogo Metel","0")
    if not isnumeric(strRet) orElse strRet = "0" Then
      MsgBox("Indicare un codice marca valido (compreso tra 1 e 9999). Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    else
      iCodMarca = strRet    
    end if

    'Chiede il codice IVA
    strRet=InputBox("Inserire il codice IVA dei prodotti nel catalogo: " , "Importazione Catalogo Metel","0")
    if not isnumeric(strRet) Then 'Qui è possibile lasciare vuoto il codice IVA
      MsgBox("Indicare un codice IVA valido (compreso tra 0 e 9999). Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    else
      iCodIVA = strRet    
    end if
  
    'Chiede l'eventuale UM secondaria per gli articoli
    strUMP2=InputBox("Inserire la descrizione per l'eventuale unità di misura secondaria (confezione): " , "Importazione Catalogo Metel","CT")
  
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoStart':" &amp; ex.Message)
  Finally

  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>241</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SaremaGPVStart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>&lt;reference assembly="BERECORE.dll" /&gt;

Imports System.Collections.Generic
Imports System.Text

Public strDittaCorrente as String = ""
Public strUserCorrente As String = ""

Public strPath As String = ""
Public strIENomeFileSemaforoSarema As String = ""
Public strIENomeFileSarema As String = ""

Public dttRegistratore As New DataTable
Public dttAnagra As New DataTable
Public dttCiva As DataTable = Nothing

'I dati prelevati dal registratore di cassa
Public bScontiAValore As Boolean = False
Public bEsponiValoreNetto As Boolean = False
Public bEsponiTipoPag As Boolean = False
Public bEsponiResto As Boolean = False
Public nMaxCharDesArt As Integer = 0

Public dAbbuo As Decimal = 0d
Public dTdoc As Decimal = 0d

Public lstPromozioniPiede As New List(Of String)
Public lClienteGenerico As Integer ' Cliente Generico Privato

Public oCldBase As CLD__BASE = Nothing
Public oCleCore As CLERECORE = Nothing
Sub SaremaGPVStart
  Try
    strDittaCorrente = oApp.Ditta
    strUserCorrente = oApp.User.Nome 
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)
    
    oCleCore = New CLERECORE
    oCleCore.Init(oApp, Nothing, oMenu.oCleComm, "TABREEC", False, "", 0)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SaremaGPVStart':" &amp; ex.Message)
  End Try
End Sub

Public Sub GPVWriteLine(strRiga As String)
  Dim dtrNew As DataRow = Nothing
  Try
    dtrNew = DATAOU.Tables(0).NewRow
    dtrNew!Riga = strRiga
    DATAOU.Tables(0).Rows.Add(dtrNew)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVWriteLine':" &amp; ex.Message)
  End Try
End Sub

Public Function GPVValoreNetto(dPrezzo As Decimal) As Decimal
  Dim dValorenetto As Decimal = 0
  Try
    dValoreNetto = ArrDbl(ArrDbl(dPrezzo * _
                   NTSCDec(VARS!IeIn1Row!mm_quant) / NTSCInt(VARS!IeIn1Row!mm_perqta) * _
                   (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * _
                   (100 - NTSCDec(VARS!IeIn1Row!mm_scont3)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * _
                   (100 - NTSCDec(VARS!IeIn1Row!mm_scont5)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100, 2) * _
                   (100 - NTSCDec(VARS!IeIn1Row!tm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * _
                   (100 - NTSCDec(VARS!IeIn1Row!tm_scopag)) / 100, 2)
    Return dValoreNetto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la funzione 'GPVValoreNetto':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>242</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ControlliPreScritturaFile</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Sub ControlliPreScritturaFile
  Dim dttPuntoCassa as New Datatable
  Dim dttReparto As New DataTable
  Dim dttNegozio As New DataTable
  Dim strFileSaremaPath As String = ""
  Dim strPathArr as String() = Nothing
  Try
  	'Inizializza i dati del cliente
    oCldBase.ValCodiceDb(NTSCStr(VARS!IeIn1Row!tm_conto), strDittaCorrente, "ANAGRAC", "N", "", dttAnagra)
    oCldBase.ValCodiceDb(NTSCStr(VARS!IeIn1Row!tm_codrepc), strDittaCorrente, "TABREPC", "S", "", dttPuntoCassa)
    If dttPuntoCassa.Rows.Count &gt; 0 Then
      oCldBase.ValCodiceDb(NTSCStr(dttPuntoCassa.Rows(0)!tb_codrere), strDittaCorrente, "TABRERE", "N", , dttReparto)
      If dttReparto.Rows.Count &gt; 0 Then
        oCldBase.ValCodiceDb(NTSCStr(dttReparto.Rows(0)!tb_codstab), strDittaCorrente, "TABSTAB", "N", , dttNegozio)
      End If
    End If
    lClienteGenerico = ImpostaClientePrivato(dttNegozio)
    
    If NTSCStr(VARS!IeIn1Row!tm_codrepc).Trim.Length&lt;&gt;0 AndAlso dttPuntoCassa.Rows.Count&gt;0 AndAlso _
    oCldBase.ValCodiceDb(NTSCStr(dttPuntoCassa.Rows(0)!tb_codreec), strDittaCorrente, "TABREEC", "N", "", dttRegistratore) Then
      With dttRegistratore.Rows(0)
        bScontiAValore = CBool(IIf(NTSCStr(!tb_sascval) = "S", True, False))
        bEsponiValoreNetto = CBool(IIf(NTSCStr(!tb_saesvalnet) = "S", True, False))
        bEsponiTipoPag = CBool(IIf(NTSCStr(!tb_saestppag) = "S", True, False))
        bEsponiResto = CBool(IIf(NTSCStr(!tb_saesresto) = "S", True, False))
        strIENomeFileSemaforoSarema = NTSCStr(!tb_safilesema)
        strIENomeFileSarema = NTSCStr(!tb_sanomefile)
        nMaxCharDesArt = NTSCInt(!tb_samaxdesart)  'definisce il numero di caratteri massimo esposti nel file SR_DATi dello scontrino fiscale, per defeualt 10. Prima di modificare l'opzione verificare se il WPOS1 e/o il registratore di cassa in uso supporta in numero di caratteri che si vuole impostare. Valori ammessi da 10 a 40.
      End With

    	'Percorso completo + nome del file con i dati dello scontrino
    	strFileSaremaPath = NTSCStr(VARS!Ie1NomeFileExt)
    	'Definizione del percorso
    	strPathArr  = strFileSaremaPath.Split("\\")
    	For i As Integer = 0 To strPathArr.Length-2
     		strPath = strPath &amp; strPathArr(i) &amp; "\"  
    	Next

   		'Prima di salvare il file ed andare avanti, controlla se c'è già il file SR_START.001, per gestire la concorreza tra più registratori.
    	For z As Integer = 0 To 20
      	If Not System.IO.File.Exists(strPath &amp; strIENomeFileSemaforoSarema) Then Exit For
      	System.Threading.Thread.Sleep(250)
    	Next

      'Esce se totale documento e abbuono sono &lt;= 0
      dTdoc =  NTSCDec(VARS!IeIn1Row!tm_totdoc) 
      dAbbuo = NTSCDec(VARS!IeIn1Row!tm_abbuono)
      If dTdoc &lt; 0 Then
        oCleImex.WriteLog("Attenzione! Corrispettivo con totale documento negativo. Stampa non possibile.")
        VARS!IECancelAll=True
        Return
      End If
      
      If dAbbuo &lt; 0 Then
        oCleImex.WriteLog("Attenzione! Corrispettivo con abbuono negativo. Stampa non possibile.")
        VARS!IECancelAll=True
        Return
      End If
      
      Select Case NTSCStr(VARS!IeIn1Row!tm_tipork)
      	Case "N" 
      		GPVWriteLine("NDCR,:Nota Accredito")
        Case "A", "S" 
        	GeneraFileSarema_InizializzaFattura()
      End Select
    Else
      oCleImex.WriteLog("Impossibile rilevare i dati del registratore di cassa relativo al punto cassa " &amp;  CStrSQL(VARS!IeIn1Row!tm_codrepc) &amp; _
             ". Stampa non possibile.")
      VARS!IECancelAll=True
      Return
    End If
    
    ImpostaClientePrivato(dttNegozio)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ControlliPreScritturaFile':" &amp; ex.Message)
  End Try
End Sub 

Public Function ImpostaClientePrivato(ByVal dttNegozio As DataTable) As Integer
	Dim lClieGen As Integer = 0
	Dim dttTmp As New DataTable
	Try
		'Dalla personalizzazione preleva il cliente privato generico
    If oCleCore.LeggiPers("RetailClieGenerico", dttTmp) AndAlso _
    dttTmp IsNot Nothing AndAlso dttTmp.Rows.Count&gt;0 AndAlso NTSCInt(dttTmp.Rows(0)!val) &lt;&gt; 0 Then
	  	lClieGen = NTSCInt(dttTmp.Rows(0)!val)
	  ElseIf dttNegozio IsNot Nothing AndAlso dttNegozio.Rows.Count &gt;0 Then
			'Se non il codice cliente generico non verrà trovato nella personalizzazione GPV lo prenderà dal magazzino
			lClieGen = NTSCInt(dttNegozio.Rows(0)!tb_cliepriv)
    End If
    
    If lClieGen = 0 Then
	    oCleImex.WriteLog("Non è stato specificato un cliente generico nella personalizzazione GPV o nel negozio. Impossibile continuare.")
		  VARS!IECancelAll=True
    End If
    
    Return lClieGen
	Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ControlliPreScritturaFile.ImpostaClientePrivato':" &amp; ex.Message)
  End Try
End Function

Public Sub GeneraFileSarema_InizializzaFattura()
	Dim strbW1 As New StringBuilder
	Try
		If dttAnagra IsNot Nothing AndAlso dttAnagra.Rows.Count&gt;0 Then
			With dttAnagra.Rows(0)
	        strbW1.Append("OPFS,:")
	        strbW1.Append(NTSCStr(!an_descr1).Replace(",", ""))
	        strbW1.Append(",&lt;")
	        strbW1.Append(NTSCStr(!an_indir).Replace(",", ""))
	        strbW1.Append(",=")
	        strbW1.Append(NTSCStr(!an_citta).Replace(",", ""))
	        strbW1.Append(",&gt;")
	        If NTSCStr(!an_pariva).Trim = "" Then
	          strbW1.Append(NTSCStr(!an_codfis))
	        Else
	          strbW1.Append(NTSCStr(!an_pariva))
	        End If
	        Dim dDaPagare As Decimal  = NTSCDec(VARS!IeIn1Row!tm_totdoc) - NTSCDec(VARS!IeIn1Row!tm_abbuono) - NTSCDec(VARS!IeIn1Row!tm_totomag)
	        strbW1.Append(",V" &amp; (dDaPagare * 100).ToString("0"))
	        strbW1.Append(",N" &amp; NTSCInt(VARS!IeIn1Row!tm_numdoc))
	        strbW1.Append(vbCrLf)
	        strbW1.Append("DATE,:" &amp; Now.ToShortDateString.Replace("\", "-").Replace("/", "-") &amp; " " &amp; Now.ToShortTimeString.Replace(".", ":"))
	        GPVWriteLine(strbW1.ToString)
	      End With
	  Else
	     oCleImex.WriteLog("Non è stato possibile leggere i dati del conto " &amp; VARS!IeIn1Row!tm_conto)
       VARS!IECancelAll=True
       Return
		End If

	Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ControlliPreScritturaFile.GeneraFileSarema_InizializzaFattura':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>243</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>ControlliPreScritturaRiga</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Sub ControlliPreScritturaRiga 'Corrisponde in parte ai controlli in GeneraFileSarema_CreaFile
  Dim strDescr As String = ""
  Dim strLine As String = ""
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        'Salta se prezzi negativi
        '-------------------------------------------------------------------------------------
        If (NTSCDec(VARS!IeIn1Row!mm_preziva) * 100) &lt; 0 And NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          oApp.MsgBoxInfo("ATTENZIONE! Riga " &amp; NTSCStr(VARS!IeIn1Row!mm_riga) &amp; ", articolo " &amp; UCase(NTSCStr(VARS!IeIn1Row!mm_descr)) &amp; _
               " con prezzo negativo. Riga scartata dalla stampa dello scontrino.")
          VARS!IeCancelRow=True
          Return
        End If

        'Salta con elevate qtà
        '-------------------------------------------------------------------------------------
        If Math.Abs(ArrDbl(NTSCDec(VARS!IeIn1Row!mm_quant), 3)) &gt; 9999 Then
          oApp.MsgBoxInfo("Attenzione! impossibile stampare su registratore di cassa quantità superiori a 9999 (quantità indicata nella riga " &amp; _
                NTSCStr(VARS!IeIn1Row!mm_riga) &amp; ": " &amp; NTSCDec(VARS!IeIn1Row!mm_quant).ToString(oApp.FormatQta) &amp; _
                "). Questa riga verrà scartata dalla stampa.")
          VARS!IeCancelRow=True
          Return
        End If

        'Salta con moltiplicatori &lt;&gt; 1 (solo se non è abilitata l'opzione bEsponiValoreNetto)
        '-------------------------------------------------------------------------------------
        If Not bEsponiValoreNetto Then
          If NTSCInt(VARS!IeIn1Row!mm_perqta) &lt;&gt; 1 Then
            oApp.MsgBoxInfo("Attenzione! impossibile stampare su registratore di cassa prezzi con moltiplicatore diverso da 1 (moltiplicatore indicato nella riga " &amp; _
                NTSCStr(VARS!IeIn1Row!mm_riga) &amp; ": " &amp;  NTSCStr(VARS!IeIn1Row!mm_perqta) &amp; _
                "). Questa riga verrà scartata dalla stampa.")
            VARS!IeCancelRow=True
            Return
          End If
          If ArrDbl(NTSCDec(VARS!IeIn1Row!mm_preziva), 2) &lt;&gt; NTSCDec(VARS!IeIn1Row!mm_preziva) Then
            oApp.MsgBoxInfo("Attenzione! impossibile stampare su registratore di cassa prezzi con un numero di decimali superiore a 2 (prezzo indicato nella riga " &amp; _
                NTSCStr(VARS!IeIn1Row!mm_riga) &amp; ": " &amp; NTSCDec(VARS!IeIn1Row!mm_preziva).ToString(oApp.FormatPrzUn) &amp; _
                "). Questa riga verrà scartata dalla stampa.")
            VARS!IeCancelRow=True
            Return
          End If
        End If

        'Scarta le righe con sconti negativi
        '-------------------------------------------------------------------------------------
        'If Not bEsponiValoreNetto And (NTSCDec(VARS!IeIn1Row!tm_scont1) &lt; 0 Or NTSCDec(VARS!IeIn1Row!tm_scont2) &lt; 0 Or _
        'NTSCDec(VARS!IeIn1Row!tm_scopag) &lt; 0 Or NTSCDec(VARS!IeIn1Row!mm_scont1) &lt; 0 Or NTSCDec(VARS!IeIn1Row!mm_scont2) &lt; 0 Or _
        'NTSCDec(VARS!IeIn1Row!mm_scont3) &lt; 0 Or NTSCDec(VARS!IeIn1Row!mm_scont4) &lt; 0 Or NTSCDec(VARS!IeIn1Row!mm_scont5) &lt; 0 Or _
        'NTSCDec(VARS!IeIn1Row!mm_scont6) &lt; 0) Then
        '  oApp.MsgBoxInfo("ATTENZIONE! Riga " &amp; NTSCStr(VARS!IeIn1Row!mm_riga)&amp; ", articolo " &amp; UCase(VARS!IeIn1Row!mm_descr.ToString) &amp; _
        '         " con uno o più sconti negativi (maggiorazioni). Riga scartata dalla stampa dello scontrino.")
        '  VARS!IeCancelRow=True
        '  Return
        'End If
        '-------------------------------------------------------------------------------------
        '--- Salta con prezzi elevati
        '-------------------------------------------------------------------------------------
        If (NTSCDec(VARS!IeIn1Row!mm_preziva) * 100) &gt; 999999999 Then
          oApp.MsgBoxInfo("Attenzione! impossibile stampare su registratore di cassa prezzi superiori a 9999999.99 (prezzo indicato nella riga " &amp; _
                           NTSCStr(VARS!IeIn1Row!mm_riga) &amp; ": " &amp; ((NTSCDec(VARS!IeIn1Row!mm_preziva) * 100) / 100).ToString(oApp.FormatPrzUn) &amp; _
                           "). Questa riga verrà scartata dalla stampa.")
          VARS!IeCancelRow=True
          Return
        End If

        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 AndAlso NTSCStr(VARS!IeIn1Row!xxo_gift) = "N" AndAlso _
          (bEsponiValoreNetto Or (NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 And NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk1) = "S") _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "X" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "O" _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "M" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "P") AndAlso _
          NTSCStr(dttRegistratore.Rows(0)!tb_saqtaprzdescr) = "S" Then
            'Viene aggiunta una riga descrittiva prima dell'articolo
            GPVWriteLine("PRNT,: " &amp; CDblSQL(NTSCDec(VARS!IeIn1Row!mm_quant)) &amp; " X " &amp; _
            												 CDblSQL(ArrDbl(NTSCDec(VARS!IeIn1Row!mm_preziva), 2)) &amp; ";")
           
            If ArrDbl(NTSCDec(VARS!IeIn1Row!mm_perqta), 3) &lt;&gt; 1 Then
              GPVWriteLine("PRNT,: Moltipl. prezzo/q.ta " &amp; CDblSQL(NTSCDec(VARS!IeIn1Row!mm_perqta)) &amp; ";")
            End If        
        End If  
      Case 2
        VARS!IeCancelRow=True
        'Compone la riga con le promozioni del piede e la aggiunge alla liste di promozioni del piede
        strLine = "COST,V" 'filler3
        strLine = strLine &amp; ArrDbl((NTSCDec(VARS!IeIn1Row!mm_preziva) * ((100 - NTSCDec(VARS!IeIn1Row!tm_scopag)) / 100) * 100), 0) 'prezzo 
        strLine = strLine &amp; ",:" 'filler5
        strDescr = "  " &amp; NTSCStr(VARS!IeIn1Row!mm_descr)
        'Sostituisce caratteri ' , " : che possono dare problemi con alcuni rec di cassa
        strDescr = Replace(strDescr, "'", " ")
        strDescr = Replace(strDescr, ",", " ")
        strDescr = Replace(strDescr, """", " ")
        strDescr = Replace(strDescr, ":", " ")
        strLine = strLine &amp; Left(strDescr &amp; "".PadLeft(nMaxCharDesArt), nMaxCharDesArt) 'descrizione
        strLine = strLine &amp; ";" 'filler6

        lstPromozioniPiede.Add(strLine)
        Return
    End Select

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'ControlliPreScritturaRiga':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>245</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller1</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller1 As String
  Dim strResult As String = ""
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        strResult = "PLUD,CODE["
    End Select
  Return strResult
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller1':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>246</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVBarcode</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVBarcode As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        Return Left(NTSCStr(VARS!IeIn1Row!mm_matric) &amp; "             ", 13)
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVBarcode':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>247</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller2</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller2 As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        Return "],n"
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller2':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>248</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVReparto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVReparto As String
	Dim strReparto As String = ""
	Dim dtrIva As DataRow = Nothing
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
      	If NTSCInt(VARS!IeIn1Row!mm_codiva)&lt;&gt;0 Then
      		dtrIva = GetTabcivaRow(NTSCInt(VARS!IeIn1Row!mm_codiva))
      	End If

	      If dtrIva IsNot Nothing AndAlso NTSCInt(dtrIva!tb_reparto) &lt;&gt; 0 Then
	        strReparto = NTSCInt(dtrIva!tb_reparto).ToString("00")
	      Else
	        strReparto = NTSCInt(IIf(NTSCInt(VARS!IeIn1Row!ar_reparto) = 0, 1, NTSCInt(VARS!IeIn1Row!ar_reparto))).ToString("00") 'reparto
	    	End If
    End Select
    
    Return strReparto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVReparto':" &amp; ex.Message)
  End Try
End Function 

	Public Function GetTabcivaRow(ByVal nCodCiva As Integer) As DataRow
    Try
      'Se non è stato ancora caricato, legge tutti i codici (ma solo la prima volta)
      If dttCiva Is Nothing Then
        dttCiva = GetTabciva()
        dttCiva.PrimaryKey = New DataColumn() {dttCiva.Columns("tb_codciva")}
      End If

      'Controlla solo nella tabella temporanea e non sul db
      Return dttCiva.Rows.Find(nCodCiva)
    Catch ex As Exception
      oCleImex.WriteLog("Errore eseguendo la procedura 'GPVReparto.GetTabcivaRow':" &amp; ex.Message)
  	End Try
	End Function
  
	Public Function GetTabciva() As DataTable
    Dim dttOut As DataTable = Nothing
		Dim strSQL As String = ""
  	Try
      strSQL = "SELECT tabciva.* FROM tabciva"
      dttOut = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)

      Return dttOut
    Catch ex As Exception
      oCleImex.WriteLog("Errore eseguendo la procedura 'GPVReparto.GetTabciva':" &amp; ex.Message)
  	End Try
  End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>249</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller3</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller3 As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          Return ",P"
        End If
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller3':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>250</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVValoreRiga_Prezzo</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVValoreRiga_Prezzo As String  'valore riga netto
  Dim dValoreNetto as Decimal = 0d
  Dim dPrezzo as Decimal = 0d
  Dim dResult As String = ""
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          If (bEsponiValoreNetto Or (NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 And NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk1) = "S") _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "X" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "O" _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "M" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "P") Then
            'tb_cfgchk1 =&gt; resi a valore netto
            dValoreNetto = ArrDbl(ArrDbl(NTSCDec(VARS!IeIn1Row!mm_preziva) * NTSCDec(VARS!IeIn1Row!mm_quant) _
                          / NTSCInt(VARS!IeIn1Row!mm_perqta) * (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) _
                          / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont3)) _
                          / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont5)) _
                          / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont6)) _
                          / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scontp)) / 100 - NTSCDec(VARS!IeIn1Row!mm_scontv), 2) _
                          * (100 - NTSCDec(VARS!IeIn1Row!tm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 _
                          * (100 - NTSCDec(VARS!IeIn1Row!tm_scopag)) / 100, 2)
            If NTSCDec(VARS!IeIn1Row!mm_quant) &gt;= 0 Then
              dValoreNetto = ArrDbl((dValoreNetto * 100), 0) 
            Else
              dValoreNetto = ArrDbl((-dValoreNetto * 100), 0)
            End If
            dResult = dValoreNetto
          Else
            If NTSCDec(VARS!IeIn1Row!mm_quant) &gt;= 0 Then
              dPrezzo = ArrDbl((NTSCDec(VARS!IeIn1Row!mm_preziva) * 100), 0) 
            Else
              dPrezzo = ArrDbl((-NTSCDec(VARS!IeIn1Row!mm_preziva) * 100), 0)
            End If
            dResult = dPrezzo
          End If        
        End If    
    End Select
    Return dResult
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVValoreRiga_Prezzo':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>251</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller4</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller4 As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 AndAlso NTSCStr(VARS!IeIn1Row!xxo_gift) = "N" Then
          If Not (bEsponiValoreNetto Or (NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 And NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk1) = "S") _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "X" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "O" _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "M" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "P") Then          
            Return ",q" 
          End If        
        End If        
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller4':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>252</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVQta</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVQta As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 AndAlso NTSCStr(VARS!IeIn1Row!xxo_gift) = "N" Then
          If Not (bEsponiValoreNetto Or (NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 And NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk1) = "S") _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "X" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "O" _
          Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "M" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "P") Then          
            Return CDblSQL(Math.Abs(ArrDbl(NTSCDec(VARS!IeIn1Row!mm_quant), 3))) 'quantità (punto al posto della virgola)
          End If        
        End If  
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVQta':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>253</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller5</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller5 As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum)= 0 Then
          Return  ",:"     
        End If
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller5':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>254</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVDesart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVDesart As String
  Dim strDescr As String = ""
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          strDescr = NTSCStr(VARS!IeIn1Row!mm_descr)
          strDescr = Replace(strDescr, "'", " ")
          strDescr = Replace(strDescr, ",", " ")
          strDescr = Replace(strDescr, """", " ")
          strDescr = Replace(strDescr, ":", " ")
          strDescr = Left(strDescr &amp; "".PadLeft(nMaxCharDesArt), nMaxCharDesArt)    
        End If
    End Select
    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVDesart':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>255</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVReso</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVReso As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          If NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 OR NTSCStr(VARS!IeIn1Row!tm_tipork) = "N" Then
            Return ",R"
          End If
        End If  
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVReso':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>256</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GPVFiller6</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Function GPVFiller6 As String
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If NTSCInt(VARS!IeIn1Row!mm_acnum) = 0 Then
          Return ";" 
        End If  
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFiller6':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>257</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>GPVScontiOmaggi</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Sub GPVScontiOmaggi
  Dim dScont As Decimal = 0d
  Dim dScontV As Decimal= 0d
  Dim bScontoSingolo As Boolean = True
  Dim dValoreNetto As Decimal = 0d
  Dim dValoreLordo As Decimal = 0d
  Dim dValoreSconto As Decimal = 0d
  Dim dOmaggio As Decimal = 0d
  Dim strDescrOmaggio As String = ""
  Dim dttPromo As DataTable = Nothing
  Dim strSQL As String = ""
  Dim strLine As String = ""
  Try
    Select Case NTSCInt(VARS!IeIn1Row!xx_orderby)
      Case 0,1
        If Not (NTSCDec(VARS!IeIn1Row!tm_scont1) = 0 And NTSCDec(VARS!IeIn1Row!tm_scont2) = 0 And NTSCDec(VARS!IeIn1Row!tm_scopag) = 0 And _
           NTSCDec(VARS!IeIn1Row!mm_scont1) = 0 And NTSCDec(VARS!IeIn1Row!mm_scont2) = 0 And NTSCDec(VARS!IeIn1Row!mm_scont3) = 0 And _
           NTSCDec(VARS!IeIn1Row!mm_scont4) = 0 And NTSCDec(VARS!IeIn1Row!mm_scont5) = 0 And NTSCDec(VARS!IeIn1Row!mm_scont6) = 0 And _
           NTSCDec(VARS!IeIn1Row!mm_scontv) = 0) Then
          'Se abilitata l'opzione di registro bEsponiValoreNetto gli sconti sono già stati trattati prima
          If Not bEsponiValoreNetto And Not (NTSCDec(VARS!IeIn1Row!mm_quant) &lt; 0 And NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk1) = "S") _
             And Not (NTSCStr(VARS!IeIn1Row!mm_stasino) = "X" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "O" Or _
             NTSCStr(VARS!IeIn1Row!mm_stasino) = "M" Or NTSCStr(VARS!IeIn1Row!mm_stasino) = "P") Then
            'Determina se c'è uno o più sconti
            If NTSCDec(VARS!IeIn1Row!tm_scont1) &lt;&gt; 0 Then
              dScont = NTSCDec(VARS!IeIn1Row!tm_scont1)
            End If
            If NTSCDec(VARS!IeIn1Row!tm_scont2) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!tm_scont2)
            End If
            If NTSCDec(VARS!IeIn1Row!tm_scopag) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!tm_scopag)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont1) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont1)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont2) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont2)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont3) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont3)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont4) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont4)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont5) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont5)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scont6) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScont = NTSCDec(VARS!IeIn1Row!mm_scont6)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scontp) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScontV = NTSCDec(VARS!IeIn1Row!mm_scontp)
            End If
            If NTSCDec(VARS!IeIn1Row!mm_scontv) &lt;&gt; 0 Then
              If dScont &lt;&gt; 0 Then bScontoSingolo = False
              If bScontoSingolo Then dScontV = NTSCDec(VARS!IeIn1Row!mm_scontv)
            End If
            
            'Se abilitata, nello scontrino
            'espone lo sconto non in % ma a valore per evitare differenze sul totale scontrino
            'dovuti a calcoli diversi dello sconto nel reg. di cassa (anche se 1 solo sconto presente)
            If bScontiAValore Then bScontoSingolo = False

            'Se c'è un solo sconto lo applica con una DISC,%
            If bScontoSingolo Then
              If dScont &gt; 0 Then
                dScont = ArrDbl(dScont, 2) 'Comunque deve essere già a 2
                'Viene aggiunta una riga dopo l'articolo     
                GPVWriteLine("DISC,%" &amp; dScont.ToString("0.00").Replace(",", ".") &amp; ";") 'Formattato come 50.00, la parte decimale deve sempre apparire  + il punto al posto della virgola
              ElseIf dScont &lt; 0 Then
                GPVWriteLine("MAGG,%" &amp; (-dScont).ToString("0.00").Replace(",", ".") &amp; ";") 'Formattato come 50.00, la parte decimale deve sempre apparire  + il punto al posto della virgola
              ElseIf dScontV &gt; 0 Then
                GPVWriteLine("COUP,V" &amp; NTSCStr(ArrDbl(dScontV * 100, 0)) &amp; ";")
              ElseIf dScontV &lt; 0 Then
                GPVWriteLine("ADDI,V" &amp; NTSCStr(ArrDbl(-dScontV * 100, 0)) &amp; ";")
              End If
            Else
              'Se ci sono più sconti li trasforma a valore e li applica con una COUP,V
              'Questo evita inevitabili problemi di differenze dovute ad arrotondamenti
              dValoreNetto = ArrDbl(ArrDbl(NTSCDec(VARS!IeIn1Row!mm_preziva) * NTSCDec(VARS!IeIn1Row!mm_quant) * _
                            (100 - NTSCDec(VARS!IeIn1Row!mm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont2)) / 100 * _
                            (100 - NTSCDec(VARS!IeIn1Row!mm_scont3)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont4)) / 100 * _
                            (100 - NTSCDec(VARS!IeIn1Row!mm_scont5)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!mm_scont6)) / 100 * _
                            (100 - NTSCDec(VARS!IeIn1Row!mm_scontp)) / 100 - NTSCDec(VARS!IeIn1Row!mm_scontv), 2) * _
                            (100 - NTSCDec(VARS!IeIn1Row!tm_scont1)) / 100 * (100 - NTSCDec(VARS!IeIn1Row!tm_scont2)) / 100 * _
                            (100 - NTSCDec(VARS!IeIn1Row!tm_scopag)) / 100, 2)
              dValoreLordo = ArrDbl(NTSCDec(VARS!IeIn1Row!mm_preziva) * NTSCDec(VARS!IeIn1Row!mm_quant), 2)
              dValoreSconto = ArrDbl(dValoreLordo - dValoreNetto, 2)

              Dim strTestoImporti As String = ""
              Dim nSconti As Integer = 0
              If NTSCDec(VARS!IeIn1Row!tm_scont2) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!tm_scont2)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!tm_scont1) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!tm_scont1)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!tm_scopag) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!tm_scopag)) &amp; "%" : nSconti += 1

              If NTSCDec(VARS!IeIn1Row!mm_scontv) &lt;&gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scontv)) : nSconti += 1

              If NTSCDec(VARS!IeIn1Row!mm_scontp) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scontp)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont6) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont6)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont5) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont5)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont4) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont4)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont3) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont3)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont2) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont2)) &amp; "%" : nSconti += 1
              If NTSCDec(VARS!IeIn1Row!mm_scont1) &gt; 0 Then strTestoImporti = " " &amp; Math.Abs(NTSCDec(VARS!IeIn1Row!mm_scont1)) &amp; "%" : nSconti += 1


							If dValoreSconto &gt; 0 Then
                Dim strTestoSconto As String
                If nSconti = 1 Then
                  strTestoSconto = "Sconto" &amp; strTestoImporti.Replace(",00", "").Replace(",", ".")
                Else
                  strTestoSconto = "Sconti"
                End If
                strTestoSconto = strTestoSconto.PadRight(nMaxCharDesArt).Substring(0, nMaxCharDesArt)

                GPVWriteLine("COUP,V" &amp; ArrDbl(dValoreSconto * 100, 0) &amp; ",:" &amp; strTestoSconto &amp; ";")
              ElseIf dValoreSconto &lt; 0 Then
                Dim strTestoMag As String = ""
                If nSconti = 1 Then
                  strTestoMag = "Magg." &amp; strTestoImporti.Replace(",00", "").Replace(",", ".")
                Else
                  strTestoMag = "Magg."
                End If

                strTestoMag = strTestoMag.PadRight(nMaxCharDesArt).Substring(0, nMaxCharDesArt)

                GPVWriteLine("ADDI,V" &amp; ArrDbl(-dValoreSconto * 100, 0) &amp; ",:" &amp; strTestoMag &amp; ";")
              End If  
           End If
          End If
        End If

        'Per le righe di omaggio aggiunge una ulteriore riga per scontare il valore dell'articolo
        If NTSCInt(VARS!IeIn1Row!mm_acnum) &lt;&gt; 0 Then
          dValoreNetto = Math.Abs(GPVValoreNetto(NTSCDec(VARS!IeIn1Row!mm_preziva)))
          dOmaggio = dValoreNetto
          strDescrOmaggio = NTSCStr(VARS!IeIn1Row!mm_descr)
        Else
          Select Case NTSCStr(VARS!IeIn1Row!mm_stasino)
            Case "X" 'Omaggia tutto l'articolo
              dValoreNetto = GPVValoreNetto(NTSCDec(VARS!IeIn1Row!mm_preziva))
              dOmaggio = dValoreNetto

              strSQL = "SELECT * FROM tabrepr WHERE codditt = " &amp; CStrSQL(strDittaCorrente) &amp; " AND tb_codrepr IN (" &amp; _
                        NTSCInt(VARS!IeIn1Row!mm_codrepr1) &amp; ", " &amp; NTSCInt(VARS!IeIn1Row!mm_codrepr2) &amp; ", " &amp; _
                        NTSCInt(VARS!IeIn1Row!mm_codrepr3) &amp; ", " &amp; NTSCInt(VARS!IeIn1Row!mm_codrepr4) &amp; ", " &amp; _
                        NTSCInt(VARS!IeIn1Row!mm_codrepr5) &amp; ", " &amp; NTSCInt(VARS!IeIn1Row!mm_codrepr6) &amp; _
                        ") AND tb_tipopr IN ('M', 'N', 'F', 'A')"
              dttPromo = ocldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
              If dttPromo.Rows.Count = 0 Then
                strDescrOmaggio = "  " &amp;  "Omaggio"
              Else
                strDescrOmaggio = "  " &amp; NTSCStr(dttPromo.Rows(0)!tb_desrepr)
              End If
          Case "O", "M" 'Il cliente deve comunque pagare l'iva
            dValoreNetto = GPVValoreNetto(NTSCDec(VARS!IeIn1Row!mm_prezzo))
            dOmaggio = dValoreNetto
            strDescrOmaggio = "  " &amp; "Omaggio"
          Case "P" 'Omaggia tutto l'articolo
            dValoreNetto = GPVValoreNetto(NTSCDec(VARS!IeIn1Row!mm_preziva))
            dOmaggio = dValoreNetto
            strDescrOmaggio = "  " &amp;"Omaggio"
        End Select
      End If

      If dOmaggio &lt;&gt; 0 Then
        'Compone la riga
        Select Case NTSCStr(VARS!IeIn1Row!mm_stasino)         
          Case "X", "M", "O", "P"
            strLine = "COUP,V"
          Case Else
            strLine = "COST,V"
        End Select

        strLine = strLine &amp; ArrDbl(dOmaggio * 100, 0)
        strLine = strLine &amp; ",:"
        strDescrOmaggio = Replace(strDescrOmaggio, "'", " ")
        strDescrOmaggio = Replace(strDescrOmaggio, ",", " ")
        strDescrOmaggio = Replace(strDescrOmaggio, """", " ")
        strDescrOmaggio = Replace(strDescrOmaggio, ":", " ")
        strLine = strLine &amp; Left(strDescrOmaggio &amp; "".PadLeft(nMaxCharDesArt), nMaxCharDesArt) 'descrizione
        strLine = strLine &amp; ";"
        GPVWriteLine(strLine)
      End If
    End Select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVScontiOmaggi':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>258</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>GPVFineScontrino</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public Sub GPVFineScontrino
  Dim dtrNew as DataRow = Nothing
  Dim dttClie As New DataTable
  Dim strSQL As String = ""
  Dim dttTmp As New DataTable
  Dim lTessera as Integer = 0
  Dim dTotpunti as Decimal = 0d
  Dim dTotpuntiTessera as Decimal = 0d
  Dim strTipoPagSL As String = ""
  Dim nCodIva As Integer = 0
  Try
    'Inserisce le promozioni del piede
    For Each strPromo As String In lstPromozioniPiede
      GPVWriteLine(strPromo)
    Next

    lTessera = NTSCInt(VARS!IeIn1Row!tm_codtes)
    '---------------------------------------------------------------------------------------
    '--- Aggiunge le spese di trasporto, imballo, ecc... (se presenti)
    '---------------------------------------------------------------------------------------
    strSQL = "SELECT TOP 1 * FROM tabpeve WHERE tb_codpeve = 1"
    dttTmp = ocldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
    If dttTmp.Rows.Count &gt; 0 Then
      nCodIva = NTSCInt(dttTmp.Rows(0)!tb_ivainc)
    End If
    If NTSCInt(VARS!IeIn1Row!tm_codese) &gt; 0 Then 
      nCodIva = NTSCInt(VARS!IeIn1Row!tm_codese)
    End If
    If NTSCDec(VARS!IeIn1Row!tm_speacc) &lt;&gt; 0 Then
      GPVWriteLine("PLUD,CODE[             ],n01,P" &amp; NTSCDec(VARS!IeIn1Row!tm_speacc) * _
                  (100 + ocldBase.AliquotaIva(nCodIva)) &amp; ",q1,:Trasporto;")
    End If
    If NTSCDec(VARS!IeIn1Row!tm_speimb) &lt;&gt; 0 Then
      GPVWriteLine("PLUD,CODE[             ],n01,P" &amp; NTSCDec(VARS!IeIn1Row!tm_speimb) * _
                  (100 + ocldBase.AliquotaIva(nCodIva)) &amp; ",q1,:Imballo;")
    End If
    If NTSCDec(VARS!IeIn1Row!tm_speinc) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn1Row!tm_flspinc) = "S" Then
      GPVWriteLine("PLUD,CODE[             ],n01,P" &amp; NTSCDec(VARS!IeIn1Row!tm_speinc) * _
                  (100 + ocldBase.AliquotaIva(nCodIva)) &amp; ",q1,:Incasso;")
    End If
    If NTSCDec(VARS!IeIn1Row!tm_bolli) &lt;&gt; 0 AndAlso NTSCStr(VARS!IeIn1Row!tm_flboll) = "S" Then
      GPVWriteLine("PLUD,CODE[             ],n01,P" &amp; NTSCDec(VARS!IeIn1Row!tm_bolli) * _
                  (100 + ocldBase.AliquotaIva(nCodIva)) &amp; ",q1,:Bolli;")
    End If

    '---------------------------------------------------------------------------------------
    '--- Scrive l'abbuono
    '---------------------------------------------------------------------------------------
    'Obsoleto, non serve e non viene più utilizzato.  
    'If NTSCStr(VARS!IeIn1Row!tm_tipork) &lt;&gt; "N" Then
    '	GPVWriteLine("CLER,C001;")
    'End If

    If dAbbuo &gt; 0 Then
      GPVWriteLine("COST,V" &amp; NTSCStr(ArrDbl(dAbbuo * 100, 0)) &amp; ";")
    End If
    
    '--Corrisponde alla procedura GeneraFileSarema_EsponiTessera
    '---------------------------------------------------------------------------------------
    '--- Espone dati aggiuntivi in fondo allo scontrino
    '---------------------------------------------------------------------------------------
    If NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk2) = "S" AndAlso lTessera &lt;&gt; 0 AndAlso _
    oCldBase.ValCodiceDB(NTSCStr(VARS!IeIn1Row!tm_conto), strDittaCorrente, "ANAGRA", "N", "", dttClie) Then
        GPVWriteLine("EXTL,N1,:***************")
        GPVWriteLine("EXTL,N2,:" &amp; NTSCStr(dttClie.Rows(0)!an_descr1).PadRight(nMaxCharDesArt).Substring(0, nMaxCharDesArt))
        GPVWriteLine("EXTL,N3,:Tess. n. " &amp; lTessera)
        strSQL = "SELECT mp_numptida FROM movpunti " &amp; _
               " WHERE codditt = " &amp; CStrSQL(strDittaCorrente) &amp; _
               " AND mp_tipork = " &amp; CStrSQL(VARS!IeIn1Row!tm_tipork) &amp; _
               " AND mp_anno = " &amp; NTSCInt(VARS!IeIn1Row!tm_anno) &amp; _
               " AND mp_serie = " &amp; CStrSQL(VARS!IeIn1Row!tm_serie) &amp; _
               " AND mp_numdoc = " &amp; NTSCInt(VARS!IeIn1Row!tm_numdoc) &amp; _
               " AND mp_causale = 'A'"
        dttTmp = ocldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
        If dttTmp.Rows.Count &gt; 0 Then
          dTotpunti = NTSCDec(dttTmp.Rows(0)!mp_numptida)
        End If

        strSQL = "SELECT SUM(mp_numpti) AS xx_punti FROM movpunti " &amp; _
               " INNER JOIN refites ON movpunti.codditt = refites.codditt AND ret_codtes = mp_codtes " &amp; _
               " INNER JOIN tabrecp ON movpunti.codditt = tabrecp.codditt AND tb_codrecp = mp_codrecp " &amp; _
               " WHERE movpunti.codditt = " &amp; CStrSQL(strDittaCorrente) &amp; _
               " AND ret_conto = (SELECT ret_conto FROM refites WHERE codditt = " &amp; CStrSQL(strDittaCorrente) &amp; _
               " AND ret_codtes = " &amp; lTessera &amp; ")" &amp; _
               " AND mp_codrecp = (SELECT rel_codrecp FROM relinkct " &amp; _
               "                   INNER JOIN tabrett ON tabrett.codditt = relinkct.codditt AND rel_codrett = tb_codrett " &amp; _
               "                   INNER JOIN refites ON tabrett.codditt = refites.codditt AND rel_codrett = ret_codrett " &amp; _
               "                   INNER JOIN tabrecp ON relinkct.codditt = tabrecp.codditt AND rel_codrecp = tb_codrecp " &amp; _
               "                   WHERE relinkct.codditt = " &amp; CStrSQL(strDittaCorrente) &amp; _
               "                   AND ret_codtes = " &amp; lTessera &amp; _
               "                   AND tb_datini &lt;= " &amp; CDataSQL(Now) &amp; _
               "                   AND tb_datfin &gt;= " &amp; CDataSQL(Now) &amp; ")" &amp; _
               " AND tb_datini &lt;= " &amp; CDataSQL(Now) &amp; _
               " AND tb_datfin &gt;= " &amp; CDataSQL(Now)
        dttTmp = ocldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
        If dttTmp.Rows.Count &gt; 0 Then
          dTotpuntiTessera = NTSCDec(dttTmp.Rows(0)!xx_punti)
        End If

        If dTotpunti &lt;&gt; 0 OrElse dTotpuntiTessera &lt;&gt; 0 Then
          GPVWriteLine("EXTL,N4,: Punti " &amp; dTotpunti)
          GPVWriteLine("EXTL,N5,: Saldo " &amp; dTotpuntiTessera + dTotpunti)
          GPVWriteLine("EXTL,N6,:***************")
        Else
          GPVWriteLine("EXTL,N4,:***************")
        End If
      End If
      
      '---------------------------------------------------------------------------------------
      '--- Espone il codice fiscale\partita iva del cliente nello scontrino (se disponibili)
      '---------------------------------------------------------------------------------------
			GeneraFileSarema_EsponiCFPIva
			
      '--- Scrive il tipo pagamento, specifico per BSVEBOLL
      If bEsponiTipoPag Then
        If NTSCDec(VARS!IeIn1Row!tm_pagato2) &gt; 0 Then
          oCldBase.ValCodiceDb(NTSCStr(VARS!IeIn1Row!tm_codpaga2), strDittaCorrente, "TABPAGA", "N", "", dttTmp)
          If dttTmp.Rows.Count &gt; 0 Then
            Select Case NTSCStr(dttTmp.Rows(0)!tb_tipincecr).ToUpper
              Case "A" : strTipoPagSL = "CHEQ" 'assegno
              Case "V" : strTipoPagSL = "CARD" 'carta di credito
              Case "B" : strTipoPagSL = "TEND,N4" 'bancomat
              Case "F" : strTipoPagSL = "TEND,N5" 'finanziamento
              Case "Z" : strTipoPagSL = "TEND,N6" 'altro
              Case "P" : strTipoPagSL = "TEND,N7" 'Buono pasto
              Case Else : strTipoPagSL = "CASH" 'Negli altri casi lascia CASH (contanti, non definito)
            End Select
          End If
          GPVWriteLine(strTipoPagSL &amp; ",V" &amp; NTSCStr(ArrDbl(NTSCDec(VARS!IeIn1Row!tm_pagato2) * 100, 0)) &amp; ";")
        End If

        If NTSCDec(VARS!IeIn1Row!tm_pagato) &gt; 0 Then
          oCldBase.ValCodiceDb(NTSCStr(VARS!IeIn1Row!tm_codpaga), strDittaCorrente, "TABPAGA", "N", "", dttTmp)
          If dttTmp.Rows.Count &gt; 0 Then
            Select Case NTSCStr(dttTmp.Rows(0)!tb_tipincecr).ToUpper
              Case "A" : strTipoPagSL = "CHEQ" 'assegno
              Case "V" : strTipoPagSL = "CARD" 'carta di credito
              Case "B" : strTipoPagSL = "TEND,N4" 'bancomat
              Case "F" : strTipoPagSL = "TEND,N5" 'finanziamento
              Case "Z" : strTipoPagSL = "TEND,N6" 'altro
              Case "P" : strTipoPagSL = "TEND,N7" 'Buono pasto
              Case Else : strTipoPagSL = "CASH" 'Negli altri casi lascia CASH (contanti, non definito)
            End Select
          End If
          GPVWriteLine(strTipoPagSL &amp; ",V" &amp; NTSCStr(ArrDbl(NTSCDec(VARS!IeIn1Row!tm_pagato) * 100, 0)) &amp; ";")
        End If

        If NTSCDec(VARS!IeIn1Row!tm_pagato) = 0 AndAlso NTSCDec(VARS!IeIn1Row!tm_pagato2) = 0 Then
          GPVWriteLine("CASH;")
        End If

      ElseIf bEsponiResto Then
      '--- Scrive il resto se richiesto, espone e testa fisso CONTANTE=CACHE
        If NTSCDec(VARS!IeIn1Row!tm_resto) &gt; 0 Then
          GPVWriteLine("CASH,V" &amp; NTSCStr(ArrDbl((NTSCDec(VARS!IeIn1Row!tm_pagato) + _
                        NTSCDec(VARS!IeIn1Row!tm_pagato2)) * 100, 0)) &amp; ";")
        Else
          GPVWriteLine("CASH;")
        End If
      Else
        '--- Caso normale: espone sempre CASH;
        GPVWriteLine("CASH;")
      End If
      
  	  Select Case NTSCStr(VARS!IeIn1Row!tm_tipork)
        Case "A", "S"
        	GPVWriteLine("CLFS;")
      End Select		
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFineScontrino':" &amp; ex.Message)
  End Try
End Sub 

Public Sub GeneraFileSarema_EsponiCFPIva
  Dim strCodice As String = ""
	Try
	 	If NTSCStr(VARS!IeIn1Row!tm_tipork) = "S" OrElse NTSCStr(VARS!IeIn1Row!tm_tipork) = "A" Then
	 		Return
	  End If

		If NTSCStr(dttRegistratore.Rows(0)!tb_cfgchk5) = "S" Then
        'se è un cliente privato generico deve prendere i dati da testmag, altrimenti dall'anagrafica del cliente
        If lClienteGenerico = NTSCInt(VARS!IeIn1Row!tm_conto) Then
          strCodice = NTSCStr(VARS!IeIn1Row!tm_ancodfis)
        Else
          If NTSCStr(dttAnagra.Rows(0)!an_privato) = "S" Then
            strCodice = NTSCStr(dttAnagra.Rows(0)!an_codfis)
            If strCodice.Trim = "" Then strCodice = NTSCStr(dttAnagra.Rows(0)!an_pariva)
          Else
            strCodice = NTSCStr(dttAnagra.Rows(0)!an_pariva)
            If strCodice.Trim = "" Then strCodice = NTSCStr(dttAnagra.Rows(0)!an_codfis)
          End If
        End If
        If strCodice.Trim &lt;&gt; "" Then
	        GPVWriteLine("PRNT,:" &amp; strCodice &amp; ";")
	        GPVWriteLine("FUNC,N39;")
        End If
      End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVFineScontrino.GeneraFileSarema_EsponiCFPIva':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>260</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>GPVEnd</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.IO
Public Sub GPVEnd
  Try
    If Not CBool(VARS!IECancelAll) Then
      If NTSCStr(VARS!Ie1NomeFileExt)&lt;&gt; strPath &amp; strIENomeFileSarema Then
        File.Move(VARS!Ie1NomeFileExt, strPath &amp; strIENomeFileSarema) 
      End If  
      System.IO.File.Copy(strPath &amp; "SR_STARX.001", strPath &amp; strIENomeFileSemaforoSarema)   
    End If
 Catch ex As Exception
    oApp.MsgBoxInfo("Errore durante la rimonima del file " &amp; UCase(strPath &amp; "SR_STARX.001") &amp; _
           " in " &amp; UCase(strPath &amp; strIENomeFileSemaforoSarema) &amp; ". " &amp; vbCrLf &amp; vbCrLf &amp; ex.Message)
    oCleImex.WriteLog("Errore eseguendo la procedura 'GPVEnd':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>300</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>BSCodditt</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function BSCodditt As String
  Dim strDitta As String = ""
  Try
    strDitta =  NTSCStr(VARS!IeIn1Row!Codiceazienda)

    If strDitta.Trim.Length = 0 Then
      strDitta = oApp.Ditta.ToString
    Else
      If Not oCldBase.ValCodiceDb(strDitta, strDitta, "TABANAZ", "S", "") Then
        strbLogMess.AppendLine("Ditta '" &amp; strDitta &amp; _
                               "' Reg. nr. " &amp;  NTSCStr(VARS!IeIn1Row!Numreg) &amp; _
                               " Riga " &amp; NTSCStr(VARS!IeIn1Row!Progressivo) &amp; _
                               ": Codice ditta '" &amp; strDitta &amp; _
                               "' inesistente. La registrazione non è stata inserita.") 
        VARS!IeCancelRow=True
      End If
    End If

    Return strDitta
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSCodditt':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>301</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>BSDare</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function BSDare As Decimal
  Dim dImporto As Decimal = 0d
  Try
    Select Case NTSCStr(VARS!IeIn1Row!Segno)
      Case "D"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo)
    End Select

    Return dImporto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSDare':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>302</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>BSAvere</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function BSAvere As Decimal
 Dim dImporto As Decimal = 0d
  Try
    Select Case NTSCStr(VARS!IeIn1Row!Segno)
      Case "A"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo) * (-1)
    End Select

    Return dImporto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSAvere':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>303</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>BSNumreg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function BSNumreg As Integer
  Try
    Select Case NTSCInt(VARS!IeIn1Row!Progressivo)
      'Il numero della registrazione viene creato solo per i progressivi 0/1, 
      'altre righe verranno aggiunte alla stessa registrazione
      Case 0,1
        lNumreg = oCldBase.LegAggRegcDitt(NTSCStr(VARS!IeOu1Row!codditt), NTSCStr(NTSCDate(VARS!IeOu1Row!pn_datreg)))
    End Select

    Return lNumreg
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSNumreg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>304</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>BSCodConto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function BSCodConto As Integer
  Dim lConto As Integer = 0
  Try
    lConto =  NTSCInt(VARS!IeIn1Row!CodConto)     
    If Not (lConto&lt;&gt;0 AndAlso oCldBase.ValCodiceDb(NTSCStr(lConto), NTSCStr(VARS!IeOu1Row!codditt), "ANAGRA", "N", "")) Then
      strbLogMess.AppendLine("Ditta '" &amp; NTSCStr(VARS!IeOu1Row!codditt)  &amp; "' Reg. nr. " &amp;  NTSCStr(VARS!IeIn1Row!Numreg) &amp; _
                              " Riga " &amp; NTSCStr(VARS!IeIn1Row!Progressivo) &amp; _
                              " del " &amp;  NTSCDate(VARS!IeOu1Row!pn_datreg).ToString("d") &amp; ": Codice conto '" &amp; lConto &amp; _
                              "' inesistente. La registrazione non è stata inserita.") 
      VARS!IeCancelRow=True
    End If
    Return lConto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSCodConto':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>305</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>BSBeforeAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.Text
Imports System.IO

Public strbLogMess As New StringBuilder
Public strLogFilePath As String = ""
Public oCldBase As CLD__BASE = Nothing
Public lNumreg As Integer = 0

Sub BSBeforeAll
  Dim strFilePath As String = ""
  Dim strPath As String = ""
  Dim strPathArr as String() = Nothing
  Try
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    'Percorso completo al file esterno
    strFilePath = NTSCStr(VARS!Ie1NomeFileExt)
    'Definizione del percorso
    strPathArr  = strFilePath.Split("\\")
    For i As Integer = 0 To strPathArr.Length-2
      strPath = strPath &amp; strPathArr(i) &amp; "\"  
    Next

  strLogFilePath = strPath &amp; "CONTABILERROR.txt"

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSBeforeAll':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>306</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>BSAfterAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub BSAfterAll
  Dim lw1 As StreamWriter = Nothing
  Try
    If strbLogMess.ToString.Length &gt; 0 Then
      lw1 = New StreamWriter(strLogFilePath, False)
      lw1.WriteLine("--------------------------------------------------------------------")
      lw1.WriteLine("Profilo 300 - Business Salary Import")
      lw1.WriteLine("ERRORI CONTABILI")
      lw1.WriteLine("--------------------------------------------------------------------")
      lw1.WriteLine(strbLogMess.toString)
      lw1.WriteLine("--------------------------------------------------------------------")
      lw1.Flush()
      lw1.Close()

      oCleImex.WriteLog("Nel file di log '" &amp; strLogFilePath &amp; "' sono presenti i messaggi di errore.")
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'BSAfterAll':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>310</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>GISBeforeAll</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.Globalization
Imports System.Text.RegularExpressions

Public oCldBase As CLD__BASE = Nothing
Public lNumreg As Integer = 0
Public dtDatreg As Date = Nothing
Public lRigaFile As Integer = 0
Public lRiga As Integer = 0
Public strDitta as String = ""

Sub GISBeforeAll
  Try
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISBeforeAll':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>311</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISDatreg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISDatreg As Date
  Try
    Return dtDatreg
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISDatreg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>312</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISRiga</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISRiga As Integer
  Try
    lRiga = lRiga +1
    Return lRiga
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISRiga':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>313</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISNumreg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISNumreg As Integer
  Try
    lRigaFile = lRigaFile + 1

    If NTSCStr(VARS!IeOu1Row!codditt).Trim.Length &lt;&gt; 0 AndAlso oCldBase.ValCodiceDb(NTSCStr(VARS!IeOu1Row!codditt), NTSCStr(VARS!IeOu1Row!codditt), "TABANAZ", "S", "") Then
      If NTSCStr(VARS!IeOu1Row!codditt)&lt;&gt;strDitta Then

        If DateTime.TryParse(VARS!IeIn1Row!Data, dtDatreg) Then
          strDitta = NTSCStr(VARS!IeOu1Row!codditt)
          lNumreg = oCldBase.LegAggRegcDitt(strDitta, NTSCStr(dtDatreg))
          oCleImex.WriteLog("Creazione registrazione numero " &amp; lNumreg &amp; " del " &amp; dtDatreg &amp; " per la ditta " &amp; strDitta  &amp; " in corso...")
        Else
          oCleImex.WriteLog("Errore: la data " &amp; VARS!IeIn1Row!Data &amp; " rilevata nella riga " &amp; lRigaFile &amp; _
                          " del file non è valida. La riga verrà scartata. Verificare le registrazioni create al termine dell'elaborazione.")
          VARS!IECancelAll=True
        End If

      End If
    Else
      oCleImex.WriteLog("Errore: il codice ditta " &amp; NTSCStr(VARS!IeOu1Row!codditt) &amp; " rilevato nella riga " &amp; lRigaFile &amp; _
                        " del file è inesistente in Business. La riga verrà scartata. Verificare le registrazioni create al termine dell'elaborazione.") 
      VARS!IeCancelRow=True
    End If

    Return lNumreg 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISNumreg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>314</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISCodconto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISCodconto As Integer
  Dim strConto As String = ""
  Dim lConto As Integer = 0
  Try
    strConto = NTSCStr(VARS!IeIn1Row!CodConto)
    If strConto.Contains(".") Then
      strConto = Regex.Replace(strConto, "\.", "")
      strConto = Left(strConto,4) &amp; "0" &amp; Right(strConto,3)
    End If
    lConto = NTSCInt(strConto)
    If lConto=0 OrElse Not oCldBase.ValCodiceDb(strConto, NTSCStr(VARS!IeOu1Row!codditt), "ANAGRA", "N", "") Then
      oCleImex.WriteLog("Errore: il conto " &amp; lConto &amp; " rilevato nella riga " &amp; lRigaFile &amp; _
                             " del file è inesistente in business. La riga verrà scartata.") 
      VARS!IeCancelRow=True
    End If

    Return lConto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISCodconto':" &amp; ex.Message)
    VARS!IeCancelRow=True
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>315</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISDare</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISDare As Decimal
  Dim dImporto As Decimal = 0d
  Try
    Select Case NTSCStr(VARS!IeIn1Row!Segno)
      Case "D"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo)
    End Select

    Return dImporto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISDare':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>316</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISAvere</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISAvere As Decimal
  Dim dImporto As Decimal = 0d
  Try
    Select Case NTSCStr(VARS!IeIn1Row!Segno)
      Case "A"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo)
    End Select

    Return dImporto

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISAvere':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>317</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISYear</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISYear As Integer
  Try
    Return dtDatreg.Year
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISYear':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>318</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISOperatore</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISOperatore As String
  Try
    Return oApp.User.Nome
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISOperatore':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>319</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISDataCorrente</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISDataCorrente As Date
  Try
    Return Date.Now
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISDataCorrente':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>320</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISDescrCaus</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISDescrCaus As String
  Dim strDescr As String = ""
  Try
    If Not oCldBase.ValCodiceDb(NTSCStr(VARS!IeOu1Row!pn_causale), NTSCStr(VARS!IeOu1Row!codditt), "TABCAUC", "N", strDescr )
       oCleImex.WriteLog("Causale '" &amp; NTSCStr(VARS!IeOu1Row!pn_causale) &amp; "' non rilevata.")
    End If

    Return strDescr
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISDescrCaus':" &amp; ex.Message)
  Finally

  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>321</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>GISImporto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function GISImporto As Decimal
 Dim dImporto As Decimal = 0d
  Try
    Select Case NTSCStr(VARS!IeIn1Row!Segno)
      Case "D"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo)
      Case "A"
        dImporto = NTSCDec(VARS!IeIn1Row!Importo) *(-1)
    End Select

    Return dImporto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'GISImporto':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>421</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoDitta</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoDitta

  Try
    Return strCodditt
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoDitta':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>422</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoConto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoConto

  Try
    Return lConto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoConto':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>423</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoCodmarc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoCodmarc

  Try
    Return iCodMarca
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoCodmarc':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>424</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoConfez2</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoConfez2

  Try
    Return strUMP2
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoConfez2':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>425</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoCodiva</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoCodiva

  Try
    Return iCodiva
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoCodiva':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>426</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoBarcode</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoBarcode

  Try
  
     if VARS!IeIn1Row!barcode.equals(DBNull.value) orelse VARS!IeIn1Row!barcode.replace("0","").Trim = "" orelse not isNumeric(VARS!IeIn1Row!barcode) then
         return DBNull.value
     else
         return VARS!IeIn1Row!barcode
     end if

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoBarcode':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>501</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>RigheOrdineScadute</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function RigheOrdineScadute(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                              ByRef dttMsgOutParam As DataTable) As Boolean
      'strCodditt è la ditta da esaminare (= " " significa tutte)
      Dim strSQL As String = ""
      Dim dttDitte As New DataTable
      Dim dttOrdini As New DataTable
      Dim strTipork As String = ""
      Dim strTipo As String = ""
      Dim oCldBase As New CLD__BASE
    Try
      oCldBase.Init(oApp)

      If strCodditt.Trim &lt;&gt; "" Then
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " WHERE codditt = " &amp; CStrSQL(strCodditt)
      Else
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " ORDER BY codditt"
      End If

      dttDitte = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
      If Not dttDitte Is Nothing AndAlso dttDitte.Rows.Count &gt; 0 Then
        For Each dtrDitte As DataRow In dttDitte.Rows


          strSQL = " SELECT testord.td_datord, testord.td_conto, movord.*, anagra.an_descr1 " &amp; _
                   " FROM (testord INNER JOIN movord ON testord.codditt = movord.codditt" &amp; _
                   " AND testord.td_tipork = movord.mo_tipork" &amp; _
                   " AND testord.td_anno = movord.mo_anno" &amp; _
                   " AND testord.td_serie = movord.mo_serie" &amp; _
                   " AND testord.td_numord = movord.mo_numord)" &amp; _
                   " INNER JOIN anagra ON testord.codditt = anagra.codditt" &amp; _
                   " AND testord.td_conto = anagra.an_conto" &amp; _
                   " WHERE movord.codditt = " &amp; CStrSQL(dtrDitte!codditt) &amp; _
                   " AND (mo_tipork = 'O' Or mo_tipork = 'H') " &amp; _
                   " AND mo_flevas = 'C' " &amp; _
                   " AND mo_datcons &lt; " &amp; CDataSQL(Now)
          strSQL = strSQL &amp; " ORDER BY mo_tipork, mo_anno DESC, mo_serie, mo_numord DESC, mo_riga"
          dttOrdini = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)

          If Not dttOrdini Is Nothing AndAlso dttOrdini.Rows.Count &gt; 0 Then
            For Each dtrOrdini As DataRow In dttOrdini.Rows

              If strTipork &lt;&gt; NTSCStr(dtrOrdini.Item("mo_tipork")) Then
                strTipork = NTSCStr(dtrOrdini.Item("mo_tipork"))
                If strTipork = "O" Then strTipo = "Ordine a fornitore" Else strTipo = "Ordine di produzione"

                dttMsgOutParam.Rows.Add(dttMsgOutParam.NewRow())
                dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)!codditt = NTSCStr(dtrDitte!codditt)
              End If

              If NTSCStr(dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1).Item("strMsg")) &lt;&gt; "" Then
                dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1).Item("strMsg") = NTSCStr(dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1).Item("strMsg")) &amp; vbCrLf &amp; _
                                           strTipo &amp; " del " &amp; NTSCDate(dtrOrdini!td_datord) &amp; _
                                             " anno " &amp; NTSCInt(dtrOrdini!mo_anno) &amp; _
                                             " serie '" &amp; NTSCStr(dtrOrdini!mo_serie) &amp; "'" &amp; _
                                             " numero " &amp; NTSCLng(dtrOrdini!mo_numord) &amp; _
                                             " fornitore " &amp; NTSCLng(dtrOrdini!td_conto) &amp; _
                                             " - '" &amp; NTSCStr(dtrOrdini!an_descr1) &amp; _
                                             "' riga " &amp; NTSCLng(dtrOrdini!mo_riga) &amp; _
                                             " articolo '" &amp; NTSCStr(dtrOrdini!mo_codart) &amp; "'" &amp; _
                                             " - '" &amp; NTSCStr(dtrOrdini!mo_descr) &amp; _
                                             "' quantità residua " &amp; NTSCDec(dtrOrdini!mo_quant) - NTSCDec(dtrOrdini!mo_quaeva) &amp; _
                                             " data consegna " &amp; NTSCDate(dtrOrdini!mo_datcons) &amp; "."
              Else
                With dtrOrdini
                  dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1).Item("strMsg") = strTipo &amp; " del " &amp; NTSCDate(!td_datord) &amp; _
                                             " anno " &amp; NTSCInt(!mo_anno) &amp; _
                                             " serie '" &amp; NTSCStr(!mo_serie) &amp; "'" &amp; _
                                             " numero " &amp; NTSCLng(!mo_numord) &amp; _
                                             " fornitore " &amp; NTSCLng(!td_conto) &amp; _
                                             " - '" &amp; NTSCStr(!an_descr1) &amp; _
                                             "' riga " &amp; NTSCLng(!mo_riga) &amp; _
                                             " articolo '" &amp; NTSCStr(!mo_codart) &amp; "'" &amp; _
                                             " - '" &amp; NTSCStr(!mo_descr) &amp; _
                                             "' quantità residua " &amp; NTSCDec(!mo_quant) - NTSCDec(!mo_quaeva) &amp; _
                                             " data consegna " &amp; NTSCDate(!mo_datcons) &amp; "."

                End With
              End If
            Next
          End If
        Next
      End If

      If Not dttMsgOutParam Is Nothing AndAlso dttMsgOutParam.Rows.Count &gt; 0 Then Return True

    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function RigheOrdineScadute(ByVal strCodditt, ByVal dynMsgOutParam)
  '  'strCodditt è la ditta da esaminare (= " " significa tutte)
  '  Dim strSQL
  '  Dim snaTmp0, snaTmp
  '  Dim strTipork, strTipo

  '  If Trim(strCodditt) &lt;&gt; "" Then
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " WHERE codditt = " &amp; convstrnullsql(strCodditt)
  '  Else
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " ORDER BY codditt"
  '  End If
  '  snaTmp0 = gdb.OpenRecordset(strSQL, dbOpenSnapshot)
  '  If Not snaTmp0.eof Then
  '    snaTmp0.movefirst()

  '    While Not snaTmp0.eof

  '    strSQL = " SELECT testord.td_datord, testord.td_conto, movord.*, anagra.an_descr1 " &amp; _
  '             " FROM (testord INNER JOIN movord ON testord.codditt = movord.codditt" &amp; _
  '             " AND testord.td_tipork = movord.mo_tipork" &amp; _
  '             " AND testord.td_anno = movord.mo_anno" &amp; _
  '             " AND testord.td_serie = movord.mo_serie" &amp; _
  '             " AND testord.td_numord = movord.mo_numord)" &amp; _
  '             " INNER JOIN anagra ON testord.codditt = anagra.codditt" &amp; _
  '             " AND testord.td_conto = anagra.an_conto" &amp; _  
  '             " WHERE movord.codditt = " &amp; convstrnullsql(snaTmp0("codditt")) &amp; _
  '             " AND (mo_tipork = 'O' Or mo_tipork = 'H') " &amp; _
  '             " AND mo_flevas = 'C' " &amp; _
  '             " AND mo_datcons &lt; " &amp; convdatasql(Date, False, False)
  '      strSQL = strSQL &amp; " ORDER BY mo_tipork, mo_anno DESC, mo_serie, mo_numord DESC, mo_riga"
  '      snaTmp = gdb.OpenRecordset(strSQL, dbOpenSnapshot)

  '      If Not snaTmp.EOF Then
  '        snatmp.movefirst()

  '        strTipork = snaTmp("mo_tipork")
  '        If strTipork = "O" Then strTipo = "Ordine a fornitore" Else strTipo = "Ordine di produzione"

  '        dynMsgoutParam.AddNew()
  '        dynMsgoutParam("codditt") = snaTmp0("codditt")

  '        While Not snatmp.eof
  '          If strTipork &lt;&gt; snaTmp("mo_tipork") Then
  '            strTipork = snaTmp("mo_tipork")
  '            If strTipork = "O" Then strTipo = "Ordine a fornitore" Else strTipo = "Ordine di produzione"
  '            dynMsgoutParam.Update()

  '            dynMsgoutParam.AddNew()
  '            dynMsgoutParam("codditt") = snaTmp0("codditt")
  '          End If

  '          If dynMsgoutParam("strMsg") &lt;&gt; "" Then
  '            dynMsgoutParam("strMsg") = dynMsgoutParam("strMsg") &amp; vbcrlf &amp; _
  '                                       strTipo &amp; " del " &amp; snaTmp("td_datord") &amp; _
  '                                       " anno " &amp; snaTmp("mo_anno") &amp; _
  '                                       " serie '" &amp; snaTmp("mo_serie") &amp; "'" &amp; _
  '                                       " numero " &amp; snaTmp("mo_numord") &amp; _
  '                                       " fornitore " &amp; snaTmp("td_conto") &amp; _
  '                                       " - '" &amp; snaTmp("an_descr1") &amp; _
  '                                       "' riga " &amp; snaTmp("mo_riga") &amp; _
  '                                       " articolo '" &amp; snaTmp("mo_codart") &amp; "'" &amp; _
  '                                       " - '" &amp; snaTmp("mo_descr") &amp; _
  '                                       "' quantità residua " &amp; snaTmp("mo_quant") - snaTmp("mo_quaeva") &amp; _
  '                                       " data consegna " &amp; snaTmp("mo_datcons") &amp; "."
  '          Else
  '            dynMsgoutParam("strMsg") = strTipo &amp; " del " &amp; snaTmp("td_datord") &amp; _
  '                                       " anno " &amp; snaTmp("mo_anno") &amp; _
  '                                       " serie '" &amp; snaTmp("mo_serie") &amp; "'" &amp; _
  '                                       " numero " &amp; snaTmp("mo_numord") &amp; _
  '                                       " fornitore " &amp; snaTmp("td_conto") &amp; _
  '                                       " - '" &amp; snaTmp("an_descr1") &amp; _
  '                                       "' riga " &amp; snaTmp("mo_riga") &amp; _
  '                                       " articolo '" &amp; snaTmp("mo_codart") &amp; "'" &amp; _
  '                                       " - '" &amp; snaTmp("mo_descr") &amp; _
  '                                       "' quantità residua " &amp; snaTmp("mo_quant") - snaTmp("mo_quaeva") &amp; _
  '                                       " data consegna " &amp; snaTmp("mo_datcons") &amp; "."

  '          End If

  '          snaTmp.movenext()
  '        End While

  '        dynMsgoutParam.Update()
  '      End If
  '      snaTmp.close()
  '      snaTmp = Nothing

  '      snaTmp0.movenext()
  '    End While
  '  End If

  '  snaTmp0.close()
  '  snaTmp0 = Nothing

  '  If dynMsgoutparam.recordcount &gt; 0 Then
  '    RigheOrdineScadute = True
  '  Else
  '    RigheOrdineScadute = False
  '  End If
  'End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>502</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>RigheOrdineScaduteNonSegnalate</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function RigheOrdineScaduteNonSegnalate(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                                          ByRef dttMsgOutParam As DataTable) As Boolean
    'strCodditt è la ditta da esaminare (= " " significa tutte)
    Dim strSQL As String = ""
    Dim dttDitte As New DataTable
    Dim dttOrdini As New DataTable
    Dim strTipork As String = ""
    Dim strTipo As String = ""
    Dim oCldBase As New CLD__BASE
    Try
      oCldBase.Init(oApp)

      If strCodditt.Trim &lt;&gt; "" Then
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " WHERE codditt = " &amp; CStrSQL(strCodditt)
      Else
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " ORDER BY codditt"
      End If
      dttDitte = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
      If Not dttDitte Is Nothing AndAlso dttDitte.Rows.Count &gt; 0 Then
        For Each dtrDitte As DataRow In dttDitte.Rows

          strSQL = " SELECT testord.td_datord, testord.td_conto, movord.*, anagra.an_descr1 " &amp; _
                   " FROM (testord INNER JOIN movord ON testord.codditt = movord.codditt" &amp; _
                   " AND testord.td_tipork = movord.mo_tipork" &amp; _
                   " AND testord.td_anno = movord.mo_anno" &amp; _
                   " AND testord.td_serie = movord.mo_serie" &amp; _
                   " AND testord.td_numord = movord.mo_numord)" &amp; _
                   " INNER JOIN anagra ON testord.codditt = anagra.codditt" &amp; _
                   " AND testord.td_conto = anagra.an_conto" &amp; _
                   " WHERE movord.codditt = " &amp; CStrSQL(dtrDitte.Item("codditt")) &amp; _
                   " AND (mo_tipork = 'O' Or mo_tipork = 'H') " &amp; _
                   " AND mo_flevas = 'C' " &amp; _
                   " AND mo_datcons &lt; " &amp; CDataSQL(Now) &amp; _
                   " AND mo_aperto = 'N'"
          strSQL = strSQL &amp; " ORDER BY mo_tipork, mo_anno DESC, mo_serie, mo_numord DESC, mo_riga"
          dttOrdini = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)

          If Not dttOrdini Is Nothing AndAlso dttOrdini.Rows.Count &gt; 0 Then
            For Each dtrOrdini As DataRow In dttOrdini.Rows

              strTipork = NTSCStr(dtrOrdini.Item("mo_tipork"))
              If strTipork = "O" Then strTipo = "Ordine a fornitore" Else strTipo = "Ordine di produzione"

              dttMsgOutParam.Rows.Add(dttMsgOutParam.NewRow())
              With dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)
                !codditt = NTSCStr(dtrDitte!codditt)

                .Item("strMsg") = strTipo &amp; " del " &amp; NTSCDate(dtrOrdini!td_datord) &amp; _
                                  " anno " &amp; NTSCInt(dtrOrdini!mo_anno) &amp; _
                                  " serie '" &amp; NTSCStr(dtrOrdini!mo_serie) &amp; "'" &amp; _
                                  " numero " &amp; NTSCLng(dtrOrdini!mo_numord) &amp; _
                                  " fornitore " &amp; NTSCLng(dtrOrdini!td_conto) &amp; _
                                  " - '" &amp; NTSCStr(dtrOrdini!an_descr1) &amp; _
                                  "' riga " &amp; NTSCLng(dtrOrdini!mo_riga) &amp; _
                                  " articolo '" &amp; NTSCStr(dtrOrdini!mo_codart) &amp; "'" &amp; _
                                  " - '" &amp; NTSCStr(dtrOrdini!mo_descr) &amp; _
                                  "' quantità residua " &amp; NTSCDec(dtrOrdini!mo_quant) - NTSCDec(dtrOrdini!mo_quaeva) &amp; _
                                  " data consegna " &amp; NTSCDate(dtrOrdini!mo_datcons) &amp; "."


                .Item("strParam1") = dtrOrdini.Item("mo_tipork")
                .Item("strParam2") = dtrOrdini.Item("mo_anno")
                .Item("strParam3") = dtrOrdini.Item("mo_serie")
                .Item("strParam4") = dtrOrdini.Item("mo_numord")
                .Item("strParam5") = dtrOrdini.Item("mo_riga")
              End With

            Next
          End If
        Next
      End If

      If Not dttMsgOutParam Is Nothing AndAlso dttMsgOutParam.Rows.Count &gt; 0 Then
        dttMsgOutParam.AcceptChanges()
        Return True
      End If

    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function RigheOrdineScaduteNonSegnalate(ByVal strCodditt, ByVal dynMsgOutParam)
  '  'strCodditt è la ditta da esaminare (= " " significa tutte)
  '  Dim strSQL
  '  Dim snaTmp0, snaTmp
  '  Dim strTipork, strTipo

  '  If Trim(strCodditt) &lt;&gt; "" Then
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " WHERE codditt = " &amp; convstrnullsql(strCodditt)
  '  Else
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " ORDER BY codditt"
  '  End If
  '  snaTmp0 = gdb.OpenRecordset(strSQL, dbOpenSnapshot)
  '  If Not snaTmp0.eof Then
  '    snaTmp0.movefirst()

  '    While Not snaTmp0.eof

  '    strSQL = " SELECT testord.td_datord, testord.td_conto, movord.*, anagra.an_descr1 " &amp; _
  '             " FROM (testord INNER JOIN movord ON testord.codditt = movord.codditt" &amp; _
  '             " AND testord.td_tipork = movord.mo_tipork" &amp; _
  '             " AND testord.td_anno = movord.mo_anno" &amp; _
  '             " AND testord.td_serie = movord.mo_serie" &amp; _
  '             " AND testord.td_numord = movord.mo_numord)" &amp; _
  '             " INNER JOIN anagra ON testord.codditt = anagra.codditt" &amp; _
  '             " AND testord.td_conto = anagra.an_conto" &amp; _  
  '             " WHERE movord.codditt = " &amp; convstrnullsql(snaTmp0("codditt")) &amp; _
  '             " AND (mo_tipork = 'O' Or mo_tipork = 'H') " &amp; _
  '             " AND mo_flevas = 'C' " &amp; _
  '             " AND mo_datcons &lt; " &amp; convdatasql(Date, False, False) &amp; _
  '             " AND mo_aperto = 'N'"
  '      strSQL = strSQL &amp; " ORDER BY mo_tipork, mo_anno DESC, mo_serie, mo_numord DESC, mo_riga"
  '      snaTmp = gdb.OpenRecordset(strSQL, dbOpenSnapshot)

  '      If Not snaTmp.EOF Then
  '        snatmp.movefirst()

  '        While Not snatmp.eof
  '          strTipork = snaTmp("mo_tipork")
  '          If strTipork = "O" Then strTipo = "Ordine a fornitore" Else strTipo = "Ordine di produzione"

  '          dynMsgoutParam.AddNew()
  '          dynMsgoutParam("codditt") = snaTmp0("codditt")

  '          dynMsgoutParam("strMsg") = strTipo &amp; " del " &amp; snaTmp("td_datord") &amp; _
  '                                     " anno " &amp; snaTmp("mo_anno") &amp; _
  '                                     " serie '" &amp; snaTmp("mo_serie") &amp; "'" &amp; _
  '                                     " numero " &amp; snaTmp("mo_numord") &amp; _
  '                                     " fornitore " &amp; snaTmp("td_conto") &amp; _
  '                                     " - '" &amp; snaTmp("an_descr1") &amp; _
  '                                     "' riga " &amp; snaTmp("mo_riga") &amp; _
  '                                     " articolo '" &amp; snaTmp("mo_codart") &amp; "'" &amp; _
  '                                     " - '" &amp; snaTmp("mo_descr") &amp; _
  '                                     "' quantità residua " &amp; snaTmp("mo_quant") - snaTmp("mo_quaeva") &amp; _
  '                                     " data consegna " &amp; snaTmp("mo_datcons") &amp; "."

  '          dynMsgoutParam("strParam1") = snaTmp("mo_tipork")
  '          dynMsgoutParam("strParam2") = snaTmp("mo_anno")
  '          dynMsgoutParam("strParam3") = snaTmp("mo_serie")
  '          dynMsgoutParam("strParam4") = snaTmp("mo_numord")
  '          dynMsgoutParam("strParam5") = snaTmp("mo_riga")

  '          dynMsgoutParam.Update()

  '          snaTmp.movenext()
  '        End While

  '      End If
  '      snaTmp.close()
  '      snaTmp = Nothing

  '      snaTmp0.movenext()
  '    End While
  '  End If

  '  snaTmp0.close()
  '  snaTmp0 = Nothing

  '  If dynMsgoutparam.recordcount &gt; 0 Then
  '    RigheOrdineScaduteNonSegnalate = True
  '  Else
  '    RigheOrdineScaduteNonSegnalate = False
  '  End If
  'End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>503</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SettaRigaOrdineSegnalata</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function SettaRigaOrdineSegnalata(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                                  ByRef dttMsgOutParam As DataTable) As Boolean
    'strCodditt è la ditta da esaminare (= " " significa tutte)
    Dim strSQL As String = ""
    Dim oCldBase As New CLD__BASE
    Try
      oCldBase.Init(oApp)

      For i As Integer = 0 To dttMsgOutParam.Rows.Count - 1
        With dttMsgOutParam.Rows(i)
          strSQL = " UPDATE testord SET td_ultagg = " &amp; CDataOraSQL(Now) &amp; _
                   " WHERE codditt = " &amp; CStrSQL(!codditt) &amp; _
                   " AND td_tipork = " &amp; CStrSQL(!strParam1) &amp; _
                   " AND td_anno = " &amp; NTSCInt(!strParam2) &amp; _
                   " AND td_serie = " &amp; CStrSQL(!strParam3) &amp; _
                   " AND td_numord = " &amp; NTSCLng(!strParam4)
          oCldBase.Execute(strSQL, CLE__APP.DBTIPO.DBAZI)

          strSQL = " UPDATE movord SET mo_aperto = 'S'" &amp; _
                   " WHERE codditt = " &amp; CStrSQL(!codditt) &amp; _
                   " AND mo_tipork = " &amp; CStrSQL(!strParam1) &amp; _
                   " AND mo_anno = " &amp; NTSCInt(!strParam2) &amp; _
                   " AND mo_serie = " &amp; CStrSQL(!strParam3) &amp; _
                   " AND mo_numord = " &amp; NTSCLng(!strParam4) &amp; _
                   " AND mo_riga = " &amp; NTSCLng(!strParam5)
          oCldBase.Execute(strSQL, CLE__APP.DBTIPO.DBAZI)
        End With
      Next

      Return True
    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function SettaRigaOrdineSegnalata(ByVal strCodditt, ByVal dynMsgOutParam)
  '  Dim strSQL

  '  SettaRigaOrdineSegnalata = False

  '  'on error resume next
  '  strSQL = " UPDATE testord SET td_ultagg = " &amp; convdataorasql(Now, False) &amp; _
  '           " WHERE codditt = " &amp; convstrnullsql(dynMsgOutParam("codditt")) &amp; _
  '           " AND td_tipork = " &amp; convstrnullsql(dynMsgOutParam("strParam1")) &amp; _
  '           " AND td_anno = " &amp; dynMsgOutParam("strParam2") &amp; _
  '           " AND td_serie = " &amp; convstrnullsql(dynMsgOutParam("strParam3")) &amp; _
  '           " AND td_numord = " &amp; dynMsgOutParam("strParam4")
  '  gdb.execute(strsql)
  '  If err &lt;&gt; 0 Then
  '    err.clear()
  '    Exit Function
  '  End If

  '  strSQL = " UPDATE movord SET mo_aperto = 'S'" &amp; _
  '           " WHERE codditt = " &amp; convstrnullsql(dynMsgOutParam("codditt")) &amp; _
  '           " AND mo_tipork = " &amp; convstrnullsql(dynMsgOutParam("strParam1")) &amp; _
  '           " AND mo_anno = " &amp; dynMsgOutParam("strParam2") &amp; _
  '           " AND mo_serie = " &amp; convstrnullsql(dynMsgOutParam("strParam3")) &amp; _
  '           " AND mo_numord = " &amp; dynMsgOutParam("strParam4") &amp; _
  '           " AND mo_riga = " &amp; dynMsgOutParam("strParam5")
  '  gdb.execute(strsql)
  '  If err &lt;&gt; 0 Then
  '    err.clear()
  '    Exit Function
  '  End If

  '  SettaRigaOrdineSegnalata = True
  'End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>504</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>RimesseDiretteScaduteCliente</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function RimesseDiretteScaduteCliente(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                                        ByRef dttMsgOutParam As DataTable) As Boolean
    'strCodditt è la ditta da esaminare (= " " significa tutte)
    Dim bCalcolaSaldoRDScadute As Boolean
    Dim nGgRitardoRDScadute As Integer
    Dim strPint As String = ""
    Dim strDarave As String = ""
    Dim strSQL As String = ""
    Dim dttDitte As New DataTable
    Dim dttScad As New DataTable
    Dim oCldBase As New CLD__BASE
    Try
      oCldBase.Init(oApp)

      If strCodditt.Trim &lt;&gt; "" Then
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " WHERE codditt = " &amp; CStrSQL(strCodditt)
      Else
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " ORDER BY codditt"
      End If
      dttDitte = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
      If Not dttDitte Is Nothing AndAlso dttDitte.Rows.Count &gt; 0 Then
        For Each dtrDitte As DataRow In dttDitte.Rows

          'Leggere le 2 opzioni di registro
          Try
            bCalcolaSaldoRDScadute = CBool(CType(oApp.oMenu, CLE__MENU).GetSettingBusDitt(NTSCStr(dtrDitte!codditt), _
            "BSCGDCST", "OPZIONI", ".", "CalcolaSaldoRDScadute", "0", " ", "0"))
          Catch exOpz As Exception
            bCalcolaSaldoRDScadute = False
          End Try
          Try
            nGgRitardoRDScadute = NTSCInt(CType(oApp.oMenu, CLE__MENU).GetSettingBusDitt(NTSCStr(dtrDitte!codditt), _
            "BSCGDCST", "OPZIONI", ".", "Gg_ritardo_RD_scadute", "30", " ", "30"))
          Catch exOpz As Exception
            nGgRitardoRDScadute = 30
          End Try

          strSQL = " SELECT scaden.*, an_descr1, an_tipo " &amp; _
                   " FROM scaden INNER JOIN anagra ON scaden.codditt = anagra.codditt" &amp; _
                   " AND scaden.sc_conto = anagra.an_conto" &amp; _
                   " WHERE scaden.codditt = " &amp; CStrSQL(dtrDitte!codditt) &amp; _
                   " AND sc_datsca &lt; " &amp; CDataSQL(DateAdd(DateInterval.Day, -nGgRitardoRDScadute, Now)) &amp; _
                   " AND sc_flsaldato &lt;&gt; 'S'" &amp; _
                   " AND an_tipo = 'C'"
          If bCalcolaSaldoRDScadute Then
            strSQL = strSQL &amp; " AND sc_tippaga = 3 "
          End If
          strSQL = strSQL &amp; " ORDER BY sc_datsca, sc_conto"
          dttScad = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)

          If Not dttScad Is Nothing AndAlso dttScad.Rows.Count &gt; 0 Then
            dttMsgOutParam.Rows.Add(dttMsgOutParam.NewRow())
            dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)!codditt = NTSCStr(dtrDitte!codditt)
            For Each dtrScad As DataRow In dttScad.Rows

              If NTSCStr(dtrScad.Item("sc_integr")) = "S" Then strPint = " " Else strPint = " non"
              If NTSCStr(dtrScad!sc_darave) = "D" Then strDarave = "attiva" Else strDarave = "passiva"

              With dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)
                If NTSCStr(!strMsg) &lt;&gt; "" Then
                  !strMsg = NTSCStr(!strMsg) &amp; vbCrLf &amp; _
                            "La 'Rimessa diretta' " &amp; strDarave &amp; "," &amp; strPint &amp; " integrativa," &amp; _
                            " anno " &amp; NTSCInt(dtrScad.Item("sc_annpar")) &amp; _
                            " serie '" &amp; NTSCStr(dtrScad.Item("sc_alfpar")) &amp; "'" &amp; _
                            " numero " &amp; NTSCLng(dtrScad.Item("sc_numpar")) &amp; _
                            " rata " &amp; NTSCInt(dtrScad.Item("sc_numrata")) &amp; _
                            " cliente " &amp; NTSCLng(dtrScad.Item("sc_conto")) &amp; _
                            " - '" &amp; NTSCStr(dtrScad.Item("an_descr1")) &amp; _
                            "' di importo pari a " &amp; FormatNumber(dtrScad.Item("sc_importoda"), 2) &amp; " euro" &amp; _
                            ", avendo data di scadenza " &amp; NTSCDate(dtrScad.Item("sc_datsca")) &amp; _
                            ", è scaduta da più di " &amp; nGgRitardoRDScadute &amp; " giorni."
                Else
                  !strMsg = "La 'Rimessa diretta' " &amp; strDarave &amp; "," &amp; strPint &amp; " integrativa," &amp; _
                            " anno " &amp; NTSCInt(dtrScad.Item("sc_annpar")) &amp; _
                            " serie '" &amp; NTSCStr(dtrScad.Item("sc_alfpar")) &amp; "'" &amp; _
                            " numero " &amp; NTSCLng(dtrScad.Item("sc_numpar")) &amp; _
                            " rata " &amp; NTSCInt(dtrScad.Item("sc_numrata")) &amp; _
                            " cliente " &amp; NTSCLng(dtrScad.Item("sc_conto")) &amp; _
                            " - '" &amp; NTSCStr(dtrScad.Item("an_descr1")) &amp; _
                            "' di importo pari a " &amp; FormatNumber(NTSCDec(dtrScad.Item("sc_importoda")), 2) &amp; " euro" &amp; _
                            ", avendo data di scadenza " &amp; NTSCDate(dtrScad.Item("sc_datsca")) &amp; _
                            ", è scaduta da più di " &amp; nGgRitardoRDScadute &amp; " giorni."
                End If
              End With

            Next
          End If

        Next
      End If


      If Not dttMsgOutParam Is Nothing AndAlso dttMsgOutParam.Rows.Count &gt; 0 Then
        dttMsgOutParam.AcceptChanges()
        Return True
      End If

    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function RimesseDiretteScaduteCliente(ByVal strCodditt, ByVal dynMsgOutParam)
  '  'strCodditt è la ditta da esaminare (= " " significa tutte)
  '  Dim strSQL
  '  Dim snaTmp0, snaTmp
  '  Dim fDefault
  '  Dim bCalcolaSaldoRDScadute
  '  Dim nGgRitardoRDScadute
  '  Dim strPint
  '  Dim strDarave

  '  If Trim(strCodditt) &lt;&gt; "" Then
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " WHERE codditt = " &amp; convstrnullsql(strCodditt)
  '  Else
  '    strSQL = " SELECT codditt FROM tabanaz " &amp; _
  '             " ORDER BY codditt"
  '  End If
  '  snaTmp0 = gdb.OpenRecordset(strSQL, dbOpenSnapshot)
  '  If Not snaTmp0.eof Then
  '    snaTmp0.movefirst()

  '    'Leggere le 2 opzioni di registro
  '    bCalcolaSaldoRDScadute = CBool(objStd.GetSettingBusScript("BSCGDCST", "OPZIONI", ".", "CalcolaSaldoRDScadute", "0", " ", fDefault))
  '    nGgRitardoRDScadute = CInt(objStd.GetSettingBusScript("BSCGDCST", "OPZIONI", ".", "Gg_ritardo_RD_scadute", "30", " ", fDefault))

  '    While Not snaTmp0.eof

  '    strSQL = " SELECT scaden.*, an_descr1, an_tipo " &amp; _
  '             " FROM scaden INNER JOIN anagra ON scaden.codditt = anagra.codditt" &amp; _
  '             " AND scaden.sc_conto = anagra.an_conto" &amp; _
  '             " WHERE scaden.codditt = " &amp; ConvStrNullSql(snaTmp0("codditt")) &amp; _
  '             " AND sc_datsca &lt; " &amp; ConvDataSQL(DateAdd("d", -nGgRitardoRDscadute, Date), False, False) &amp; _
  '             " AND sc_flsaldato &lt;&gt; 'S'" &amp; _
  '             " AND an_tipo = 'C'"
  '      If bCalcolaSaldoRDScadute Then
  '        strSQL = strSQL &amp; " AND sc_tippaga = 3 "
  '      End If
  '      strSQL = strSQL &amp; " ORDER BY sc_datsca, sc_conto"
  '      snaTmp = gdb.OpenRecordset(strSQL, dbOpenSnapshot)

  '      If Not snaTmp.EOF Then
  '        snaTmp.movefirst()

  '        dynMsgOutParam.AddNew()
  '        dynMsgOutParam("codditt") = snaTmp0("codditt")

  '        While Not snaTmp.eof

  '          If snaTmp("sc_integr") = "S" Then strPint = " " Else strPint = " non"
  '          If snaTmp("sc_darave") = "D" Then strDarave = "attiva" Else strDarave = "passiva"

  '          If dynMsgOutParam("strMsg") &lt;&gt; "" Then
  '            dynMsgOutParam("strMsg") = dynMsgOutParam("strMsg") &amp; vbCrLf &amp; _
  '                                       "La 'Rimessa diretta' " &amp; strDarave &amp; "," &amp; strPint &amp; " integrativa," &amp; _
  '                                       " anno " &amp; snaTmp("sc_annpar") &amp; _
  '                                       " serie '" &amp; snaTmp("sc_alfpar") &amp; "'" &amp; _
  '                                       " numero " &amp; snaTmp("sc_numpar") &amp; _
  '                                       " rata " &amp; snaTmp("sc_numrata") &amp; _
  '                                       " cliente " &amp; snaTmp("sc_conto") &amp; _
  '                                       " - '" &amp; snaTmp("an_descr1") &amp; _
  '                                       "' di importo pari a " &amp; FormatNumber(snaTmp("sc_importoda"), 2) &amp; " euro" &amp; _
  '                                       ", avendo data di scadenza " &amp; snaTmp("sc_datsca") &amp; _
  '                                       ", è scaduta da più di " &amp; nGgRitardoRDScadute &amp; " giorni."

  '          Else
  '            dynMsgOutParam("strMsg") = "La 'Rimessa diretta' " &amp; strDarave &amp; "," &amp; strPint &amp; " integrativa," &amp; _
  '                                       " anno " &amp; snaTmp("sc_annpar") &amp; _
  '                                       " serie '" &amp; snaTmp("sc_alfpar") &amp; "'" &amp; _
  '                                       " numero " &amp; snaTmp("sc_numpar") &amp; _
  '                                       " rata " &amp; snaTmp("sc_numrata") &amp; _
  '                                       " cliente " &amp; snaTmp("sc_conto") &amp; _
  '                                       " - '" &amp; snaTmp("an_descr1") &amp; _
  '                                       "' di importo pari a " &amp; FormatNumber(snaTmp("sc_importoda"), 2) &amp; " euro" &amp; _
  '                                       ", avendo data di scadenza " &amp; snaTmp("sc_datsca") &amp; _
  '                                       ", è scaduta da più di " &amp; nGgRitardoRDScadute &amp; " giorni."
  '          End If

  '          snaTmp.movenext()
  '        End While

  '        dynMsgOutParam.Update()

  '      End If
  '      snaTmp.close()
  '      snaTmp = Nothing

  '      snaTmp0.movenext()
  '    End While
  '  End If

  '  snaTmp0.close()
  '  snaTmp0 = Nothing

  '  If dynMsgOutParam.recordcount &gt; 0 Then
  '    RimesseDiretteScaduteCliente = True
  '  Else
  '    RimesseDiretteScaduteCliente = False
  '  End If
  'End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>505</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>AttivitaScadute</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function AttivitaScadute(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                           ByRef dttMsgOutParam As DataTable) As Boolean
    'strCodditt è la ditta da esaminare (= " " significa tutte)
    Dim strSQL As String = ""
    Dim oCldBase As New CLD__BASE
    Dim dttOperat As New DataTable
    Dim dttDitte As New DataTable
    Dim dttCract As New DataTable
    Dim dateNow As Date
    Dim strNome As String = ""
    Dim dTime As Decimal = 0
    Dim lProgr As Long = 0
    Try
      oCldBase.Init(oApp)

      dateNow = Now
      dTime = ArrDbl(NTSCDec(dateNow.Hour * 3600 + dateNow.Minute * 60) / 3600, 4)

      strSQL = " SELECT opnome FROM operat" &amp; _
               " ORDER BY opnome"
      dttOperat = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBPRC)
      If Not dttOperat Is Nothing AndAlso dttOperat.Rows.Count &gt; 0 Then
        For Each dtrOperat As DataRow In dttOperat.Rows
          If strCodditt.Trim &lt;&gt; "" Then
            strSQL = " SELECT codditt FROM tabanaz " &amp; _
                     " WHERE codditt = " &amp; CStrSQL(strCodditt)
          Else
            strSQL = " SELECT codditt FROM tabanaz " &amp; _
                     " ORDER BY codditt"
          End If
          dttDitte = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
          If Not dttDitte Is Nothing AndAlso dttDitte.Rows.Count &gt; 0 Then
          For Each dtrDitte As DataRow In dttDitte.Rows
              strNome = Trim(NTSCStr(dtrOperat.Item("opnome")))
              strSQL = " SELECT * FROM cract INNER JOIN cractopp ON cract.codditt = cractopp.codditt And cract.ca_codcrac = cractopp.cap_codcrac" &amp; _
                   " WHERE cract.codditt = " &amp; CStrSQL(dtrDitte.Item("codditt")) &amp; _
                   " AND (cract.ca_dataprev &lt; " &amp; CDataSQL(dateNow) &amp; _
                   "   OR cract.ca_dataprev = " &amp; CDataSQL(dateNow) &amp; " AND cract.ca_oraprev &lt; " &amp; CDblSQL(dTime) &amp; ")" &amp; _
                   " AND cractopp.cap_status = 'D'" &amp; _
                   " AND cractopp.cap_opcrmincpr = " &amp; CStrSQL(strNome) &amp; _ 
                   " ORDER BY cract.ca_dataprev, cract.ca_oraprev"
              dttCract = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
              If Not dttCract Is Nothing AndAlso dttCract.Rows.Count &gt; 0 Then
                dttMsgOutParam.Rows.Add(dttMsgOutParam.NewRow())
                dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)!codditt = NTSCStr(dtrDitte.Item("codditt"))
                For Each dtrCract As DataRow In dttCract.Rows
                  With dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)
                    If NTSCStr(!strMsg) &lt;&gt; "" Then
                      !strMsg = NTSCStr(!strMsg) &amp; vbCrLf &amp; vbCrLf &amp; _
                                "Attività n° " &amp; NTSCLng(dtrCract.Item("ca_codcrac")) &amp; _
                                " Oggetto '" &amp; NTSCStr(dtrCract.Item("ca_oggetto")) &amp; "'" &amp; _
                                " Operatore previsto: '" &amp; NTSCStr(strNome) &amp; "'" &amp; _
                                " Data prevista: " &amp; NTSCDate(dtrCract.Item("ca_dataprev")) &amp; _
                                " Ora prevista: " &amp; (Fix(ConvOra100Ora60(NTSCDec(dtrCract.Item("ca_oraprev"))) * 100) / 100)
                    Else
                      !strMsg = "Attività n° " &amp; NTSCLng(dtrCract.Item("ca_codcrac")) &amp; _
                                " Oggetto '" &amp; NTSCStr(dtrCract.Item("ca_oggetto")) &amp; "'" &amp; _
                                " Operatore previsto: '" &amp; NTSCStr(strNome) &amp; "'" &amp; _
                                " Data prevista: " &amp; NTSCDate(dtrCract.Item("ca_dataprev")) &amp; _
                                " Ora prevista: " &amp; (Fix(ConvOra100Ora60(NTSCDec(dtrCract.Item("ca_oraprev"))) * 100) / 100)
                    End If
                  End With
                Next
              End If

            Next
          End If

        Next
      End If

      If Not dttMsgOutParam Is Nothing AndAlso dttMsgOutParam.Rows.Count &gt; 0 Then
        dttMsgOutParam.AcceptChanges()
        Return True
      End If

    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function AttivitaScadute(ByVal strCodditt, ByVal dynMsgOutParam)
  '  'strCodditt è la ditta da esaminare (= " " significa tutte)
  '  Dim strDate, strTime, dTime
  '  Dim strSQL
  '  Dim snaTmp0, snaTmp, snaTmp2
  '  Dim lProgr, strNome

  'strDate = Date
  '  strTime = Time
  '  dTime = ArrDbl((Hour(strTime) * 3600 + Minute(strTime) * 60) / 3600, 4)

  '  strSQL = " SELECT opnome FROM operat" &amp; _
  '           " ORDER BY opnome"
  '  snaTmp0 = gdbAp.OpenRecordset(strSQL, dbOpenSnapshot)
  '  If Not snaTmp0.eof Then
  '    snaTmp0.movefirst()

  '    While Not snaTmp0.eof

  '      'Progressivo operatore, se più DITTE potrebbe essere &lt;&gt; da ditta a ditta
  '      strSQL = " SELECT codditt, max(og_progr) as progr, max(og_descont) as descont, max(og_descont2) as descont2 " &amp; _
  '               " FROM organig" &amp; _
  '               " WHERE og_coperat = " &amp; convstrnullsql(snaTmp0("opnome")) &amp; _
  '               " GROUP BY codditt"
  '      If Trim(strCodditt) &lt;&gt; "" Then
  '        strSQL = strSQL &amp; " HAVING codditt = " &amp; convstrnullsql(strCodditt)
  '      End If
  '      strSQL = strSQL &amp; " ORDER BY codditt"
  '      snaTmp = gdb.OpenRecordset(strSQL, dbOpenSnapshot)
  '      If Not snaTmp.EOF Then
  '        snatmp.movefirst()
  '        While Not snatmp.eof
  '          lProgr = snaTmp("progr")
  '          strNome = Trim(ConvNullStr(snaTmp("descont"))) &amp; " " &amp; Trim(ConvNullStr(snaTmp("descont2")))

  '          strSQL = " SELECT * FROM cract " &amp; _
  '                   " WHERE codditt = " &amp; convstrnullsql(snaTmp("codditt")) &amp; _
  '                   " AND ca_status = 'D'" &amp; _
  '                   " AND (ca_dataprev &lt; " &amp; ConvDatasql(strDate, False, False) &amp; _
  '                   "   OR ca_dataprev = " &amp; ConvDatasql(strDate, False, False) &amp; " AND ca_oraprev &lt; " &amp; ConvDblsql(dTime) &amp; ")" &amp; _
  '                   " AND ca_opincpr = " &amp; lProgr &amp; _
  '                   " ORDER BY ca_dataprev, ca_oraprev"

  '          snaTmp2 = gdb.openrecordset(strsql, dbopensnapshot)
  '          If Not snaTmp2.EOF Then
  '            snatmp2.movefirst()

  '            dynMsgoutParam.AddNew()
  '            dynMsgoutParam("codditt") = snaTmp("codditt")

  '            While Not snaTmp2.eof

  '              If dynMsgoutParam("strMsg") &lt;&gt; "" Then
  '                dynMsgoutParam("strMsg") = dynMsgoutParam("strMsg") &amp; vbcrlf &amp; _
  '                                           "Attività n° " &amp; snaTmp2("ca_codcrac") &amp; _
  '                                           " Oggetto '" &amp; snaTmp2("ca_oggetto") &amp; "'" &amp; _
  '                                           " Operatore previsto: " &amp; convstrnullsql(strNome) &amp; _
  '                                           " Data prevista: " &amp; convnullstr(snaTmp2("ca_dataprev")) &amp; _
  '                                           " Ora prevista: " &amp; (Fix(convora100ora60(snaTmp2("ca_oraprev")) * 100) / 100)
  '              Else
  '                dynMsgoutParam("strMsg") = "Attività n° " &amp; snaTmp2("ca_codcrac") &amp; _
  '                                           " Oggetto '" &amp; snaTmp2("ca_oggetto") &amp; "'" &amp; _
  '                                           " Operatore previsto: " &amp; convstrnullsql(strNome) &amp; _
  '                                           " Data prevista: " &amp; convnullstr(snaTmp2("ca_dataprev")) &amp; _
  '                                           " Ora prevista: " &amp; (Fix(convora100ora60(snaTmp2("ca_oraprev")) * 100) / 100)
  '              End If

  '              snaTmp2.movenext()
  '            End While

  '            dynMsgoutParam.Update()

  '          End If
  '          snaTmp2.close()
  '          snaTmp2 = Nothing


  '          snatmp.movenext()
  '        End While
  '      End If
  '      snaTmp.Close()
  '      snaTmp = Nothing

  '      snaTmp0.movenext()
  '    End While
  '  End If

  '  snaTmp0.close()
  '  snaTmp0 = Nothing

  '  If dynMsgoutparam.recordcount &gt; 0 Then
  '    AttivitaScadute = True
  '  Else
  '    AttivitaScadute = False
  '  End If
  'End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>506</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>AttivitaScaduteOperatore</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>  Function AttivitaScaduteOperatore(ByRef oApp As CLE__APP, ByVal strCodditt As String, _
                                    ByRef dttMsgOutParam As DataTable) As Boolean
    'strCodditt è la ditta da esaminare (= " " significa tutte)
    Dim strSQL As String = ""
    Dim oCldBase As New CLD__BASE
    Dim dttDitte As New DataTable
    Dim dttCract As New DataTable
    Dim dateNow As Date
    Dim dTime As Decimal = 0
    Try
      oCldBase.Init(oApp)

      dateNow = Now
      dTime = ArrDbl(NTSCDec(dateNow.Hour * 3600 + dateNow.Minute * 60) / 3600, 4)
          
      If strCodditt.Trim &lt;&gt; "" Then
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " WHERE codditt = " &amp; CStrSQL(strCodditt)
      Else
        strSQL = " SELECT codditt FROM tabanaz " &amp; _
                 " ORDER BY codditt"
      End If

      dttDitte = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
      If Not dttDitte Is Nothing AndAlso dttDitte.Rows.Count &gt; 0 Then
        For Each dtrDitte As DataRow In dttDitte.Rows
          strSQL = " SELECT * FROM cract INNER JOIN cractopp ON cract.codditt = cractopp.codditt And cract.ca_codcrac = cractopp.cap_codcrac" &amp; _
                   " WHERE cract.codditt = " &amp; CStrSQL(dtrDitte.Item("codditt")) &amp; _
                   " AND (cract.ca_dataprev &lt; " &amp; CDataSQL(dateNow) &amp; _
                   "   OR cract.ca_dataprev = " &amp; CDataSQL(dateNow) &amp; " AND cract.ca_oraprev &lt; " &amp; CDblSQL(dTime) &amp; ")" &amp; _
                   " AND cractopp.cap_status = 'D'" &amp; _
                   " AND cractopp.cap_opcrmincpr = 'roby'" &amp; _ 
                   " ORDER BY cract.ca_dataprev, cract.ca_oraprev"
          dttCract = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
          If Not dttCract Is Nothing AndAlso dttCract.Rows.Count &gt; 0 Then
            dttMsgOutParam.Rows.Add(dttMsgOutParam.NewRow())
            dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)!codditt = NTSCStr(dtrDitte.Item("codditt"))
            For Each dtrCract As DataRow In dttCract.Rows
              With dttMsgOutParam.Rows(dttMsgOutParam.Rows.Count - 1)
                If NTSCStr(!strMsg) &lt;&gt; "" Then
                  !strMsg = NTSCStr(!strMsg) &amp; vbCrLf &amp; _
                            "Attività n° " &amp; NTSCLng(dtrCract.Item("ca_codcrac")) &amp; _
                            " Oggetto '" &amp; NTSCStr(dtrCract.Item("ca_oggetto")) &amp; "'" &amp; _
                            " Data prevista: " &amp; NTSCDate(dtrCract.Item("ca_dataprev")) &amp; _
                            " Ora prevista: " &amp; (Fix(ConvOra100Ora60(NTSCDec(dtrCract.Item("ca_oraprev"))) * 100) / 100)
                Else
                  !strMsg = "Attività n° " &amp; NTSCLng(dtrCract.Item("ca_codcrac")) &amp; _
                            " Oggetto '" &amp; NTSCStr(dtrCract.Item("ca_oggetto")) &amp; "'" &amp; _
                            " Data prevista: " &amp; NTSCDate(dtrCract.Item("ca_dataprev")) &amp; _
                            " Ora prevista: " &amp; (Fix(ConvOra100Ora60(NTSCDec(dtrCract.Item("ca_oraprev"))) * 100) / 100)
                End If
              End With
            Next
          End If
        Next
      End If

      If Not dttMsgOutParam Is Nothing AndAlso dttMsgOutParam.Rows.Count &gt; 0 Then
        dttMsgOutParam.AcceptChanges()
        Return True
      End If

    Catch ex As Exception
      Throw (New NTSException(GestError(ex, Me, strSQL, oApp.InfoError, "", False)))
    End Try
  End Function
  '-------------------------------------------------
  'Ha sostituito la procedura VB6 seguente:
  '-------------------------------------------------
  'Function AttivitaScaduteOperatore(ByVal strCodditt, ByVal dynMsgOutParam)
  '  'strCodditt è la ditta da esaminare (= " " significa tutte)
  '  Dim strDate, strTime, dTime
  '  Dim strSQL
  '  Dim snaTmp, snaTmp2
  '  Dim lProgr

  'strDate = Date
  '  strTime = Time
  '  dTime = ArrDbl((Hour(strTime) * 3600 + Minute(strTime) * 60) / 3600, 4)

  '  'Progressivo operatore, se più DITTE potrebbe essere &lt;&gt; da ditta a ditta
  '  strSQL = " SELECT codditt, max(og_progr) as progr " &amp; _
  '           " FROM organig" &amp; _
  '           " WHERE og_coperat = 'roby'" &amp; _
  '           " GROUP BY codditt"
  '  If Trim(strCodditt) &lt;&gt; "" Then
  '    strSQL = strSQL &amp; " HAVING codditt = " &amp; convstrnullsql(strCodditt)
  '  End If
  '  strSQL = strSQL &amp; " ORDER BY codditt"
  '  snaTmp = gdb.OpenRecordset(strSQL, dbOpenSnapshot)
  '  If Not snaTmp.EOF Then
  '    snaTmp.movefirst()
  '    While Not snaTmp.eof
  '      lProgr = snaTmp("progr")

  '      strSQL = " SELECT * FROM cract " &amp; _
  '               " WHERE codditt = " &amp; convstrnullsql(snaTmp("codditt")) &amp; _
  '               " AND ca_status = 'D'" &amp; _
  '               " AND (ca_dataprev &lt; " &amp; ConvDatasql(strDate, False, False) &amp; _
  '               "   OR ca_dataprev = " &amp; ConvDatasql(strDate, False, False) &amp; " AND ca_oraprev &lt; " &amp; ConvDblsql(dTime) &amp; ")" &amp; _
  '               " AND ca_opincpr = " &amp; lProgr &amp; _
  '               " ORDER BY ca_dataprev, ca_oraprev"

  '      snaTmp2 = gdb.openrecordset(strSQL, dbopensnapshot)
  '      If Not snaTmp2.EOF Then
  '        snaTmp2.movefirst()

  '        dynMsgOutParam.AddNew()
  '        dynMsgOutParam("codditt") = snaTmp("codditt")

  '        While Not snaTmp2.eof

  '          If dynMsgOutParam("strMsg") &lt;&gt; "" Then
  '            dynMsgOutParam("strMsg") = dynMsgOutParam("strMsg") &amp; vbCrLf &amp; _
  '                                       "Attività n° " &amp; snaTmp2("ca_codcrac") &amp; _
  '                                       " Oggetto '" &amp; snaTmp2("ca_oggetto") &amp; "'" &amp; _
  '                                       " Data prevista: " &amp; convnullstr(snaTmp2("ca_dataprev")) &amp; _
  '                                       " Ora prevista: " &amp; (Fix(ConvOra100Ora60(snaTmp2("ca_oraprev")) * 100) / 100)
  '          Else
  '            dynMsgOutParam("strMsg") = "Attività n° " &amp; snaTmp2("ca_codcrac") &amp; _
  '                                       " Oggetto '" &amp; snaTmp2("ca_oggetto") &amp; "'" &amp; _
  '                                       " Data prevista: " &amp; convnullstr(snaTmp2("ca_dataprev")) &amp; _
  '                                       " Ora prevista: " &amp; (Fix(ConvOra100Ora60(snaTmp2("ca_oraprev")) * 100) / 100)
  '          End If

  '          snaTmp2.movenext()
  '        End While

  '        dynMsgOutParam.Update()

  '      End If
  '      snaTmp2.close()
  '      snaTmp2 = Nothing


  '      snaTmp.movenext()
  '    End While
  '  End If
  '  snaTmp.Close()
  '  snaTmp = Nothing

  '  If dynMsgOutParam.recordcount &gt; 0 Then
  '    AttivitaScaduteOperatore = True
  '  Else
  '    AttivitaScaduteOperatore = False
  '  End If
  'End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>610</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CRMCodlead</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CRMCodlead As Integer
	Dim lCod As Integer = 0
	Dim oCldBase As CLD__BASE = Nothing
  Try
    If oCldBase Is Nothing Then
      oCldBase = New CLD__BASE
      oCldBase.Init(oApp)
    End If
	  lCod = ocldBase.LegNuma(strCodditt, "C8", " ", 0, True)
	  lCod = ocldBase.AggNuma(strCodditt, "C8", " ", 0, lCod, True, True, "")   
	  Return lCod 
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMCodlead':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>611</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CRMDescr1</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CRMDescr1 as String
	Dim strTmp as String = ""
  Try
  If NTSCStr(VARS!IeIn1Row!F2).Length &gt; 30 then
    strTmp = NTSCStr(VARS!IeIn1Row!F2).Substring(0, 30)
  Else
    strTmp = NTSCStr(VARS!IeIn1Row!F2)
  End If
  
  Return strTmp
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMDescr1':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>612</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CRMDescr2</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CRMDescr2 As String
	Dim strTmp as String = ""
  Try
  If Len(VARS!IeIn1Row!F2) &gt; 30 then
    strTmp = Mid(VARS!IeIn1Row!F2, 30)
  End If
  
  Return strTmp
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMDescr1':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>613</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>CRMAfterIns</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub CRMAfterIns
  Dim strSQL As String = ""
  Dim strCombo1 As String = ""
  Dim strCombo2 As String = ""
  Dim strCombo3 As String = ""
  Dim strSett As String = ""
  Dim oCldBase As CLD__BASE = Nothing
  Dim dttTmp As DataTable = Nothing
  
  Try
      If ocldBase Is Nothing Then
        ocldBase = New CLD__BASE
        ocldBase.Init(oApp)
      End If
      strSQL = "SELECT * FROM tabaext WHERE tb_tipork = 'L'"
      dttTmp = ocldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)

      If dttTmp.Rows.Count &gt; 0 Then
        If NTSCStr(dttTmp.Rows(0)!tb_combo1).Length &lt;&gt; 0 Then
          For i As Integer = 65 To 76
            Select Case i
              Case 74, 75
              Case Else
                If NTSCStr(dttTmp.Rows(0)("tb_helpcom1_" &amp; Chr(i))).Length &lt;&gt; 0 Then
                  strCombo1 = Chr(i)
                  Exit For
                End If
            End Select
          Next
        End If

        If NTSCStr(dttTmp.Rows(0)!tb_combo2).Length &lt;&gt; 0 Then
          For i As Integer = 65 To 69
            If NTSCStr(dttTmp.Rows(0)("tb_helpcom2_" &amp; Chr(i))).Length &lt;&gt; 0 Then
              strCombo2 = Chr(i)
              Exit For
            End If
          Next
        End If

        If NTSCStr(dttTmp.Rows(0)!tb_combo3).Length &lt;&gt; 0 Then
          For i As Integer = 65 To 86
            Select Case i
              Case 74, 75
              Case Else
                If NTSCStr(dttTmp.Rows(0)("tb_helpcom3_" &amp; Chr(i))).Length &lt;&gt; 0 Then
                  strCombo3 = Chr(i)
                  Exit For
                End If
            End Select
          Next
        End If

				If NTSCStr(VARS!IeIn1Row!F11).Length &lt;&gt; 0 Then
	  			strSett = VARS!IeIn1Row!F11
				Else
	  			strSett = " "
				End If
		    
				If strCombo1.Length =0 Then
	  			strCombo1 = " "
				End If
 				If strCombo2.Length =0 Then
	  			strCombo2 = " "
				End If
				If strCombo3.Length =0 Then
	  			strCombo3 = " "
				End If
		    
				strSQL = "INSERT INTO anaext(codditt, ax_conto, ax_coddest, ax_codlead, ax_tipork, ax_tipo1, ax_tipo2," &amp; _
		       " ax_tipo3, ax_descr1, ax_descr2, ax_descr3, ax_descr4, ax_descr5, ax_descr6, ax_descr7, ax_descr8," &amp; _
		       " ax_descr9, ax_descr10, ax_desext1, ax_desext2, ax_desext3, ax_num1, ax_num2, ax_num3, ax_num4, ax_num5, ax_num6, ax_num7," &amp; _
		       " ax_num8, ax_num9, ax_num10, ax_check1, ax_check2, ax_check3, ax_check4, ax_check5, ax_check6," &amp; _
		       " ax_check7, ax_check8, ax_check9, ax_check10, ax_combo1, ax_combo2, ax_combo3, ax_opnome, ax_ultagg)" &amp; _
		       " VALUES(" &amp; CStrSQL(strCodditt) &amp; ", 0, 0, " &amp; VARS!IeOu1Row!le_codlead &amp; ", 'L'," &amp; _
		       " ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', " &amp; CStrSQL(strSett) &amp; ", ' ', ' ', ' ', ' ', ' ', ' ', ' '," &amp; _
		       " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'," &amp; _
		       CStrSQL(strCombo1) &amp; ", " &amp; CStrSQL(strCombo2) &amp; ", " &amp; CStrSQL(strCombo3) &amp; ", " &amp; _
		       CStrSQL(strOperat) &amp;  ", " &amp; CDataSQL(Date.Now()) &amp; ")"
        oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
      End If 
      
      strSQL = "INSERT INTO acclead(codditt, opcr_opnome, opcr_codlead, opcr_crmvis, opcr_crmmod)" &amp; _
    			 " VALUES(" &amp; CStrSQL(strCodditt) &amp; "," &amp; CStrSQL(strOperat) &amp; "," &amp; VARS!IeOu1Row!le_codlead &amp; ",'S', 'S')"
	    oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMAfterIns':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>615</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>CRMLeadStart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public strCodditt As String = ""
Public strOperat As String = ""
Public strPrivacy As String = ""

Sub CRMLeadStart
 Dim strRet As String = ""
 Dim strSQL As String = ""
 Dim oCldBase As CLD__BASE = Nothing
 Dim dttTmp As DataTable = Nothing

  Try
    If oCldBase Is Nothing Then
      oCldBase = New CLD__BASE
      oCldBase.Init(oApp)
    End If
      
    strCodditt = oApp.Ditta.ToString
    'Chiede l'operatore di Business a cui associare i LEADS che verranno importati
    strRet=InputBox("Inserire l'operatore di Business a cui associare i LEADS che verranno importati. " , "","Admin")
    If trim(strRet)="" Then
      MsgBox("Indicare un operatore. Importazione annullata.", vbInformation, "Importazione LEADS")
      VARS!IECancelAll=True
      Return
    End if
    
    'Controlla l'esistenza dell'operatore e che sia operatore CRM
    strSQL =  "SELECT opnome, opiscrmus FROM operat WHERE opnome = " &amp; CStrSQL(strRet)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBPRC)
    If dttTmp.Rows.Count = 0 Then
      MsgBox("L'operatore indicato '" &amp; strRet &amp; "' non esiste. Importazione annullata.", vbInformation, "Importazione LEADS")
      VARS!IECancelAll=True
      Return
		ElseIf NTSCStr(dttTmp.rows(0)!opiscrmus)&lt;&gt; "S" then
      MsgBox("L'operatore indicato '" &amp; strRet &amp; "' non è un operatore CRM. Importazione annullata.", vbInformation, "Importazione LEADS")
      VARS!IECancelAll=True
      Return
    Else
    	strOperat = strRet
    End If    
    dttTmp.Clear()
    
    strRet=InputBox("Inserire il valore da attribuire al campo Privacy." &amp; vbCrlf &amp; "('S' = Concessa, 'N' = Non concessa, ' ' = Non definita)",""," ")
	  Select Case strRet
	    Case "S", "s"
	      strPrivacy = "S"
	    Case "N", "n"
	      strPrivacy = "N"
	    Case else
	      strPrivacy = " "
	  End select
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMBeforeAll':" &amp; ex.Message)
  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>616</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>CRMPrivacy</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function CRMPrivacy As String
  Try
		Return strPrivacy
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'CRMPrivacy':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>617</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>Ditta</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function Ditta As String
  Try
    return strCodditt
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'Ditta':" &amp; ex.Message)
  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>618</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>Ultagg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function Ultagg
  Try
    return Date.Now()
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'Ultagg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>900</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>Init</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public lConto as integer

Sub Init

End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>901</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>Conto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function Conto

   lConto = lConto + 1

   return lConto

End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>902</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>Descrizione</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function Descrizione


   return VARS!IeIn1Row!an_descr1 &amp; VARS!IeIn1Row!an_descr2


End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>990</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SpaInit</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Imports System.Globalization


Public Const DATE_FORMAT As String = "yyyyMMdd"

Public strDitta As String = ""
Public oCldBase As CLD__BASE = Nothing
Public dtUltagg As Date = Nothing
Public strOpnome As String = ""

Sub SpaInit
  Try
    strDitta = oApp.Ditta.ToString
    oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    dtUltagg = Date.Now()
    strOpnome = oApp.User.Nome
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaInit':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>991</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaUltagg</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaUltagg As Date
  Try
    Return dtUltagg
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaUltagg':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>992</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SpaBeforeIns</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SpaBeforeIns
  Dim strSQL As String = ""
  Dim dttTmp As DataTable = Nothing
  Try
    strSQL = "SELECT dd_conto FROM destdiv WHERE" &amp; _
             " codditt = " &amp; CStrSQL(strDitta) &amp; " AND dd_conto = " &amp; NTSCInt(VARS!IeOu1Row!tm_conto) &amp; _
             " AND dd_coddest = " &amp; NTSCInt(VARS!IeOu1Row!tm_coddest) 
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp.Rows.Count = 0 Then
      strSQL = "INSERT INTO destdiv (codditt, dd_conto, dd_coddest, dd_nomdest) VALUES (" &amp; _
                CStrSQL(strDitta) &amp; ", " &amp; _
                NTSCInt(VARS!IeOu1Row!tm_conto) &amp; ", " &amp; NTSCInt(VARS!IeOu1Row!tm_coddest) &amp; ", " &amp; _
                CStrSQL(VARS!IeIn1Row!descdest) &amp; ")"

      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaBeforeIns':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>993</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaGetArtico</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaGetArtico As String
  Dim strCodart As String = ""
  Dim dttTmp As DataTable = Nothing
  Dim strSQL As String = ""
  Try
    strSQL = "SELECT caf_codart FROM codarfo WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
             " AND caf_conto = " &amp; NTSCInt(VARS!IeOu1Row!tm_conto) &amp; _
             " AND caf_codarfo = " &amp; CStrSQL(VARS!IeIn2Row!codart)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp IsNot Nothing AndAlso dttTmp.Rows.Count &gt; 0 Then
      strCodart = NTSCStr(dttTmp.Rows(0)!caf_codart)
    End If

    Return strCodart
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaGetArtico':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>994</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SpaAggiornaDoc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SpaAggiornaDoc
  Dim strSQL As String = ""
  Dim strTipork As String = ""
  Dim strSerie As String = ""
  Dim lNumdoc As Integer = 0
  Dim nAnno As Integer = 0
  Dim dttTmp As DataTable = Nothing
  Try
    strTipork = NTSCStr(VARS!IeOu1Row!tm_tipork)
    strSerie = NTSCStr(VARS!IeOu1Row!tm_serie)
    lNumdoc = NTSCInt(VARS!IeOu1Row!tm_numdoc)
    nAnno = NTSCInt(VARS!IeOu1Row!tm_anno)

    strSQl ="SELECT COUNT(mm_numdoc) AS xx_count FROM movmag" &amp; _
            " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
            " AND mm_anno = " &amp; nAnno &amp; _
            " AND mm_numdoc = " &amp; lNumdoc &amp; _
            " AND mm_serie = " &amp; CStrSQL(strSerie) &amp; _
            " AND mm_tipork = " &amp; CStrSQL(strTipork)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If NTSCInt(dttTmp.Rows(0)!xx_count) = 0 Then
      strSQl ="DELETE FROM testmag" &amp; _
              " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
              " AND tm_anno = " &amp; nAnno &amp; _
              " AND tm_numdoc= " &amp; lNumdoc &amp; _
              " AND tm_serie = " &amp; CStrSQL(strSerie) &amp; _
              " AND tm_tipork = " &amp; CStrSQL(strTipork)
      oCldBase.Execute(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    Else
      RicalcolaDoc(strDitta, strTipork, nAnno, strSerie, lNumdoc, True)
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaAggiornaDoc':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>995</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>SpaRigaBeforeIns</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Sub SpaRigaBeforeIns
  Dim strSQL As String = ""
  Dim dttTmp As DataTable = Nothing
  Try
    strSQL = "SELECT ar_controp, ar_codiva FROM artico WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
             " AND ar_codart = " &amp; CStrSQL(VARS!IeOu2Row!mm_codart)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp IsNot Nothing AndAlso dttTmp.Rows.Count &gt; 0 Then
      VARS!IeOu2Row!mm_controp = NTSCInt(dttTmp.Rows(0)!ar_controp)
      VARS!IeOu2Row!mm_codiva = NTSCInt(dttTmp.Rows(0)!ar_codiva)
    End If
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaRigaBeforeIns':" &amp; ex.Message)
  End Try
End Sub</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>996</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaValore</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaValore As Decimal
  Dim dValore As Decimal = 0d
  Try
    dValore = ArrDbl(NTSCDec(VARS!IeOu2Row!mm_quant) * NTSCDec(VARS!IeOu2Row!mm_prezzo) _
                  * (100 - NTSCDec(VARS!IeOu2Row!mm_scont1)) / 100 * (100 - NTSCDec(VARS!IeOu2Row!mm_scont2)) / 100d, 0)
    Return dValore
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaValore':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>997</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaContoContr</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaContoContr as Integer
  Dim lControp As Integer = 0
  Dim dttTmp As DataTable = Nothing
  Dim strSQL As String = ""
  Try
    strSQL = "SELECT tb_concove FROM tabcove WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
             " AND tb_codcove = " &amp; NTSCInt(VARS!IeOu2Row!mm_controp)
    dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
    If dttTmp IsNot Nothing AndAlso dttTmp.Rows.Count &gt; 0 Then
      lControp = NTSCInt(dttTmp.Rows(0)!tb_concove)
    End If

    Return lControp
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaContoContr':" &amp; ex.Message)
  End Try
End Function
</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>998</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaDatdoc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaDatdoc As DateTime
  Dim dtDatdoc As DateTime = Nothing
  Try
    dtDatdoc =  New Date(NTSCInt(NTSCStr(VARS!IeIn1Row!datdoc).Substring(0,4)), _
                         NTSCInt(NTSCStr(VARS!IeIn1Row!datdoc).Substring(4,2)), _
                         NTSCInt(NTSCStr(VARS!IeIn1Row!datdoc).Substring(6,2)))  
    Return dtDatdoc
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaDatdoc':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>999</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>SpaCausale</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function SpaCausale
  Dim dttTmp As New DataTable
  Dim nCodcau As Integer = 0
  Dim nCodtpbf As Integer = 0
  Try
    nCodtpbf = NTSCInt(VARS!IeIn1Row!codtpbf)
    If oCldBase.ValCodiceDb(NTSCStr(nCodtpbf), strDitta, "TABTPBF", "N", "", dttTmp) Then
      nCodcau = NTSCInt(dttTmp.Rows(0)!tb_tcaumag)
    End If
    Return nCodcau
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'SpaCausale':" &amp; ex.Message)
  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1001</pr_codice>
    <pr_tipo>S</pr_tipo>
    <pr_nome>MetelCatalogoStart</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Public strUMP2 as string 
Public lConto as Long
Public iCodMarca as Integer
Public iCodIVA as Integer
Public strCodditt as String
Public nParIva as string 
Public strSQl as string  
Public oCldBase as New CLD__BASE 
Public dttTmp As New DataTable 

Sub MetelCatalogoStart

  Try
    Dim strRet
    strCodditt = oApp.Ditta.ToString
  
    'Controllo marcatore METEL
    If Microsoft.VisualBasic.Left(VARS!IeIn1Row!sigla &amp; VARS!IeIn1Row!codart, 13)&lt;&gt;"LISTINO METEL" Then
      MsgBox("Formato file da importare non riconosciuto come Catalogo Metel. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    End if
  
    'Controllo versione uguale a 020
    If VARS!IeIn1Row!valuta&lt;&gt;"020"  andalso VARS!IeIn1Row!valuta &lt;&gt; "021" Then
      MsgBox("Versione del tracciato Catalogo Metel non supportata. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    end if
  
    VARS!IeCancelRow = True
    nParIva = NTSCStr(Microsoft.VisualBasic.Right(Microsoft.VisualBasic.Left(VARS!IeIn1Row!barcode.trim  &amp; VARS!IeIn1Row!descr.trim,14),11))
    MsgBox(nParIva )
 
    'oCldBase = New CLD__BASE
    oCldBase.Init(oApp)

    strSQl ="SELECT an_conto FROM anagra" &amp; _
            " WHERE codditt = " &amp; CStrSQL(strCodditt) &amp; _
            " AND an_pariva = " &amp; CStrSQL(nParIva)
   dttTmp = oCldBase.OpenRecordset(strSQL, NTSInformatica.CLE__APP.DBTIPO.DBAZI)
 
    if dttTmp.Rows.Count &lt;= 0 then
           'Chiede il numero di conto del fornitore
           strRet=InputBox("Inserire il numero di conto del Fornitore dei prodotti nel catalogo: " , "Importazione Catalogo Metel","000000000")
           if not isnumeric(strRet) Then
               MsgBox("Indicare un numero di conto fornitore numerico. Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
               VARS!IECancelAll=True
               Exit sub
           else
               lConto = strRet    
           end if
    else   
         lConto = NTSCint(dttTmp.Rows(0)!an_conto.tostring)
    end if  
    dttTmp.clear() 

    'Chiede il codice della marca
    strRet=InputBox("Inserire il codice della marca (obbligatorio) dei prodotti nel catalogo: " , "Importazione Catalogo Metel","0")
    if not isnumeric(strRet) orElse strRet = "0" Then
      MsgBox("Indicare un codice marca valido (compreso tra 1 e 9999). Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    else
      iCodMarca = strRet    
    end if

    'Chiede il codice IVA
    strRet=InputBox("Inserire il codice IVA dei prodotti nel catalogo: " , "Importazione Catalogo Metel","0")
    if not isnumeric(strRet) Then 'Qui è possibile lasciare vuoto il codice IVA
      MsgBox("Indicare un codice IVA valido (compreso tra 0 e 9999). Importazione annullata.", vbInformation, "Importazione Catalogo Metel")
      VARS!IECancelAll=True
      Exit sub
    else
      iCodIVA = strRet    
    end if
  
    'Chiede l'eventuale UM secondaria per gli articoli
    strUMP2=InputBox("Inserire la descrizione per l'eventuale unità di misura secondaria (confezione): " , "Importazione Catalogo Metel","CT")
  
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoStart':" &amp; ex.Message)
  Finally

  End Try
End Sub </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1002</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoDitta</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoDitta

  Try
    Return strCodditt
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoDitta':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1003</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoBarcode</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoBarcode

  Try
  
     if VARS!IeIn1Row!barcode.equals(DBNull.value) orelse VARS!IeIn1Row!barcode.replace("0","").Trim = "" orelse not isNumeric(VARS!IeIn1Row!barcode) then
         return DBNull.value
     else
         return VARS!IeIn1Row!barcode
     end if

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoBarcode':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1004</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoConto</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoConto

  Try
    Return lConto
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoConto':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1005</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoCodmarc</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoCodmarc

  Try
    Return iCodMarca
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoCodmarc':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1006</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoConfez2</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoConfez2

  Try
    Return strUMP2
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoConfez2':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1007</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelCatalogoCodiva</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelCatalogoCodiva

  Try
    Return iCodiva
  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelCatalogoCodiva':" &amp; ex.Message)
  Finally

  End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>1008</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>MetelAssStat</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function MetelAssStat
    Dim strSQL As String = ""
    Dim strDescr As String = ""
    Dim oCldBase As New CLD__BASE
    Dim lCodfam As Integer
    Dim strDitta As String = ""
    Try

    'If NTSCInt(VARS!IeOu1Row!tm_conto) = REA_CONTO Then
      strDescr =NTSCStr(VARS!IeIn1Row!famstat)
    'End If

      oCldBase.Init(oApp)
      strDitta = oApp.Ditta.ToString
 

      strSQL = " SELECT tb_codcfam FROM tabcfam" &amp; _
               " WHERE codditt = " &amp; CStrSQL(strDitta) &amp; _
               " and tb_descfa2 = " &amp; CStrSQL(strDescr) 

      dttTmp = oCldBase.OpenRecordset(strSQL, CLE__APP.DBTIPO.DBAZI)
      If dttTmp.Rows.Count &gt; 0 Then
          lCodfam = NTSCInt(dttTmp.Rows(0)!tb_codcfam)
          Return lCodfam 
      End If

  Catch ex As Exception
    oCleImex.WriteLog("Errore eseguendo la procedura 'MetelAssStat':" &amp; ex.Message)
  Finally

  End Try
End Function</pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>2001</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>AS400TIPOCONTO</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function AS400TIPOCONTO As String
Dim strConto As String = ""
Dim tConto As String = ""
'Try
strConto = NTSCStr(VARS!IeIn1Row!accodi)
if Left(strConto,1)="C" or Left(strConto,1)="X" then
tConto = "C"
end if

if Left(strConto,1)="F" or Left(strConto,1)="S"  then
tConto = "F"
end if

Return tConto

End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>2002</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>AS400CODMASTRO</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function AS400CODMASTRO AS INTEGER

Dim strConto As String = ""
Dim lConto As Integer = 0

Try

strConto = NTSCStr(VARS!IeIn1Row!accodi)

if Left(strConto,1)="C" or Left(strConto,1)="X" then
lConto = 901
end if

if Left(strConto,1)="F" or Left(strConto,1)="S"  then
lConto = 1901
end if


'lConto = NTSCInt(strConto)

If lConto=0 Then
oCleImex.WriteLog("Errore: Impossibile importare il conto " &amp; strConto &amp; ". La riga verrà scartata.")
VARS!IeCancelRow=True
End If

Return lConto
Catch ex As Exception
oCleImex.WriteLog("Errore eseguendo la procedura  % 'ArcaCodconto':" &amp; ex.Message)
VARS!IeCancelRow=True
End Try
End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
  <NTSIEPROCEDDIPNET>
    <pr_codice>2003</pr_codice>
    <pr_tipo>F</pr_tipo>
    <pr_nome>AS400PRIVATO</pr_nome>
    <pr_preload>N</pr_preload>
    <pr_testo>Function AS400PRIVATO As String
Dim strConto As String = ""
Dim tConto As String = ""
'Try
strConto = NTSCStr(VARS!IeIn1Row!accodi)
if Left(strConto,1)="X" then
tConto = "S"
ELSE
tConto = "N"
end if

Return tConto

End Function </pr_testo>
    <pr_scriptnet>S</pr_scriptnet>
  </NTSIEPROCEDDIPNET>
</NTSIEPROCEDDIPNET_table>